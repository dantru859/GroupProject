import { __decorate, __metadata } from "tslib";
import { Injectable, Renderer2, RendererFactory2, ElementRef } from '@angular/core';
let HostService = class HostService {
    constructor(rendererFactory2) {
        this.classMap = {};
        this.styleMap = {};
        this.renderer = rendererFactory2.createRenderer(null, null);
    }
    updateClass({ nativeElement }, classMap) {
        const newClassMap = {};
        const remove = Object.assign({}, this.classMap);
        Object.keys(classMap).filter(i => classMap[i]).forEach(i => {
            newClassMap[i] = true;
            if (!this.classMap[i]) {
                this.renderer.addClass(nativeElement, i);
            }
            if (remove[i]) {
                remove[i] = false;
            }
        });
        Object.keys(remove).filter(i => remove[i]).forEach(i => this.renderer.removeClass(nativeElement, i));
        this.classMap = newClassMap;
    }
    updateStyle({ nativeElement }, styleMap) {
        const remove = Object.assign({}, this.styleMap);
        Object.keys(styleMap).filter(i => styleMap[i]).forEach(i => {
            if (styleMap[i] !== false) {
                this.renderer.setStyle(nativeElement, i, styleMap[i]);
            }
            if (remove[i]) {
                delete remove[i];
            }
        });
        Object.keys(remove).forEach(i => this.renderer.removeStyle(nativeElement, i));
        this.styleMap = styleMap;
    }
};
HostService.ctorParameters = () => [
    { type: RendererFactory2 }
];
HostService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [RendererFactory2])
], HostService);
export { HostService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9ob3N0L2hvc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BGLElBQWEsV0FBVyxHQUF4QixNQUFhLFdBQVc7SUE0Q3RCLFlBQVksZ0JBQWtDO1FBM0N0QyxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2QsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQTJDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlELENBQUM7SUF6Q0QsV0FBVyxDQUFDLEVBQUUsYUFBYSxFQUFjLEVBQUUsUUFBZ0I7UUFDekQsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sTUFBTSxxQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFFLENBQUM7UUFFcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDekQsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzFDO1lBRUQsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUNuQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVyRyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztJQUM5QixDQUFDO0lBRUQsV0FBVyxDQUFDLEVBQUUsYUFBYSxFQUFjLEVBQUUsUUFBZ0I7UUFDekQsTUFBTSxNQUFNLHFCQUFRLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQztRQUVwQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6RCxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdkQ7WUFFRCxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDYixPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNsQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0NBS0YsQ0FBQTs7WUFIK0IsZ0JBQWdCOztBQTVDbkMsV0FBVztJQUR2QixVQUFVLEVBQUU7cUNBNkNtQixnQkFBZ0I7R0E1Q25DLFdBQVcsQ0ErQ3ZCO1NBL0NZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIFJlbmRlcmVyRmFjdG9yeTIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEhvc3RTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjbGFzc01hcCA9IHt9O1xuICBwcml2YXRlIHN0eWxlTWFwID0ge307XG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMjtcblxuICB1cGRhdGVDbGFzcyh7IG5hdGl2ZUVsZW1lbnQgfTogRWxlbWVudFJlZiwgY2xhc3NNYXA6IG9iamVjdCk6IHZvaWQge1xuICAgIGNvbnN0IG5ld0NsYXNzTWFwID0ge307XG4gICAgY29uc3QgcmVtb3ZlID0geyAuLi50aGlzLmNsYXNzTWFwIH07XG5cbiAgICBPYmplY3Qua2V5cyhjbGFzc01hcCkuZmlsdGVyKGkgPT4gY2xhc3NNYXBbaV0pLmZvckVhY2goaSA9PiB7XG4gICAgICBuZXdDbGFzc01hcFtpXSA9IHRydWU7XG5cbiAgICAgIGlmICghdGhpcy5jbGFzc01hcFtpXSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKG5hdGl2ZUVsZW1lbnQsIGkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlW2ldKSB7XG4gICAgICAgIHJlbW92ZVtpXSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMocmVtb3ZlKS5maWx0ZXIoaSA9PiByZW1vdmVbaV0pLmZvckVhY2goaSA9PiB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKG5hdGl2ZUVsZW1lbnQsIGkpKTtcblxuICAgIHRoaXMuY2xhc3NNYXAgPSBuZXdDbGFzc01hcDtcbiAgfVxuXG4gIHVwZGF0ZVN0eWxlKHsgbmF0aXZlRWxlbWVudCB9OiBFbGVtZW50UmVmLCBzdHlsZU1hcDogb2JqZWN0KTogdm9pZCB7XG4gICAgY29uc3QgcmVtb3ZlID0geyAuLi50aGlzLnN0eWxlTWFwIH07XG5cbiAgICBPYmplY3Qua2V5cyhzdHlsZU1hcCkuZmlsdGVyKGkgPT4gc3R5bGVNYXBbaV0pLmZvckVhY2goaSA9PiB7XG4gICAgICBpZiAoc3R5bGVNYXBbaV0gIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUobmF0aXZlRWxlbWVudCwgaSwgc3R5bGVNYXBbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlW2ldKSB7XG4gICAgICAgIGRlbGV0ZSByZW1vdmVbaV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhyZW1vdmUpLmZvckVhY2goaSA9PiB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKG5hdGl2ZUVsZW1lbnQsIGkpKTtcblxuICAgIHRoaXMuc3R5bGVNYXAgPSBzdHlsZU1hcDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyRmFjdG9yeTI6IFJlbmRlcmVyRmFjdG9yeTIpIHtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJGYWN0b3J5Mi5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcbiAgfVxufVxuIl19