import { __decorate, __metadata } from "tslib";
import { Input, Output, EventEmitter } from '@angular/core';
import { isInt } from '../../util/util';
export class NglCommonNotify {
    constructor(element, renderer, cd, type) {
        this.element = element;
        this.renderer = renderer;
        this.cd = cd;
        this.closeButtonAssistiveText = 'Close';
        /**
         * Triggered by close button or duration timeout.
         */
        // tslint:disable-next-line:no-output-rename
        this.closeEventEmitter = new EventEmitter();
        this.currentTimeout = null;
        this.renderer.addClass(this.element.nativeElement, 'slds-notify');
        this.renderer.addClass(this.element.nativeElement, `slds-notify_${type}`);
        this.toggleThemeClass(true, this.variant);
        this.renderer.setAttribute(this.element.nativeElement, 'role', type === 'toast' ? 'status' : 'alert');
    }
    /**
     * The type of alert.
     */
    set variant(variant) {
        this.toggleThemeClass(false, this.variant);
        this._variant = variant;
        this.toggleThemeClass(true, this.variant);
    }
    get variant() {
        return this._variant || 'info';
    }
    /**
     * The number of milliseconds after which, the close event will be triggered with an emitted reason of `'timeout'`.
     */
    set duration(duration) {
        this.clearTimeout();
        if (isInt(duration) && duration >= 0) {
            this.currentTimeout = setTimeout(() => this.close('timeout'), +duration);
        }
    }
    set dismissible(dismissible) {
        this._dismissible = dismissible;
        this.cd.markForCheck();
    }
    get dismissible() {
        return this._dismissible;
    }
    close(reason, $event) {
        this.clearTimeout();
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        this.closeEventEmitter.emit(reason);
    }
    ngOnDestroy() {
        this.clearTimeout();
    }
    clearTimeout() {
        if (this.currentTimeout !== null) {
            clearTimeout(this.currentTimeout);
            this.currentTimeout = null;
        }
    }
    toggleThemeClass(isAdd, klass) {
        if (!klass) {
            return;
        }
        const el = this.element.nativeElement;
        this.renderer[isAdd ? 'addClass' : 'removeClass'](el, `slds-theme_${klass}`);
    }
}
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], NglCommonNotify.prototype, "variant", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglCommonNotify.prototype, "iconName", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglCommonNotify.prototype, "assistiveText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglCommonNotify.prototype, "closeButtonAssistiveText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], NglCommonNotify.prototype, "duration", null);
__decorate([
    Output('close'),
    __metadata("design:type", Object)
], NglCommonNotify.prototype, "closeEventEmitter", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9ub3RpZnkvbm90aWZ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQXVELE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxNQUFNLE9BQU8sZUFBZTtJQWlEMUIsWUFBb0IsT0FBbUIsRUFBVSxRQUFtQixFQUFVLEVBQXFCLEVBQUUsSUFBdUI7UUFBeEcsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQWhDMUYsNkJBQXdCLEdBQUcsT0FBTyxDQUFFO1FBWTdDOztXQUVHO1FBQ0gsNENBQTRDO1FBQzNCLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFZeEQsbUJBQWMsR0FBUSxJQUFJLENBQUM7UUFLakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsZUFBZSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hHLENBQUM7SUFwREQ7O09BRUc7SUFDTSxJQUFJLE9BQU8sQ0FBQyxPQUFpRDtRQUNwRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBQ0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQztJQUNqQyxDQUFDO0lBT0Q7O09BRUc7SUFDTSxJQUFJLFFBQVEsQ0FBQyxRQUFnQjtRQUNwQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDMUU7SUFDSCxDQUFDO0lBUUQsSUFBSSxXQUFXLENBQUMsV0FBb0I7UUFDbEMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7UUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFlRCxLQUFLLENBQUMsTUFBZSxFQUFFLE1BQWM7UUFDbkMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLFlBQVk7UUFDbEIsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFBRTtZQUNoQyxZQUFZLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztJQUVPLGdCQUFnQixDQUFDLEtBQWMsRUFBRSxLQUFhO1FBQ3BELElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFFdkIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxFQUFFLGNBQWMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMvRSxDQUFDO0NBQ0Y7QUE3RVU7SUFBUixLQUFLLEVBQUU7Ozs4Q0FJUDtBQUtRO0lBQVIsS0FBSyxFQUFFOztpREFBa0I7QUFFakI7SUFBUixLQUFLLEVBQUU7O3NEQUFlO0FBQ2Q7SUFBUixLQUFLLEVBQUU7O2lFQUFxQztBQUtwQztJQUFSLEtBQUssRUFBRTs7OytDQUtQO0FBTWdCO0lBQWhCLE1BQU0sQ0FBQyxPQUFPLENBQUM7OzBEQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc0ludCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBOZ2xDb21tb25Ob3RpZnkgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBhbGVydC5cbiAgICovXG4gIEBJbnB1dCgpIHNldCB2YXJpYW50KHZhcmlhbnQ6ICdlcnJvcicgfCAnaW5mbycgfCAnc3VjY2VzcycgfCAnd2FybmluZycpIHtcbiAgICB0aGlzLnRvZ2dsZVRoZW1lQ2xhc3MoZmFsc2UsIHRoaXMudmFyaWFudCk7XG4gICAgdGhpcy5fdmFyaWFudCA9IHZhcmlhbnQ7XG4gICAgdGhpcy50b2dnbGVUaGVtZUNsYXNzKHRydWUsIHRoaXMudmFyaWFudCk7XG4gIH1cbiAgZ2V0IHZhcmlhbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhcmlhbnQgfHwgJ2luZm8nO1xuICB9XG5cbiAgQElucHV0KCkgaWNvbk5hbWU6IHN0cmluZztcblxuICBASW5wdXQoKSBhc3Npc3RpdmVUZXh0O1xuICBASW5wdXQoKSBjbG9zZUJ1dHRvbkFzc2lzdGl2ZVRleHQgPSAnQ2xvc2UnIDtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2gsIHRoZSBjbG9zZSBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCB3aXRoIGFuIGVtaXR0ZWQgcmVhc29uIG9mIGAndGltZW91dCdgLlxuICAgKi9cbiAgQElucHV0KCkgc2V0IGR1cmF0aW9uKGR1cmF0aW9uOiBudW1iZXIpIHtcbiAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgIGlmIChpc0ludChkdXJhdGlvbikgJiYgZHVyYXRpb24gPj0gMCkge1xuICAgICAgdGhpcy5jdXJyZW50VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jbG9zZSgndGltZW91dCcpLCArZHVyYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyZWQgYnkgY2xvc2UgYnV0dG9uIG9yIGR1cmF0aW9uIHRpbWVvdXQuXG4gICAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tb3V0cHV0LXJlbmFtZVxuICBAT3V0cHV0KCdjbG9zZScpIGNsb3NlRXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgc2V0IGRpc21pc3NpYmxlKGRpc21pc3NpYmxlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzbWlzc2libGUgPSBkaXNtaXNzaWJsZTtcbiAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuICB9XG4gIGdldCBkaXNtaXNzaWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzbWlzc2libGU7XG4gIH1cblxuICBwcml2YXRlIF9kaXNtaXNzaWJsZTogYm9vbGVhbjtcblxuICBwcml2YXRlIGN1cnJlbnRUaW1lb3V0OiBhbnkgPSBudWxsO1xuXG4gIHByaXZhdGUgX3ZhcmlhbnQ6ICdlcnJvcicgfCAnaW5mbycgfCAnc3VjY2VzcycgfCAnd2FybmluZyc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCB0eXBlOiAnYWxlcnQnIHwgJ3RvYXN0Jykge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzbGRzLW5vdGlmeScpO1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIGBzbGRzLW5vdGlmeV8ke3R5cGV9YCk7XG4gICAgdGhpcy50b2dnbGVUaGVtZUNsYXNzKHRydWUsIHRoaXMudmFyaWFudCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdyb2xlJywgdHlwZSA9PT0gJ3RvYXN0JyA/ICdzdGF0dXMnIDogJ2FsZXJ0Jyk7XG4gIH1cblxuICBjbG9zZShyZWFzb24/OiBzdHJpbmcsICRldmVudD86IEV2ZW50KSB7XG4gICAgdGhpcy5jbGVhclRpbWVvdXQoKTtcbiAgICBpZiAoJGV2ZW50KSB7XG4gICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZUV2ZW50RW1pdHRlci5lbWl0KHJlYXNvbik7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhclRpbWVvdXQoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmN1cnJlbnRUaW1lb3V0KTtcbiAgICAgIHRoaXMuY3VycmVudFRpbWVvdXQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9nZ2xlVGhlbWVDbGFzcyhpc0FkZDogYm9vbGVhbiwga2xhc3M6IHN0cmluZykge1xuICAgIGlmICgha2xhc3MpIHsgcmV0dXJuOyB9XG5cbiAgICBjb25zdCBlbCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgIHRoaXMucmVuZGVyZXJbaXNBZGQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oZWwsIGBzbGRzLXRoZW1lXyR7a2xhc3N9YCk7XG4gIH1cbn1cbiJdfQ==