import { __decorate, __metadata } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { InputBoolean } from '../util/convert';
let NglPick = class NglPick {
    constructor() {
        this.values = new BehaviorSubject(null);
        this.nglPickChange = new EventEmitter();
        this.nglOptionDestroyed = new EventEmitter();
        this.isMultiple = false;
    }
    set setSelected(selected) {
        this.selected = selected;
        this.ngAfterContentInit();
    }
    ngAfterContentInit() {
        this.values.next(this.selected);
    }
    selectOption(value) {
        let next;
        if (this.isMultiple) {
            if (Array.isArray(this.selected)) {
                // Remove if already there or add to selection
                const index = this.selected.indexOf(value);
                next = index > -1
                    ? [...this.selected.slice(0, index), ...this.selected.slice(index + 1)]
                    : [...this.selected, value];
            }
            else {
                next = Object.assign({}, this.selected, { [value]: !this.selected[value] });
            }
        }
        else {
            next = value;
        }
        this.nglPickChange.emit(next);
    }
    optionRemoved(value) {
        if (this.isMultiple && !this.selected) {
            return;
        }
        let emit;
        if (this.isMultiple) {
            emit = Array.isArray(this.selected) ? this.selected.indexOf(value) > -1 : !!this.selected[value];
        }
        else {
            emit = this.selected === value;
        }
        if (emit) {
            setTimeout(() => this.nglOptionDestroyed.emit(value));
        }
    }
};
__decorate([
    Input('nglPick'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], NglPick.prototype, "setSelected", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglPick.prototype, "nglPickActiveClass", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglPick.prototype, "nglPickChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglPick.prototype, "nglOptionDestroyed", void 0);
__decorate([
    Input('nglPickMultiple'), InputBoolean(),
    __metadata("design:type", Object)
], NglPick.prototype, "isMultiple", void 0);
NglPick = __decorate([
    Directive({
        selector: '[nglPick]',
    })
], NglPick);
export { NglPick };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGljay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9waWNrL3BpY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBSy9DLElBQWEsT0FBTyxHQUFwQixNQUFhLE9BQU87SUFBcEI7UUFHRSxXQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFTekIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ25DLHVCQUFrQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFUixlQUFVLEdBQUcsS0FBSyxDQUFDO0lBMEMvRCxDQUFDO0lBcERtQixJQUFJLFdBQVcsQ0FBQyxRQUFnQjtRQUNoRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBU0Qsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQVU7UUFDckIsSUFBSSxJQUFTLENBQUM7UUFDZCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDaEMsOENBQThDO2dCQUM5QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7b0JBQ1QsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUNyQztpQkFBTTtnQkFDTCxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQzthQUMzRTtTQUNGO2FBQU07WUFDTCxJQUFJLEdBQUcsS0FBSyxDQUFDO1NBQ2Q7UUFFRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQVU7UUFDdEIsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJLElBQWEsQ0FBQztRQUVsQixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEc7YUFBTTtZQUNMLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQztTQUNoQztRQUVELElBQUksSUFBSSxFQUFFO1lBQ1IsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN2RDtJQUNILENBQUM7Q0FDRixDQUFBO0FBcERtQjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzs7MENBR2hCO0FBRVE7SUFBUixLQUFLLEVBQUU7O21EQUE0QjtBQUUxQjtJQUFULE1BQU0sRUFBRTs7OENBQW9DO0FBQ25DO0lBQVQsTUFBTSxFQUFFOzttREFBeUM7QUFFUjtJQUF6QyxLQUFLLENBQUMsaUJBQWlCLENBQUMsRUFBRSxZQUFZLEVBQUU7OzJDQUFvQjtBQWZsRCxPQUFPO0lBSG5CLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxXQUFXO0tBQ3RCLENBQUM7R0FDVyxPQUFPLENBeURuQjtTQXpEWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vdXRpbC9jb252ZXJ0JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25nbFBpY2tdJyxcbn0pXG5leHBvcnQgY2xhc3MgTmdsUGljayBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXG4gIHNlbGVjdGVkOiBhbnk7XG4gIHZhbHVlcyA9IG5ldyBCZWhhdmlvclN1YmplY3QobnVsbCk7XG5cbiAgQElucHV0KCduZ2xQaWNrJykgc2V0IHNldFNlbGVjdGVkKHNlbGVjdGVkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgdGhpcy5uZ0FmdGVyQ29udGVudEluaXQoKTtcbiAgfVxuXG4gIEBJbnB1dCgpIG5nbFBpY2tBY3RpdmVDbGFzczogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKSBuZ2xQaWNrQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbmdsT3B0aW9uRGVzdHJveWVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBJbnB1dCgnbmdsUGlja011bHRpcGxlJykgQElucHV0Qm9vbGVhbigpIGlzTXVsdGlwbGUgPSBmYWxzZTtcblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy52YWx1ZXMubmV4dCh0aGlzLnNlbGVjdGVkKTtcbiAgfVxuXG4gIHNlbGVjdE9wdGlvbih2YWx1ZTogYW55KSB7XG4gICAgbGV0IG5leHQ6IGFueTtcbiAgICBpZiAodGhpcy5pc011bHRpcGxlKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnNlbGVjdGVkKSkge1xuICAgICAgICAvLyBSZW1vdmUgaWYgYWxyZWFkeSB0aGVyZSBvciBhZGQgdG8gc2VsZWN0aW9uXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zZWxlY3RlZC5pbmRleE9mKHZhbHVlKTtcbiAgICAgICAgbmV4dCA9IGluZGV4ID4gLTFcbiAgICAgICAgICAgICAgICA/IFsuLi50aGlzLnNlbGVjdGVkLnNsaWNlKDAsIGluZGV4KSwgLi4udGhpcy5zZWxlY3RlZC5zbGljZShpbmRleCArIDEpXVxuICAgICAgICAgICAgICAgIDogWy4uLnRoaXMuc2VsZWN0ZWQsIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnNlbGVjdGVkLCB7W3ZhbHVlXTogIXRoaXMuc2VsZWN0ZWRbdmFsdWVdfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLm5nbFBpY2tDaGFuZ2UuZW1pdChuZXh0KTtcbiAgfVxuXG4gIG9wdGlvblJlbW92ZWQodmFsdWU6IGFueSkge1xuICAgIGlmICh0aGlzLmlzTXVsdGlwbGUgJiYgIXRoaXMuc2VsZWN0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZW1pdDogYm9vbGVhbjtcblxuICAgIGlmICh0aGlzLmlzTXVsdGlwbGUpIHtcbiAgICAgIGVtaXQgPSBBcnJheS5pc0FycmF5KHRoaXMuc2VsZWN0ZWQpID8gdGhpcy5zZWxlY3RlZC5pbmRleE9mKHZhbHVlKSA+IC0xIDogISF0aGlzLnNlbGVjdGVkW3ZhbHVlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdCA9IHRoaXMuc2VsZWN0ZWQgPT09IHZhbHVlO1xuICAgIH1cblxuICAgIGlmIChlbWl0KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMubmdsT3B0aW9uRGVzdHJveWVkLmVtaXQodmFsdWUpKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==