import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, Input, Output, EventEmitter, HostListener, ViewChildren, QueryList, OnChanges } from '@angular/core';
import { LEFT_ARROW, DOWN_ARROW, UP_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { trapEvent } from '../../util/util';
import { NglColorpickerSwatchTrigger } from './trigger';
let NglColorpickerSwatches = class NglColorpickerSwatches {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.hexChange = new EventEmitter();
        this.swatchColors = [];
        this.renderer.addClass(this.el.nativeElement, 'slds-color-picker__swatches');
    }
    ngOnChanges() {
        this.activeIndex = Math.max(this.swatchColors.indexOf(this.hex), 0);
    }
    onSelectViaInteraction(evt) {
        let direction = 0;
        switch (evt.keyCode) {
            case LEFT_ARROW:
            case UP_ARROW:
                direction = -1;
                break;
            case RIGHT_ARROW:
            case DOWN_ARROW:
                direction = 1;
                break;
            default:
                return;
        }
        trapEvent(evt);
        const activeIndex = this.swatchColors.indexOf(this.hex);
        const index = (this.triggers.length + activeIndex + direction) % this.triggers.length;
        const trigger = this.triggers.toArray()[index];
        trigger.focus();
    }
    isSelected(hex) {
        return hex === this.hex;
    }
    onSelect(hex) {
        this.hexChange.emit(hex);
    }
};
NglColorpickerSwatches.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], NglColorpickerSwatches.prototype, "hex", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglColorpickerSwatches.prototype, "hexChange", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NglColorpickerSwatches.prototype, "swatchColors", void 0);
__decorate([
    ViewChildren(NglColorpickerSwatchTrigger),
    __metadata("design:type", QueryList)
], NglColorpickerSwatches.prototype, "triggers", void 0);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], NglColorpickerSwatches.prototype, "onSelectViaInteraction", null);
NglColorpickerSwatches = __decorate([
    Component({
        selector: 'ngl-colorpicker-swatches',
        template: "\n<li class=\"slds-color-picker__swatch\" *ngFor=\"let color of swatchColors; let i = index\" role=\"presentation\"><a nglColorpickerSwatchTrigger href=\"javascript:void(0);\" [selected]=\"isSelected(color)\" [attr.tabindex]=\"activeIndex === i ? 0 : -1\" (selectedChange)=\"onSelect(color)\"><span nglColorpickerSwatch [color]=\"color\"></span></a></li>",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [`
    .ngl-color-picker__swatch-selected {
      box-shadow: rgb(117, 112, 112) 1px 1px 1px;
  `]
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], NglColorpickerSwatches);
export { NglColorpickerSwatches };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JwaWNrZXItc3dhdGNoZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvY29sb3JwaWNrZXIvc3dhdGNoZXMvY29sb3JwaWNrZXItc3dhdGNoZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFDN0YsWUFBWSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBV3hELElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBWWpDLFlBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVJyRCxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUV4QyxpQkFBWSxHQUFhLEVBQUUsQ0FBQztRQU9uQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBR0Qsc0JBQXNCLENBQUMsR0FBa0I7UUFDdkMsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLFFBQVEsR0FBRyxDQUFDLE9BQU8sRUFBRTtZQUNuQixLQUFLLFVBQVUsQ0FBQztZQUNoQixLQUFLLFFBQVE7Z0JBQ1gsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNmLE1BQU07WUFDUixLQUFLLFdBQVcsQ0FBQztZQUNqQixLQUFLLFVBQVU7Z0JBQ2IsU0FBUyxHQUFHLENBQUMsQ0FBQztnQkFDZCxNQUFNO1lBQ1I7Z0JBQ0UsT0FBTztTQUNWO1FBRUQsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWYsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXhELE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsV0FBVyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ3RGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBVztRQUNwQixPQUFPLEdBQUcsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQzFCLENBQUM7SUFFRCxRQUFRLENBQUMsR0FBVztRQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0YsQ0FBQTs7WUF4Q3lCLFVBQVU7WUFBb0IsU0FBUzs7QUFWdEQ7SUFBUixLQUFLLEVBQUU7O21EQUFzQjtBQUVwQjtJQUFULE1BQU0sRUFBRTs7eURBQXdDO0FBRXhDO0lBQVIsS0FBSyxFQUFFOzs0REFBNkI7QUFFTTtJQUExQyxZQUFZLENBQUMsMkJBQTJCLENBQUM7OEJBQW9CLFNBQVM7d0RBQThCO0FBYXJHO0lBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztxQ0FDUixhQUFhOztvRUFzQnhDO0FBM0NVLHNCQUFzQjtJQVRsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsMEJBQTBCO1FBQ3BDLDhXQUEwQztRQUMxQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDdEM7OztHQUdSO0tBQ0YsQ0FBQztxQ0Fhd0IsVUFBVSxFQUFvQixTQUFTO0dBWnBELHNCQUFzQixDQW9EbEM7U0FwRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lciwgVmlld0NoaWxkcmVuLCBRdWVyeUxpc3QsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTEVGVF9BUlJPVywgRE9XTl9BUlJPVywgVVBfQVJST1csIFJJR0hUX0FSUk9XIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7IHRyYXBFdmVudCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBOZ2xDb2xvcnBpY2tlclN3YXRjaFRyaWdnZXIgfSBmcm9tICcuL3RyaWdnZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtY29sb3JwaWNrZXItc3dhdGNoZXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vY29sb3JwaWNrZXItc3dhdGNoZXMuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZXM6IFtgXG4gICAgLm5nbC1jb2xvci1waWNrZXJfX3N3YXRjaC1zZWxlY3RlZCB7XG4gICAgICBib3gtc2hhZG93OiByZ2IoMTE3LCAxMTIsIDExMikgMXB4IDFweCAxcHg7XG4gIGBdXG59KVxuZXhwb3J0IGNsYXNzIE5nbENvbG9ycGlja2VyU3dhdGNoZXMgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIHJlYWRvbmx5IGhleDogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKSBoZXhDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBASW5wdXQoKSBzd2F0Y2hDb2xvcnM6IHN0cmluZ1tdID0gW107XG5cbiAgQFZpZXdDaGlsZHJlbihOZ2xDb2xvcnBpY2tlclN3YXRjaFRyaWdnZXIpIHJlYWRvbmx5IHRyaWdnZXJzOiBRdWVyeUxpc3Q8TmdsQ29sb3JwaWNrZXJTd2F0Y2hUcmlnZ2VyPjtcblxuICBhY3RpdmVJbmRleDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnc2xkcy1jb2xvci1waWNrZXJfX3N3YXRjaGVzJyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLmFjdGl2ZUluZGV4ID0gTWF0aC5tYXgodGhpcy5zd2F0Y2hDb2xvcnMuaW5kZXhPZih0aGlzLmhleCksIDApO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIG9uU2VsZWN0VmlhSW50ZXJhY3Rpb24oZXZ0OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgbGV0IGRpcmVjdGlvbiA9IDA7XG4gICAgc3dpdGNoIChldnQua2V5Q29kZSkge1xuICAgICAgY2FzZSBMRUZUX0FSUk9XOlxuICAgICAgY2FzZSBVUF9BUlJPVzpcbiAgICAgICAgZGlyZWN0aW9uID0gLTE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBSSUdIVF9BUlJPVzpcbiAgICAgIGNhc2UgRE9XTl9BUlJPVzpcbiAgICAgICAgZGlyZWN0aW9uID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJhcEV2ZW50KGV2dCk7XG5cbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMuc3dhdGNoQ29sb3JzLmluZGV4T2YodGhpcy5oZXgpO1xuXG4gICAgY29uc3QgaW5kZXggPSAodGhpcy50cmlnZ2Vycy5sZW5ndGggKyBhY3RpdmVJbmRleCArIGRpcmVjdGlvbikgJSB0aGlzLnRyaWdnZXJzLmxlbmd0aDtcbiAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy50cmlnZ2Vycy50b0FycmF5KClbaW5kZXhdO1xuICAgIHRyaWdnZXIuZm9jdXMoKTtcbiAgfVxuXG4gIGlzU2VsZWN0ZWQoaGV4OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gaGV4ID09PSB0aGlzLmhleDtcbiAgfVxuXG4gIG9uU2VsZWN0KGhleDogc3RyaW5nKSB7XG4gICAgdGhpcy5oZXhDaGFuZ2UuZW1pdChoZXgpO1xuICB9XG59XG4iXX0=