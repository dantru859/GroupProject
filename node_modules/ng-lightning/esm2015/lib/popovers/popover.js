import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, TemplateRef, ElementRef, Renderer2, HostBinding, OnInit, OnDestroy } from '@angular/core';
import { uniqueId, ngClassCombine } from '../util/util';
import { POSITION_MAP, getPlacementStyles } from '../util/overlay-position';
import { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';
import { HostService } from '../common/host/host.service';
import { isTemplateRef } from '../util/check';
import { OnChange } from '../util/property-watch-decorator';
let NglPopover = class NglPopover {
    constructor(hostService, element, renderer, focusTrapFactory, cd) {
        this.hostService = hostService;
        this.element = element;
        this.renderer = renderer;
        this.focusTrapFactory = focusTrapFactory;
        this.cd = cd;
        this.close = new EventEmitter();
        this.isTemplateRef = isTemplateRef;
        this.uid = uniqueId('popover');
    }
    get labelledby() {
        return this.header ? `${this.uid}-heading` : null;
    }
    get describedby() {
        return this.template ? this.uid : null;
    }
    ngOnInit() {
        this.focusTrap = this.focusTrapFactory.create(this.element.nativeElement);
        this.focusTrap.focusInitialElementWhenReady();
    }
    ngOnDestroy() {
        if (this.focusTrap) {
            this.focusTrap.destroy();
            this.focusTrap = null;
        }
    }
    nglOnPropertyChange(prop) {
        if (prop === 'size' || prop === 'popoverClass') {
            this.setHostClass();
        }
        else if (prop === 'placement') {
            this.nubbin = POSITION_MAP[this.placement].nubbin;
            this.setHostClass();
        }
        else if (prop === 'variant') {
            this.inverseCloseButton = ['walkthrough', 'feature', 'error'].indexOf(this.variant) > -1;
            this.setHostClass();
        }
    }
    markForCheck() {
        this.cd.markForCheck();
    }
    onClose() {
        this.close.emit();
    }
    setHostClass() {
        this.hostService.updateClass(this.element, ngClassCombine(this.popoverClass, {
            [`slds-nubbin_${this.nubbin}`]: true,
            [`slds-popover_${this.size}`]: !!this.size,
            [`slds-popover_walkthrough`]: this.variant === 'feature',
            [`slds-popover_${this.variant}`]: !!this.variant,
        }));
        this.hostService.updateStyle(this.element, getPlacementStyles(this.nubbin));
    }
};
NglPopover.ctorParameters = () => [
    { type: HostService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: FocusTrapFactory },
    { type: ChangeDetectorRef }
];
__decorate([
    OnChange(),
    __metadata("design:type", Object)
], NglPopover.prototype, "popoverClass", void 0);
__decorate([
    OnChange(),
    __metadata("design:type", String)
], NglPopover.prototype, "size", void 0);
__decorate([
    OnChange(),
    __metadata("design:type", String)
], NglPopover.prototype, "variant", void 0);
__decorate([
    OnChange(),
    __metadata("design:type", String)
], NglPopover.prototype, "placement", void 0);
__decorate([
    HostBinding('attr.aria-labelledby'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglPopover.prototype, "labelledby", null);
__decorate([
    HostBinding('attr.aria-describedby'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglPopover.prototype, "describedby", null);
NglPopover = __decorate([
    Component({
        // tslint:disable-next-line:component-selector
        selector: 'section[ngl-popover]',
        template: "\n<button class=\"slds-button slds-button_icon slds-button_icon-small slds-float_right slds-popover__close\" *ngIf=\"canClose &amp;&amp; closeVisible\" [title]=\"closeTitle\" [class.slds-button_icon-inverse]=\"inverseCloseButton\" (click)=\"onClose()\">\n  <svg class=\"slds-button__icon\" nglIconName=\"close\"></svg><span class=\"slds-assistive-text\" *ngIf=\"closeTitle\">{{closeTitle}}</span>\n</button>\n<header class=\"slds-popover__header\" *ngIf=\"header\">\n  <div *ngIf=\"isTemplateRef(header); else defaultTpl\" [id]=\"labelledby\">\n    <ng-container [ngTemplateOutlet]=\"header\"></ng-container>\n  </div>\n  <ng-template #defaultTpl>\n    <h2 class=\"slds-text-heading_small\" [id]=\"labelledby\">{{header}}</h2>\n  </ng-template>\n</header>\n<div class=\"slds-popover__body\" [id]=\"uid\" [nglInternalOutlet]=\"template\"></div>\n<footer class=\"slds-popover__footer\" *ngIf=\"footer\" [nglInternalOutlet]=\"footer\"></footer>",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [HostService],
        host: {
            'role': 'dialog',
            '[class.slds-popover]': 'true',
        }
    }),
    __metadata("design:paramtypes", [HostService,
        ElementRef,
        Renderer2,
        FocusTrapFactory,
        ChangeDetectorRef])
], NglPopover);
export { NglPopover };
//# sourceMappingURL=data:application/json;base64,