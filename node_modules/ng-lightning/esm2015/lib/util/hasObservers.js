import { EventEmitter } from '@angular/core';
export function hasObservers(output) {
    function propDecorator(target, propName) {
        const privatePropName = `$$__${propName}`;
        if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
            console.warn(`[ng-lightning]: The prop "${privatePropName}" already exists, it will be overridden by ${propName} decorator.`);
        }
        Object.defineProperty(target, privatePropName, {
            configurable: true,
            writable: true
        });
        Object.defineProperty(target, propName, {
            get() {
                if (!(this[output] instanceof EventEmitter)) {
                    throw Error(`[ng-lightning] ${target.constructor.name}: "${output}" is not an EventEmitter`);
                }
                return this[output].observers.length > 0;
            },
            set() {
                console.warn(`[ng-lightning] ${target.constructor.name}: "${propName}" is readonly and cannot be assigned a value`);
            }
        });
    }
    return propDecorator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzT2JzZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL3V0aWwvaGFzT2JzZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0MsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFjO0lBRXpDLFNBQVMsYUFBYSxDQUFDLE1BQVcsRUFBRSxRQUFnQjtRQUNsRCxNQUFNLGVBQWUsR0FBRyxPQUFPLFFBQVEsRUFBRSxDQUFDO1FBRTFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsRUFBRTtZQUNqRSxPQUFPLENBQUMsSUFBSSxDQUFDLDZCQUE2QixlQUFlLDhDQUE4QyxRQUFRLGFBQWEsQ0FBQyxDQUFDO1NBQy9IO1FBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsZUFBZSxFQUFFO1lBQzdDLFlBQVksRUFBRSxJQUFJO1lBQ2xCLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO1lBQ3RDLEdBQUc7Z0JBQ0QsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLFlBQVksQ0FBQyxFQUFFO29CQUMzQyxNQUFNLEtBQUssQ0FBQyxrQkFBa0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLE1BQU0sTUFBTSwwQkFBMEIsQ0FBQyxDQUFDO2lCQUM5RjtnQkFDRCxPQUEyQixJQUFJLENBQUMsTUFBTSxDQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDaEUsQ0FBQztZQUNELEdBQUc7Z0JBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLE1BQU0sUUFBUSw4Q0FBOEMsQ0FBQyxDQUFDO1lBQ3RILENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzT2JzZXJ2ZXJzKG91dHB1dDogc3RyaW5nKSB7XG5cbiAgZnVuY3Rpb24gcHJvcERlY29yYXRvcih0YXJnZXQ6IGFueSwgcHJvcE5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHByaXZhdGVQcm9wTmFtZSA9IGAkJF9fJHtwcm9wTmFtZX1gO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByaXZhdGVQcm9wTmFtZSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgW25nLWxpZ2h0bmluZ106IFRoZSBwcm9wIFwiJHtwcml2YXRlUHJvcE5hbWV9XCIgYWxyZWFkeSBleGlzdHMsIGl0IHdpbGwgYmUgb3ZlcnJpZGRlbiBieSAke3Byb3BOYW1lfSBkZWNvcmF0b3IuYCk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJpdmF0ZVByb3BOYW1lLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcE5hbWUsIHtcbiAgICAgIGdldCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCEodGhpc1tvdXRwdXRdIGluc3RhbmNlb2YgRXZlbnRFbWl0dGVyKSkge1xuICAgICAgICAgIHRocm93IEVycm9yKGBbbmctbGlnaHRuaW5nXSAke3RhcmdldC5jb25zdHJ1Y3Rvci5uYW1lfTogXCIke291dHB1dH1cIiBpcyBub3QgYW4gRXZlbnRFbWl0dGVyYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICg8RXZlbnRFbWl0dGVyPGFueT4+dGhpc1tvdXRwdXRdKS5vYnNlcnZlcnMubGVuZ3RoID4gMDtcbiAgICAgIH0sXG4gICAgICBzZXQoKTogdm9pZCB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW25nLWxpZ2h0bmluZ10gJHt0YXJnZXQuY29uc3RydWN0b3IubmFtZX06IFwiJHtwcm9wTmFtZX1cIiBpcyByZWFkb25seSBhbmQgY2Fubm90IGJlIGFzc2lnbmVkIGEgdmFsdWVgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwcm9wRGVjb3JhdG9yO1xufVxuIl19