export function OnChange(callback = 'nglOnPropertyChange') {
    const cachedValueKey = Symbol();
    const isFirstChangeKey = Symbol();
    return (target, key) => {
        Object.defineProperty(target, key, {
            set: function (value) {
                // change status of "isFirstChange"
                if (this[isFirstChangeKey] === undefined) {
                    this[isFirstChangeKey] = true;
                }
                else {
                    this[isFirstChangeKey] = false;
                }
                // No operation if new value is same as old value
                if (!this[isFirstChangeKey] && this[cachedValueKey] === value) {
                    return;
                }
                const oldValue = this[cachedValueKey];
                this[cachedValueKey] = value;
                const simpleChange = {
                    firstChange: this[isFirstChangeKey],
                    previousValue: oldValue,
                    currentValue: this[cachedValueKey],
                    isFirstChange: () => this[isFirstChangeKey],
                };
                this[callback](key, this[cachedValueKey], simpleChange);
            },
            get: function () {
                return this[cachedValueKey];
            },
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktd2F0Y2gtZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL3V0aWwvcHJvcGVydHktd2F0Y2gtZGVjb3JhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE1BQU0sVUFBVSxRQUFRLENBQVUsUUFBUSxHQUFHLHFCQUFxQjtJQUNoRSxNQUFNLGNBQWMsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sRUFBRSxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxNQUFXLEVBQUUsR0FBZ0IsRUFBRSxFQUFFO1FBQ3ZDLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUNqQyxHQUFHLEVBQUUsVUFBVSxLQUFLO2dCQUNsQixtQ0FBbUM7Z0JBQ25DLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssU0FBUyxFQUFFO29CQUN4QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLENBQUM7aUJBQy9CO3FCQUFNO29CQUNMLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEtBQUssQ0FBQztpQkFDaEM7Z0JBQ0QsaURBQWlEO2dCQUNqRCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEtBQUssRUFBRTtvQkFDN0QsT0FBTztpQkFDUjtnQkFDRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQzdCLE1BQU0sWUFBWSxHQUFvQjtvQkFDcEMsV0FBVyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDbkMsYUFBYSxFQUFFLFFBQVE7b0JBQ3ZCLFlBQVksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDO29CQUNsQyxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2lCQUM1QyxDQUFDO2dCQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQzFELENBQUM7WUFDRCxHQUFHLEVBQUU7Z0JBQ0gsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDOUIsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFNpbXBsZUNoYW5nZTxUPiB7XG4gIGZpcnN0Q2hhbmdlOiBib29sZWFuO1xuICBwcmV2aW91c1ZhbHVlOiBUO1xuICBjdXJyZW50VmFsdWU6IFQ7XG4gIGlzRmlyc3RDaGFuZ2U6ICgpID0+IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBPbkNoYW5nZTxUID0gYW55PihjYWxsYmFjayA9ICduZ2xPblByb3BlcnR5Q2hhbmdlJykge1xuICBjb25zdCBjYWNoZWRWYWx1ZUtleSA9IFN5bWJvbCgpO1xuICBjb25zdCBpc0ZpcnN0Q2hhbmdlS2V5ID0gU3ltYm9sKCk7XG4gIHJldHVybiAodGFyZ2V0OiBhbnksIGtleTogUHJvcGVydHlLZXkpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIGNoYW5nZSBzdGF0dXMgb2YgXCJpc0ZpcnN0Q2hhbmdlXCJcbiAgICAgICAgaWYgKHRoaXNbaXNGaXJzdENoYW5nZUtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXNbaXNGaXJzdENoYW5nZUtleV0gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXNbaXNGaXJzdENoYW5nZUtleV0gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBObyBvcGVyYXRpb24gaWYgbmV3IHZhbHVlIGlzIHNhbWUgYXMgb2xkIHZhbHVlXG4gICAgICAgIGlmICghdGhpc1tpc0ZpcnN0Q2hhbmdlS2V5XSAmJiB0aGlzW2NhY2hlZFZhbHVlS2V5XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzW2NhY2hlZFZhbHVlS2V5XTtcbiAgICAgICAgdGhpc1tjYWNoZWRWYWx1ZUtleV0gPSB2YWx1ZTtcbiAgICAgICAgY29uc3Qgc2ltcGxlQ2hhbmdlOiBTaW1wbGVDaGFuZ2U8VD4gPSB7XG4gICAgICAgICAgZmlyc3RDaGFuZ2U6IHRoaXNbaXNGaXJzdENoYW5nZUtleV0sXG4gICAgICAgICAgcHJldmlvdXNWYWx1ZTogb2xkVmFsdWUsXG4gICAgICAgICAgY3VycmVudFZhbHVlOiB0aGlzW2NhY2hlZFZhbHVlS2V5XSxcbiAgICAgICAgICBpc0ZpcnN0Q2hhbmdlOiAoKSA9PiB0aGlzW2lzRmlyc3RDaGFuZ2VLZXldLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzW2NhbGxiYWNrXShrZXksIHRoaXNbY2FjaGVkVmFsdWVLZXldLCBzaW1wbGVDaGFuZ2UpO1xuICAgICAgfSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpc1tjYWNoZWRWYWx1ZUtleV07XG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xufVxuIl19