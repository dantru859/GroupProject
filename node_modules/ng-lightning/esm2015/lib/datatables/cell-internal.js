import { __decorate, __metadata } from "tslib";
import { Component, ChangeDetectionStrategy, Input, HostBinding } from '@angular/core';
import { NglDatatableColumn } from './column';
let NglInternalDatatableCell = class NglInternalDatatableCell {
    get dataLabel() {
        return this.column.heading;
    }
    ngOnChanges() {
        this.context = {
            $implicit: this.value,
            row: this.row,
            index: this.index,
        };
    }
    get value() {
        const { key } = this.column;
        return key ? this.row[key] : null;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglInternalDatatableCell.prototype, "row", void 0);
__decorate([
    Input(),
    __metadata("design:type", NglDatatableColumn)
], NglInternalDatatableCell.prototype, "column", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NglInternalDatatableCell.prototype, "index", void 0);
__decorate([
    HostBinding('attr.data-label'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglInternalDatatableCell.prototype, "dataLabel", null);
NglInternalDatatableCell = __decorate([
    Component({
        // tslint:disable-next-line:component-selector
        selector: 'td[nglDatatatableCell_]',
        template: "\n<div [class.slds-truncate]=\"column.truncate\" [attr.title]=\"column.truncate ? value : null\">\n  <ng-container *ngIf=\"column.cellTpl; else stringTpl\" [ngTemplateOutlet]=\"column.cellTpl.templateRef\" [ngTemplateOutletContext]=\"context\"></ng-container>\n  <ng-template #stringTpl>{{ value }}</ng-template>\n</div>",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], NglInternalDatatableCell);
export { NglInternalDatatableCell };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC1pbnRlcm5hbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhdGFibGVzL2NlbGwtaW50ZXJuYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFROUMsSUFBYSx3QkFBd0IsR0FBckMsTUFBYSx3QkFBd0I7SUFNbkMsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUM3QixDQUFDO0lBSUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEdBQUk7WUFDZCxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDckIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDNUIsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDO0NBQ0YsQ0FBQTtBQXZCVTtJQUFSLEtBQUssRUFBRTs7cURBQVU7QUFDVDtJQUFSLEtBQUssRUFBRTs4QkFBUyxrQkFBa0I7d0RBQUM7QUFDM0I7SUFBUixLQUFLLEVBQUU7O3VEQUFlO0FBR3ZCO0lBREMsV0FBVyxDQUFDLGlCQUFpQixDQUFDOzs7eURBRzlCO0FBUlUsd0JBQXdCO0lBTnBDLFNBQVMsQ0FBQztRQUNULDhDQUE4QztRQUM5QyxRQUFRLEVBQUUseUJBQXlCO1FBQ25DLDRVQUFtQztRQUNuQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDO0dBQ1csd0JBQXdCLENBd0JwQztTQXhCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBJbnB1dCwgSG9zdEJpbmRpbmcsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdsRGF0YXRhYmxlQ29sdW1uIH0gZnJvbSAnLi9jb2x1bW4nO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3RkW25nbERhdGF0YXRhYmxlQ2VsbF9dJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NlbGwtaW50ZXJuYWwuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xJbnRlcm5hbERhdGF0YWJsZUNlbGwgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSByb3c6IGFueTtcbiAgQElucHV0KCkgY29sdW1uOiBOZ2xEYXRhdGFibGVDb2x1bW47XG4gIEBJbnB1dCgpIGluZGV4OiBudW1iZXI7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtbGFiZWwnKVxuICBnZXQgZGF0YUxhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbi5oZWFkaW5nO1xuICB9XG5cbiAgY29udGV4dDogYW55O1xuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuY29udGV4dCA9ICB7XG4gICAgICAkaW1wbGljaXQ6IHRoaXMudmFsdWUsXG4gICAgICByb3c6IHRoaXMucm93LFxuICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgfTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICBjb25zdCB7IGtleSB9ID0gdGhpcy5jb2x1bW47XG4gICAgcmV0dXJuIGtleSA/IHRoaXMucm93WyBrZXkgXSA6IG51bGw7XG4gIH1cbn1cbiJdfQ==