import { __decorate, __metadata } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener, ElementRef, OnInit, OnDestroy, ContentChildren, QueryList, Renderer2 } from '@angular/core';
import { toBoolean, InputBoolean } from '../util/convert';
import { NglDropdownItem } from './dropdown-item';
const openEventEmitter = new EventEmitter();
let NglDropdown = class NglDropdown {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.handlePageEvents = true;
        this.isOpenChange = new EventEmitter();
        this.triggerFocusEventEmitter = new EventEmitter();
        this._isOpen = false;
        this.globalClickEventUnsubscriber = null;
        this.clickEventUnsubscriber = null;
    }
    set isOpen(isOpen) {
        this._isOpen = toBoolean(isOpen);
        if (this.isOpen) {
            this.clearGlobalClickTimeout();
            this.globalClickTimeout = setTimeout(() => {
                if (this.handlePageEvents) {
                    this._subscribeToClickEvents();
                }
            });
            this.renderer.addClass(this.element.nativeElement, 'slds-is-open');
        }
        else {
            this._unsubscribeFromClickEvents();
            this.renderer.removeClass(this.element.nativeElement, 'slds-is-open');
        }
        this.renderer.setAttribute(this.element.nativeElement, 'aria-expanded', `${this.isOpen}`);
    }
    get isOpen() {
        return this._isOpen;
    }
    onKeydownClose(eventName) {
        this.toggle(false);
        if (eventName === 'esc') {
            this.triggerFocusEventEmitter.emit(null);
        }
    }
    onKeydownFocusNext($event, direction) {
        $event.preventDefault();
        this.focusItem(direction);
    }
    ngOnInit() {
        this.openEventSubscription = openEventEmitter.subscribe(this.handleDropdownOpenEvent.bind(this));
    }
    ngOnDestroy() {
        this.clearGlobalClickTimeout();
        if (this.openEventSubscription) {
            this.openEventSubscription.unsubscribe();
        }
        this._unsubscribeFromClickEvents();
    }
    toggle(toggle = !this.isOpen, focus = false) {
        if (toggle === this.isOpen) {
            return;
        }
        this.isOpenChange.emit(toggle);
        if (toggle) {
            openEventEmitter.emit(this);
            if (focus) {
                this.focusItem('next');
            }
        }
    }
    handleGlobalClickEvent($event) {
        if (!this.handlePageEvents || $event.$nglStop) {
            return;
        }
        this.toggle(false);
    }
    _subscribeToClickEvents() {
        this._unsubscribeFromClickEvents();
        // Prevent document listener to close it, since click happened inside
        this.clickEventUnsubscriber = this.renderer.listen(this.element.nativeElement, 'click', ($event) => $event.$nglStop = true);
        this.globalClickEventUnsubscriber = this.renderer.listen('document', 'click', this.handleGlobalClickEvent.bind(this));
    }
    _unsubscribeFromClickEvents() {
        if (this.clickEventUnsubscriber) {
            this.clickEventUnsubscriber();
            this.clickEventUnsubscriber = null;
        }
        if (this.globalClickEventUnsubscriber) {
            this.globalClickEventUnsubscriber();
            this.globalClickEventUnsubscriber = null;
        }
    }
    clearGlobalClickTimeout() {
        clearTimeout(this.globalClickTimeout);
    }
    focusItem(direction) {
        if (!this.items.length) {
            return;
        }
        const items = this.items.toArray();
        const activeElementIndex = items.findIndex(item => item.hasFocus()) + (direction === 'next' ? 1 : -1);
        if (activeElementIndex === items.length || activeElementIndex < 0) {
            return;
        }
        items[activeElementIndex].focus();
    }
    handleDropdownOpenEvent(dropdown) {
        if (dropdown !== this) {
            this.toggle(false);
        }
    }
};
NglDropdown.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input('open'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], NglDropdown.prototype, "isOpen", null);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglDropdown.prototype, "handlePageEvents", void 0);
__decorate([
    ContentChildren(NglDropdownItem, { descendants: true }),
    __metadata("design:type", QueryList)
], NglDropdown.prototype, "items", void 0);
__decorate([
    Output('openChange'),
    __metadata("design:type", Object)
], NglDropdown.prototype, "isOpenChange", void 0);
__decorate([
    HostListener('keydown.esc', ['"esc"']),
    HostListener('keydown.tab', ['"tab"']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], NglDropdown.prototype, "onKeydownClose", null);
__decorate([
    HostListener('keydown.arrowdown', ['$event', '"next"']),
    HostListener('keydown.arrowup', ['$event', '"previous"']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event, String]),
    __metadata("design:returntype", void 0)
], NglDropdown.prototype, "onKeydownFocusNext", null);
NglDropdown = __decorate([
    Directive({
        selector: '[nglDropdown]',
        host: {
            '[class.slds-dropdown-trigger]': 'true',
            '[class.slds-dropdown-trigger_click]': 'true',
        },
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], NglDropdown);
export { NglDropdown };
//# sourceMappingURL=data:application/json;base64,