import { __decorate, __metadata, __param } from "tslib";
import { Component, Input, Output, ElementRef, EventEmitter, HostListener, ContentChild, ChangeDetectionStrategy, Inject, OnChanges, SimpleChanges, AfterContentInit, OnDestroy } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';
import { BlockScrollStrategy, Overlay, OverlayRef } from '@angular/cdk/overlay';
import { uniqueId } from '../util/util';
import { InputBoolean } from '../util/convert';
import { NglModalHeaderTemplate, NglModalTaglineTemplate, NglModalFooterTemplate } from './templates';
import { hasObservers } from '../util/hasObservers';
let NglModal = class NglModal {
    constructor(focusTrapFactory, document, overlay, element) {
        this.focusTrapFactory = focusTrapFactory;
        this.document = document;
        this.overlay = overlay;
        this.element = element;
        this.header = '';
        this.directional = false;
        this.headingId = uniqueId('modal-heading');
        this.contentId = uniqueId('modal-content');
        this.open = true;
        this.closeButtonAssistiveText = 'Close';
        this.openChange = new EventEmitter();
        this.dismissOnClickOutside = true;
        /** Element that was focused before the dialog was opened. Save this to restore upon close. */
        this.elementFocusedBeforeDialogWasOpened = null;
        this.scrollStrategy = this.overlay.scrollStrategies.block();
    }
    get hasHeader() {
        return this.header || this.headerTpl;
    }
    close(evt) {
        if (evt) {
            evt.stopPropagation();
        }
        this.openChange.emit(false);
    }
    ngOnChanges(changes) {
        if ('open' in changes) {
            this.handleOpen();
        }
    }
    ngAfterContentInit() {
        this.handleOpen();
    }
    clickOutside(evt) {
        if (!this.dismissOnClickOutside) {
            return;
        }
        const { classList } = evt.target;
        if (classList.contains('slds-modal') || classList.contains('slds-modal__container')) {
            this.close();
        }
    }
    ngOnDestroy() {
        this.handleOpen(false);
        this.scrollStrategy = null;
    }
    modalClass() {
        return {
            [`slds-modal_${this.size}`]: !!this.size,
            [`slds-fade-in-open`]: this.open,
            [`slds-modal_prompt`]: !!this.prompt,
        };
    }
    modalHeaderClass() {
        return {
            [`slds-modal__header_empty`]: !this.hasHeader,
            [`slds-theme_${this.prompt}`]: !!this.prompt,
        };
    }
    modalFooterClass() {
        return {
            [`slds-modal__footer_directional`]: !!this.directional,
            [`slds-theme_default`]: !!this.prompt,
        };
    }
    handleOpen(open = this.open) {
        if (open) {
            if (this.document) {
                this.elementFocusedBeforeDialogWasOpened = this.document.activeElement;
            }
            this.container = this.overlay.create();
            // Attach the dom to overlay, the view container is not changed
            this.container.overlayElement.appendChild(this.element.nativeElement);
            this.focusTrap = this.focusTrapFactory.create(this.element.nativeElement);
            this.focusTrap.focusInitialElementWhenReady();
            this.scrollStrategy.enable();
        }
        else {
            if (this.elementFocusedBeforeDialogWasOpened && typeof this.elementFocusedBeforeDialogWasOpened.focus === 'function') {
                this.elementFocusedBeforeDialogWasOpened.focus();
            }
            if (this.container) {
                this.container.dispose();
                this.container = null;
            }
            if (this.focusTrap) {
                this.focusTrap.destroy();
            }
            this.scrollStrategy.disable();
        }
    }
};
NglModal.ctorParameters = () => [
    { type: FocusTrapFactory },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Overlay },
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglModal.prototype, "header", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglModal.prototype, "size", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglModal.prototype, "directional", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglModal.prototype, "open", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglModal.prototype, "closeButtonAssistiveText", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglModal.prototype, "openChange", void 0);
__decorate([
    ContentChild(NglModalHeaderTemplate),
    __metadata("design:type", NglModalHeaderTemplate)
], NglModal.prototype, "headerTpl", void 0);
__decorate([
    ContentChild(NglModalTaglineTemplate),
    __metadata("design:type", NglModalTaglineTemplate)
], NglModal.prototype, "taglineTpl", void 0);
__decorate([
    ContentChild(NglModalFooterTemplate),
    __metadata("design:type", NglModalFooterTemplate)
], NglModal.prototype, "footer", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglModal.prototype, "dismissOnClickOutside", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglModal.prototype, "prompt", void 0);
__decorate([
    hasObservers('openChange'),
    __metadata("design:type", Boolean)
], NglModal.prototype, "showClose", void 0);
__decorate([
    HostListener('keydown.esc', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], NglModal.prototype, "close", null);
__decorate([
    HostListener('click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], NglModal.prototype, "clickOutside", null);
NglModal = __decorate([
    Component({
        selector: 'ngl-modal',
        template: "\n<section class=\"slds-modal\" [ngClass]=\"modalClass()\" [attr.aria-hidden]=\"!open\" [attr.aria-labelledby]=\"headingId\" [attr.aria-describedby]=\"contentId\" aria-modal=\"true\" [attr.role]=\"prompt ? 'alertdialog' : 'dialog'\" tabindex=\"-1\">\n  <div class=\"slds-modal__container\">\n    <header class=\"slds-modal__header\" [ngClass]=\"modalHeaderClass()\">\n      <button class=\"slds-button slds-button_icon slds-button_icon-inverse slds-modal__close\" *ngIf=\"showClose\" type=\"button\" (click)=\"close()\">\n        <svg class=\"slds-button__icon slds-button__icon_large\" nglIconName=\"utility:close\"></svg><span class=\"slds-assistive-text\" *ngIf=\"closeButtonAssistiveText\">{{closeButtonAssistiveText}}</span>\n      </button>\n      <ng-template #localHeader>\n        <h2 class=\"slds-text-heading_medium slds-hyphenate\" *ngIf=\"header\" [id]=\"headingId\">{{header}}</h2>\n      </ng-template>\n      <ng-template *ngIf=\"headerTpl; else localHeader\" [ngTemplateOutlet]=\"headerTpl.templateRef\" [ngTemplateOutletContext]=\"{id: headingId}\"></ng-template>\n      <p class=\"slds-m-top_x-small\" *ngIf=\"hasHeader &amp;&amp; taglineTpl\">\n        <ng-template [ngTemplateOutlet]=\"taglineTpl.templateRef\"></ng-template>\n      </p>\n    </header>\n    <div class=\"slds-modal__content\" [id]=\"contentId\" cdkScrollable>\n      <ng-content></ng-content>\n    </div>\n    <footer class=\"slds-modal__footer\" *ngIf=\"footer\" [ngClass]=\"modalFooterClass()\">\n      <ng-template [ngTemplateOutlet]=\"footer.templateRef\"></ng-template>\n    </footer>\n  </div>\n</section>\n<div class=\"slds-backdrop\" [class.slds-backdrop_open]=\"open\"></div>",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __param(1, Inject(DOCUMENT)),
    __metadata("design:paramtypes", [FocusTrapFactory, Object, Overlay,
        ElementRef])
], NglModal);
export { NglModal };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvbW9kYWxzL21vZGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUM5RSx1QkFBdUIsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSx1QkFBdUIsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN0RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFPcEQsSUFBYSxRQUFRLEdBQXJCLE1BQWEsUUFBUTtJQTJDbkIsWUFBb0IsZ0JBQWtDLEVBQ2hCLFFBQWEsRUFDL0IsT0FBZ0IsRUFDaEIsT0FBbUI7UUFIbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQy9CLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQTdDOUIsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUlJLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBRTdD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QUFFSjtJQUFyQyxZQUFZLENBQUMsc0JBQXNCLENBQUM7OEJBQVksc0JBQXNCOzJDQUFDO0FBRWpDO0lBQXRDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQzs4QkFBYSx1QkFBdUI7NENBQUM7QUFFckM7SUFBckMsWUFBWSxDQUFDLHNCQUFzQixDQUFDOzhCQUFTLHNCQUFzQjt3Q0FBQztBQUU1QztJQUF4QixLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUU7O3VEQUE4QjtBQUU3QztJQUFSLEtBQUssRUFBRTs7d0NBQXlFO0FBRXJEO0lBQTNCLFlBQVksQ0FBQyxZQUFZLENBQUM7OzJDQUFvQjtBQW9CL0M7SUFEQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3FDQUM1QixLQUFLOztxQ0FLaEI7QUFhRDtJQURDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs0Q0FVakM7QUE5RVUsUUFBUTtJQUxwQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsV0FBVztRQUNyQixvcERBQTJCO1FBQzNCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7SUE2Q2EsV0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7cUNBRFMsZ0JBQWdCLFVBRXpCLE9BQU87UUFDUCxVQUFVO0dBOUM1QixRQUFRLENBd0lwQjtTQXhJWSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgQ29udGVudENoaWxkLFxuICAgICAgICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEluamVjdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvY3VzVHJhcCwgRm9jdXNUcmFwRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IEJsb2NrU2Nyb2xsU3RyYXRlZ3ksIE92ZXJsYXksIE92ZXJsYXlSZWYgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyB1bmlxdWVJZCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgTmdsTW9kYWxIZWFkZXJUZW1wbGF0ZSwgTmdsTW9kYWxUYWdsaW5lVGVtcGxhdGUsIE5nbE1vZGFsRm9vdGVyVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlcyc7XG5pbXBvcnQgeyBoYXNPYnNlcnZlcnMgfSBmcm9tICcuLi91dGlsL2hhc09ic2VydmVycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC1tb2RhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9tb2RhbC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE5nbE1vZGFsIGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBoZWFkZXIgPSAnJztcblxuICBASW5wdXQoKSBzaXplOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIGRpcmVjdGlvbmFsID0gZmFsc2U7XG5cbiAgaGVhZGluZ0lkID0gdW5pcXVlSWQoJ21vZGFsLWhlYWRpbmcnKTtcblxuICBjb250ZW50SWQgPSB1bmlxdWVJZCgnbW9kYWwtY29udGVudCcpO1xuXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBvcGVuID0gdHJ1ZTtcblxuICBnZXQgaGFzSGVhZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmhlYWRlciB8fCB0aGlzLmhlYWRlclRwbDtcbiAgfVxuXG4gIEBJbnB1dCgpIGNsb3NlQnV0dG9uQXNzaXN0aXZlVGV4dCA9ICdDbG9zZSc7XG5cbiAgQE91dHB1dCgpIG9wZW5DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQENvbnRlbnRDaGlsZChOZ2xNb2RhbEhlYWRlclRlbXBsYXRlKSBoZWFkZXJUcGw6IE5nbE1vZGFsSGVhZGVyVGVtcGxhdGU7XG5cbiAgQENvbnRlbnRDaGlsZChOZ2xNb2RhbFRhZ2xpbmVUZW1wbGF0ZSkgdGFnbGluZVRwbDogTmdsTW9kYWxUYWdsaW5lVGVtcGxhdGU7XG5cbiAgQENvbnRlbnRDaGlsZChOZ2xNb2RhbEZvb3RlclRlbXBsYXRlKSBmb290ZXI6IE5nbE1vZGFsRm9vdGVyVGVtcGxhdGU7XG5cbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIGRpc21pc3NPbkNsaWNrT3V0c2lkZSA9IHRydWU7XG5cbiAgQElucHV0KCkgcHJvbXB0OiAnc3VjY2VzcycgfCAnd2FybmluZycgfCAnZXJyb3InIHwgJ3dyZW5jaCcgfCAnb2ZmbGluZScgfCAnaW5mbyc7XG5cbiAgQGhhc09ic2VydmVycygnb3BlbkNoYW5nZScpIHNob3dDbG9zZTogYm9vbGVhbjtcblxuICAvKiogVGhlIGNsYXNzIHRoYXQgdHJhcHMgYW5kIG1hbmFnZXMgZm9jdXMgd2l0aGluIHRoZSBkaWFsb2cuICovXG4gIHByaXZhdGUgZm9jdXNUcmFwOiBGb2N1c1RyYXA7XG5cbiAgcHJpdmF0ZSBjb250YWluZXI6IE92ZXJsYXlSZWY7XG5cbiAgLyoqIEVsZW1lbnQgdGhhdCB3YXMgZm9jdXNlZCBiZWZvcmUgdGhlIGRpYWxvZyB3YXMgb3BlbmVkLiBTYXZlIHRoaXMgdG8gcmVzdG9yZSB1cG9uIGNsb3NlLiAqL1xuICBwcml2YXRlIGVsZW1lbnRGb2N1c2VkQmVmb3JlRGlhbG9nV2FzT3BlbmVkOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIHByaXZhdGUgc2Nyb2xsU3RyYXRlZ3k6IEJsb2NrU2Nyb2xsU3RyYXRlZ3k7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmb2N1c1RyYXBGYWN0b3J5OiBGb2N1c1RyYXBGYWN0b3J5LFxuICAgICAgICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnksXG4gICAgICAgICAgICAgIHByaXZhdGUgb3ZlcmxheTogT3ZlcmxheSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gICAgdGhpcy5zY3JvbGxTdHJhdGVneSA9IHRoaXMub3ZlcmxheS5zY3JvbGxTdHJhdGVnaWVzLmJsb2NrKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVzYycsIFsnJGV2ZW50J10pXG4gIGNsb3NlKGV2dD86IEV2ZW50KSB7XG4gICAgaWYgKGV2dCkge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICB0aGlzLm9wZW5DaGFuZ2UuZW1pdChmYWxzZSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCdvcGVuJyBpbiBjaGFuZ2VzKSB7XG4gICAgICB0aGlzLmhhbmRsZU9wZW4oKTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5oYW5kbGVPcGVuKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXG4gIGNsaWNrT3V0c2lkZShldnQpIHtcbiAgICBpZiAoIXRoaXMuZGlzbWlzc09uQ2xpY2tPdXRzaWRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBjbGFzc0xpc3QgfSA9IGV2dC50YXJnZXQ7XG4gICAgaWYgKGNsYXNzTGlzdC5jb250YWlucygnc2xkcy1tb2RhbCcpIHx8IGNsYXNzTGlzdC5jb250YWlucygnc2xkcy1tb2RhbF9fY29udGFpbmVyJykpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmhhbmRsZU9wZW4oZmFsc2UpO1xuICAgIHRoaXMuc2Nyb2xsU3RyYXRlZ3kgPSBudWxsO1xuICB9XG5cbiAgbW9kYWxDbGFzcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BzbGRzLW1vZGFsXyR7dGhpcy5zaXplfWBdOiAhIXRoaXMuc2l6ZSxcbiAgICAgIFtgc2xkcy1mYWRlLWluLW9wZW5gXTogdGhpcy5vcGVuLFxuICAgICAgW2BzbGRzLW1vZGFsX3Byb21wdGBdOiAhIXRoaXMucHJvbXB0LFxuICAgIH07XG4gIH1cblxuICBtb2RhbEhlYWRlckNsYXNzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBbYHNsZHMtbW9kYWxfX2hlYWRlcl9lbXB0eWBdOiAhdGhpcy5oYXNIZWFkZXIsXG4gICAgICBbYHNsZHMtdGhlbWVfJHt0aGlzLnByb21wdH1gXTogISF0aGlzLnByb21wdCxcbiAgICB9O1xuICB9XG5cbiAgbW9kYWxGb290ZXJDbGFzcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BzbGRzLW1vZGFsX19mb290ZXJfZGlyZWN0aW9uYWxgXTogISF0aGlzLmRpcmVjdGlvbmFsLFxuICAgICAgW2BzbGRzLXRoZW1lX2RlZmF1bHRgXTogISF0aGlzLnByb21wdCxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVPcGVuKG9wZW4gPSB0aGlzLm9wZW4pIHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaWYgKHRoaXMuZG9jdW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50Rm9jdXNlZEJlZm9yZURpYWxvZ1dhc09wZW5lZCA9IHRoaXMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250YWluZXIgPSB0aGlzLm92ZXJsYXkuY3JlYXRlKCk7XG4gICAgICAvLyBBdHRhY2ggdGhlIGRvbSB0byBvdmVybGF5LCB0aGUgdmlldyBjb250YWluZXIgaXMgbm90IGNoYW5nZWRcbiAgICAgIHRoaXMuY29udGFpbmVyLm92ZXJsYXlFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgdGhpcy5mb2N1c1RyYXAgPSB0aGlzLmZvY3VzVHJhcEZhY3RvcnkuY3JlYXRlKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbiAgICAgIHRoaXMuZm9jdXNUcmFwLmZvY3VzSW5pdGlhbEVsZW1lbnRXaGVuUmVhZHkoKTtcbiAgICAgIHRoaXMuc2Nyb2xsU3RyYXRlZ3kuZW5hYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRGb2N1c2VkQmVmb3JlRGlhbG9nV2FzT3BlbmVkICYmIHR5cGVvZiB0aGlzLmVsZW1lbnRGb2N1c2VkQmVmb3JlRGlhbG9nV2FzT3BlbmVkLmZvY3VzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudEZvY3VzZWRCZWZvcmVEaWFsb2dXYXNPcGVuZWQuZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mb2N1c1RyYXApIHtcbiAgICAgICAgdGhpcy5mb2N1c1RyYXAuZGVzdHJveSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zY3JvbGxTdHJhdGVneS5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=