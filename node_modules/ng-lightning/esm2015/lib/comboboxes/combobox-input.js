import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Renderer2, HostListener, HostBinding } from '@angular/core';
import { uniqueId, trapEvent } from '../util/util';
import { DOWN_ARROW, ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { fromEvent } from 'rxjs';
import { buffer, debounceTime, map } from 'rxjs/operators';
import { NglComboboxService } from './combobox.service';
const MAX_INTERVAL_BETWEEN_KEYSTROKES = 300; // ms
let NglComboboxInput = class NglComboboxInput {
    constructor(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        const { nativeElement } = this.el;
        this.renderer.addClass(nativeElement, 'slds-input');
        this.renderer.addClass(nativeElement, 'slds-combobox__input');
        this.renderer.setAttribute(nativeElement, 'autoComplete', 'off');
        this.renderer.setAttribute(nativeElement, 'role', 'textbox');
        this.renderer.setAttribute(nativeElement, 'aria-controls', this.service.combobox.uid);
        if (!nativeElement.id) {
            this.renderer.setAttribute(nativeElement, 'id', uniqueId('combobox-input'));
        }
        const keyboardEvent$ = fromEvent(nativeElement, 'keypress').pipe(map((e) => e.keyCode));
        this.keyboardBuffer$ = keyboardEvent$.pipe(buffer(keyboardEvent$.pipe(debounceTime(MAX_INTERVAL_BETWEEN_KEYSTROKES))), map((keyCodes) => keyCodes.map((c) => String.fromCharCode(c)).join('')));
    }
    get isReadonly() {
        return this.service.combobox.variant === 'base' || this.service.combobox.hasLookupSingleSelection;
    }
    get ariaAutocomplete() {
        return this.service.combobox.isLookup ? 'list' : null;
    }
    get hasReadonlyValue() {
        return this.service.combobox.hasLookupSingleSelection;
    }
    get id() {
        return this.el.nativeElement.id;
    }
    setAriaActiveDescendant(uid) {
        if (uid) {
            this.renderer.setAttribute(this.el.nativeElement, 'aria-activedescendant', uid);
        }
        else {
            this.renderer.removeAttribute(this.el.nativeElement, 'aria-activedescendant');
        }
    }
    setValue(value) {
        this.renderer.setProperty(this.el.nativeElement, 'value', value !== null ? value : '');
    }
    focus() {
        this.el.nativeElement.focus();
    }
    onMouseInteraction() {
        if (this.service.combobox.hasLookupSingleSelection || (this.service.combobox.open && this.service.combobox.isLookup)) {
            return;
        }
        this.service.combobox.openChange.emit(!this.service.combobox.open);
    }
    onBlur() {
        this.service.combobox.openChange.emit(false);
    }
    onKeyboard(evt) {
        const keyCode = evt.keyCode;
        if (keyCode === ESCAPE) {
            // This is handled by CDK, and detaches overlay
            return;
        }
        if (this.service.combobox.open) {
            switch (keyCode) {
                // User selects currently active option by pressing the `Enter` key
                case ENTER:
                    trapEvent(evt);
                    this.service.combobox.onOptionSelection();
                    return;
                // Propagate to keymanager
                default:
                    this.service.combobox.keyManager.onKeydown(evt);
                    return;
            }
        }
        else {
            // Do nothing if readonly Lookup
            if (this.service.combobox.hasLookupSingleSelection) {
                return;
            }
            // Pressing the `Down` or `Enter` key will expand the collapsed menu
            if (keyCode === DOWN_ARROW || keyCode === ENTER) {
                trapEvent(evt);
                this.service.combobox.openChange.emit(true);
                return;
            }
            // Any key on Lookup should expand the collapsed menu
            if (this.service.combobox.isLookup) {
                // Delay emission so actual value of the input has been updated
                setTimeout(() => this.service.combobox.openChange.emit(true), 0);
            }
        }
    }
};
NglComboboxInput.ctorParameters = () => [
    { type: NglComboboxService },
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    HostBinding('readOnly'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglComboboxInput.prototype, "isReadonly", null);
__decorate([
    HostBinding('attr.aria-autocomplete'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglComboboxInput.prototype, "ariaAutocomplete", null);
__decorate([
    HostBinding('class.slds-combobox__input-value'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglComboboxInput.prototype, "hasReadonlyValue", null);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NglComboboxInput.prototype, "onMouseInteraction", null);
__decorate([
    HostListener('blur'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NglComboboxInput.prototype, "onBlur", null);
__decorate([
    HostListener('keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], NglComboboxInput.prototype, "onKeyboard", null);
NglComboboxInput = __decorate([
    Directive({
        selector: 'input[nglCombobox]',
    }),
    __metadata("design:paramtypes", [NglComboboxService,
        ElementRef,
        Renderer2])
], NglComboboxInput);
export { NglComboboxInput };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm9ib3gtaW5wdXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvY29tYm9ib3hlcy9jb21ib2JveC1pbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFjLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV4RCxNQUFNLCtCQUErQixHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUs7QUFLbEQsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUF1QjNCLFlBQW9CLE9BQTJCLEVBQzNCLEVBQWMsRUFDZCxRQUFtQjtRQUZuQixZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUMzQixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNyQyxNQUFNLEVBQUUsYUFBYSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsYUFB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QUFDO2dCQUM1QyxPQUFPO2FBQ1I7WUFFRCxxREFBcUQ7WUFDckQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xDLCtEQUErRDtnQkFDL0QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDbEU7U0FDRjtJQUNILENBQUM7Q0FFRixDQUFBOztZQTdGOEIsa0JBQWtCO1lBQ3ZCLFVBQVU7WUFDSixTQUFTOztBQXBCdkM7SUFEQyxXQUFXLENBQUMsVUFBVSxDQUFDOzs7a0RBR3ZCO0FBR0Q7SUFEQyxXQUFXLENBQUMsd0JBQXdCLENBQUM7Ozt3REFHckM7QUFHRDtJQURDLFdBQVcsQ0FBQyxrQ0FBa0MsQ0FBQzs7O3dEQUcvQztBQTJDRDtJQURDLFlBQVksQ0FBQyxPQUFPLENBQUM7Ozs7MERBTXJCO0FBR0Q7SUFEQyxZQUFZLENBQUMsTUFBTSxDQUFDOzs7OzhDQUdwQjtBQUdEO0lBREMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztxQ0FDcEIsYUFBYTs7a0RBeUM1QjtBQWxIVSxnQkFBZ0I7SUFINUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG9CQUFvQjtLQUMvQixDQUFDO3FDQXdCNkIsa0JBQWtCO1FBQ3ZCLFVBQVU7UUFDSixTQUFTO0dBekI1QixnQkFBZ0IsQ0FvSDVCO1NBcEhZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBIb3N0TGlzdGVuZXIsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB1bmlxdWVJZCwgdHJhcEV2ZW50IH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IERPV05fQVJST1csIEVOVEVSLCBFU0NBUEUgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBidWZmZXIsIGRlYm91bmNlVGltZSwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTmdsQ29tYm9ib3hTZXJ2aWNlIH0gZnJvbSAnLi9jb21ib2JveC5zZXJ2aWNlJztcblxuY29uc3QgTUFYX0lOVEVSVkFMX0JFVFdFRU5fS0VZU1RST0tFUyA9IDMwMDsgLy8gbXNcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbbmdsQ29tYm9ib3hdJyxcbn0pXG5leHBvcnQgY2xhc3MgTmdsQ29tYm9ib3hJbnB1dCB7XG5cbiAga2V5Ym9hcmRCdWZmZXIkOiBPYnNlcnZhYmxlPHN0cmluZz47XG5cbiAgQEhvc3RCaW5kaW5nKCdyZWFkT25seScpXG4gIGdldCBpc1JlYWRvbmx5KCkge1xuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuY29tYm9ib3gudmFyaWFudCA9PT0gJ2Jhc2UnIHx8IHRoaXMuc2VydmljZS5jb21ib2JveC5oYXNMb29rdXBTaW5nbGVTZWxlY3Rpb247XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1hdXRvY29tcGxldGUnKVxuICBnZXQgYXJpYUF1dG9jb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmNvbWJvYm94LmlzTG9va3VwID8gJ2xpc3QnIDogbnVsbDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2xkcy1jb21ib2JveF9faW5wdXQtdmFsdWUnKVxuICBnZXQgaGFzUmVhZG9ubHlWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmNvbWJvYm94Lmhhc0xvb2t1cFNpbmdsZVNlbGVjdGlvbjtcbiAgfVxuXG4gIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlkO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBOZ2xDb21ib2JveFNlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIGNvbnN0IHsgbmF0aXZlRWxlbWVudCB9ID0gdGhpcy5lbDtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKG5hdGl2ZUVsZW1lbnQsICdzbGRzLWlucHV0Jyk7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhuYXRpdmVFbGVtZW50LCAnc2xkcy1jb21ib2JveF9faW5wdXQnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShuYXRpdmVFbGVtZW50LCAnYXV0b0NvbXBsZXRlJywgJ29mZicpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKG5hdGl2ZUVsZW1lbnQsICdyb2xlJywgJ3RleHRib3gnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShuYXRpdmVFbGVtZW50LCAnYXJpYS1jb250cm9scycsIHRoaXMuc2VydmljZS5jb21ib2JveC51aWQpO1xuICAgIGlmICghbmF0aXZlRWxlbWVudC5pZCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUobmF0aXZlRWxlbWVudCwgJ2lkJywgdW5pcXVlSWQoJ2NvbWJvYm94LWlucHV0JykpO1xuICAgIH1cblxuICAgIGNvbnN0IGtleWJvYXJkRXZlbnQkID0gZnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsICdrZXlwcmVzcycpLnBpcGUobWFwKChlOiBLZXlib2FyZEV2ZW50KSA9PiBlLmtleUNvZGUpKTtcbiAgICB0aGlzLmtleWJvYXJkQnVmZmVyJCA9IGtleWJvYXJkRXZlbnQkLnBpcGUoXG4gICAgICBidWZmZXIoa2V5Ym9hcmRFdmVudCQucGlwZShkZWJvdW5jZVRpbWUoTUFYX0lOVEVSVkFMX0JFVFdFRU5fS0VZU1RST0tFUykpKSxcbiAgICAgIG1hcCgoa2V5Q29kZXM6IG51bWJlcltdKSA9PiBrZXlDb2Rlcy5tYXAoKGMpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoYykpLmpvaW4oJycpKVxuICAgICk7XG4gIH1cblxuICBzZXRBcmlhQWN0aXZlRGVzY2VuZGFudCh1aWQ6IHN0cmluZyB8IG51bGwpIHtcbiAgICBpZiAodWlkKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnLCB1aWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcbiAgICB9XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICd2YWx1ZScsIHZhbHVlICE9PSBudWxsID8gdmFsdWUgOiAnJyk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25Nb3VzZUludGVyYWN0aW9uKCkge1xuICAgIGlmICh0aGlzLnNlcnZpY2UuY29tYm9ib3guaGFzTG9va3VwU2luZ2xlU2VsZWN0aW9uIHx8ICh0aGlzLnNlcnZpY2UuY29tYm9ib3gub3BlbiAmJiB0aGlzLnNlcnZpY2UuY29tYm9ib3guaXNMb29rdXApKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VydmljZS5jb21ib2JveC5vcGVuQ2hhbmdlLmVtaXQoIXRoaXMuc2VydmljZS5jb21ib2JveC5vcGVuKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICBvbkJsdXIoKSB7XG4gICAgdGhpcy5zZXJ2aWNlLmNvbWJvYm94Lm9wZW5DaGFuZ2UuZW1pdChmYWxzZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgb25LZXlib2FyZChldnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBjb25zdCBrZXlDb2RlID0gZXZ0LmtleUNvZGU7XG5cbiAgICBpZiAoa2V5Q29kZSA9PT0gRVNDQVBFKSB7XG4gICAgICAvLyBUaGlzIGlzIGhhbmRsZWQgYnkgQ0RLLCBhbmQgZGV0YWNoZXMgb3ZlcmxheVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlcnZpY2UuY29tYm9ib3gub3Blbikge1xuICAgICAgc3dpdGNoIChrZXlDb2RlKSB7XG4gICAgICAgIC8vIFVzZXIgc2VsZWN0cyBjdXJyZW50bHkgYWN0aXZlIG9wdGlvbiBieSBwcmVzc2luZyB0aGUgYEVudGVyYCBrZXlcbiAgICAgICAgY2FzZSBFTlRFUjpcbiAgICAgICAgICB0cmFwRXZlbnQoZXZ0KTtcbiAgICAgICAgICB0aGlzLnNlcnZpY2UuY29tYm9ib3gub25PcHRpb25TZWxlY3Rpb24oKTtcbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgLy8gUHJvcGFnYXRlIHRvIGtleW1hbmFnZXJcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLnNlcnZpY2UuY29tYm9ib3gua2V5TWFuYWdlci5vbktleWRvd24oZXZ0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8gRG8gbm90aGluZyBpZiByZWFkb25seSBMb29rdXBcbiAgICAgIGlmICh0aGlzLnNlcnZpY2UuY29tYm9ib3guaGFzTG9va3VwU2luZ2xlU2VsZWN0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlc3NpbmcgdGhlIGBEb3duYCBvciBgRW50ZXJgIGtleSB3aWxsIGV4cGFuZCB0aGUgY29sbGFwc2VkIG1lbnVcbiAgICAgIGlmIChrZXlDb2RlID09PSBET1dOX0FSUk9XIHx8IGtleUNvZGUgPT09IEVOVEVSKSB7XG4gICAgICAgIHRyYXBFdmVudChldnQpO1xuICAgICAgICB0aGlzLnNlcnZpY2UuY29tYm9ib3gub3BlbkNoYW5nZS5lbWl0KHRydWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEFueSBrZXkgb24gTG9va3VwIHNob3VsZCBleHBhbmQgdGhlIGNvbGxhcHNlZCBtZW51XG4gICAgICBpZiAodGhpcy5zZXJ2aWNlLmNvbWJvYm94LmlzTG9va3VwKSB7XG4gICAgICAgIC8vIERlbGF5IGVtaXNzaW9uIHNvIGFjdHVhbCB2YWx1ZSBvZiB0aGUgaW5wdXQgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2VydmljZS5jb21ib2JveC5vcGVuQ2hhbmdlLmVtaXQodHJ1ZSksIDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iXX0=