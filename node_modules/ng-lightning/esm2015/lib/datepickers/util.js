export function parseDate(date) {
    if (!date) {
        return null;
    }
    return { year: date.getFullYear(), month: date.getMonth(), day: date.getDate() };
}
export function isEqualDate(d1, d2) {
    return d1 && d2 && d1.day === d2.day && d1.month === d2.month && d1.year === d2.year;
}
export function getToday() {
    const today = new Date();
    return { year: today.getFullYear(), month: today.getMonth(), day: today.getDate() };
}
export function numberOfDaysInMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
}
// Split array into smaller arrays
export function split(arr, size = 7) {
    const arrays = [];
    while (arr.length > 0) {
        arrays.push(arr.splice(0, size));
    }
    return arrays;
}
export function isDisabled(d, disabledCallback, min, max) {
    const date = new Date(d.year, d.month, d.day);
    return (disabledCallback && disabledCallback(date)) ||
        (min && compareDate(d, min) < 0) ||
        (max && compareDate(d, max) > 0);
}
export function compareDate(d1, d2) {
    if (isEqualDate(d1, d2)) {
        return 0;
    }
    const keys = ['year', 'month', 'day'];
    for (let i = 0; i < 3; i++) {
        const key = keys[i];
        const diff = d1[key] - d2[key];
        if (diff !== 0) {
            return diff > 0 ? 1 : -1;
        }
    }
}
export function isSameMonth(d1, d2) {
    return d1.year === d2.year && d1.month === d2.month;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9kYXRlcGlja2Vycy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE1BQU0sVUFBVSxTQUFTLENBQUMsSUFBVTtJQUNsQyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQUUsT0FBTyxJQUFJLENBQUM7S0FBRTtJQUMzQixPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztBQUNuRixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxFQUFtQixFQUFFLEVBQW1CO0lBQ2xFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQztBQUN2RixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVE7SUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUN6QixPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztBQUN0RixDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBQVksRUFBRSxLQUFhO0lBQzdELE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDaEQsQ0FBQztBQUVDLGtDQUFrQztBQUNwQyxNQUFNLFVBQVUsS0FBSyxDQUFDLEdBQVUsRUFBRSxJQUFJLEdBQUcsQ0FBQztJQUN4QyxNQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7SUFDekIsT0FBTyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbEM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxDQUFrQixFQUFFLGdCQUFzQyxFQUFFLEdBQW9CLEVBQUUsR0FBb0I7SUFDL0gsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxFQUFtQixFQUFFLEVBQW1CO0lBQ2xFLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUN2QixPQUFPLENBQUMsQ0FBQztLQUNWO0lBQ0QsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ2QsT0FBTyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxFQUFtQixFQUFFLEVBQW1CO0lBQ2xFLE9BQU8sRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQztBQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBOZ2xJbnRlcm5hbERhdGUge1xuICB5ZWFyOiBudW1iZXI7XG4gIG1vbnRoOiBudW1iZXI7XG4gIGRheTogbnVtYmVyO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURhdGUoZGF0ZTogRGF0ZSk6IE5nbEludGVybmFsRGF0ZSB7XG4gIGlmICghZGF0ZSkgeyByZXR1cm4gbnVsbDsgfVxuICByZXR1cm4geyB5ZWFyOiBkYXRlLmdldEZ1bGxZZWFyKCksIG1vbnRoOiBkYXRlLmdldE1vbnRoKCksIGRheTogZGF0ZS5nZXREYXRlKCkgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWxEYXRlKGQxOiBOZ2xJbnRlcm5hbERhdGUsIGQyOiBOZ2xJbnRlcm5hbERhdGUpIHtcbiAgcmV0dXJuIGQxICYmIGQyICYmIGQxLmRheSA9PT0gZDIuZGF5ICYmIGQxLm1vbnRoID09PSBkMi5tb250aCAmJiBkMS55ZWFyID09PSBkMi55ZWFyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9kYXkoKTogTmdsSW50ZXJuYWxEYXRlIHtcbiAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICByZXR1cm4geyB5ZWFyOiB0b2RheS5nZXRGdWxsWWVhcigpLCBtb250aDogdG9kYXkuZ2V0TW9udGgoKSwgZGF5OiB0b2RheS5nZXREYXRlKCkgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlck9mRGF5c0luTW9udGgoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSB7XG4gIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCArIDEsIDApLmdldERhdGUoKTtcbn1cblxuICAvLyBTcGxpdCBhcnJheSBpbnRvIHNtYWxsZXIgYXJyYXlzXG5leHBvcnQgZnVuY3Rpb24gc3BsaXQoYXJyOiBhbnlbXSwgc2l6ZSA9IDcpIHtcbiAgY29uc3QgYXJyYXlzOiBhbnlbXSA9IFtdO1xuICB3aGlsZSAoYXJyLmxlbmd0aCA+IDApIHtcbiAgICBhcnJheXMucHVzaChhcnIuc3BsaWNlKDAsIHNpemUpKTtcbiAgfVxuICByZXR1cm4gYXJyYXlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEaXNhYmxlZChkOiBOZ2xJbnRlcm5hbERhdGUsIGRpc2FibGVkQ2FsbGJhY2s6IChkOiBEYXRlKSA9PiBib29sZWFuLCBtaW46IE5nbEludGVybmFsRGF0ZSwgbWF4OiBOZ2xJbnRlcm5hbERhdGUpOiBib29sZWFuIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGQueWVhciwgZC5tb250aCwgZC5kYXkpO1xuICByZXR1cm4gKGRpc2FibGVkQ2FsbGJhY2sgJiYgZGlzYWJsZWRDYWxsYmFjayhkYXRlKSkgfHxcbiAgICAobWluICYmIGNvbXBhcmVEYXRlKGQsIG1pbikgPCAwKSB8fFxuICAgIChtYXggJiYgY29tcGFyZURhdGUoZCwgbWF4KSA+IDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZURhdGUoZDE6IE5nbEludGVybmFsRGF0ZSwgZDI6IE5nbEludGVybmFsRGF0ZSkge1xuICBpZiAoaXNFcXVhbERhdGUoZDEsIGQyKSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IGtleXMgPSBbJ3llYXInLCAnbW9udGgnLCAnZGF5J107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICBjb25zdCBkaWZmID0gZDFba2V5XSAtIGQyW2tleV07XG4gICAgaWYgKGRpZmYgIT09IDApIHtcbiAgICAgIHJldHVybiBkaWZmID4gMCA/IDEgOiAtMTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZU1vbnRoKGQxOiBOZ2xJbnRlcm5hbERhdGUsIGQyOiBOZ2xJbnRlcm5hbERhdGUpOiBib29sZWFuIHtcbiAgcmV0dXJuIGQxLnllYXIgPT09IGQyLnllYXIgJiYgZDEubW9udGggPT09IGQyLm1vbnRoO1xufVxuIl19