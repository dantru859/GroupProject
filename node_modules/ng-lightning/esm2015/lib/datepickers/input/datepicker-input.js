import { __decorate, __metadata, __param } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ElementRef, Renderer2, TemplateRef, forwardRef, ChangeDetectorRef, Output, EventEmitter, ViewChild, OnInit, Inject, OnChanges, SimpleChanges, OnDestroy, Optional, NgZone, LOCALE_ID } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { CdkConnectedOverlay } from '@angular/cdk/overlay';
import { FocusTrapFactory, FocusTrap } from '@angular/cdk/a11y';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { BehaviorSubject } from 'rxjs';
import { take } from 'rxjs/operators';
import { uniqueId } from '../../util/util';
import { InputBoolean } from '../../util/convert';
import { HostService } from '../../common/host/host.service';
import { NglDateAdapter } from '../adapters/date-fns-adapter';
import { NGL_DATEPICKER_CONFIG, NglDatepickerConfig } from '../config';
import { DEFAULT_DROPDOWN_POSITIONS } from '../../util/overlay-position';
import { parseDate, isDisabled } from '../util';
const NGL_DATEPICKER_INPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NglDatepickerInput),
    multi: true
};
const NGL_DATEPICKER_INPUT_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => NglDatepickerInput),
    multi: true
};
let NglDatepickerInput = class NglDatepickerInput {
    constructor(defaultConfig, locale, element, renderer, cd, hostService, ngZone, focusTrapFactory, adapter) {
        this.element = element;
        this.renderer = renderer;
        this.cd = cd;
        this.hostService = hostService;
        this.ngZone = ngZone;
        this.focusTrapFactory = focusTrapFactory;
        this.adapter = adapter;
        /**
         * Placeholder of input.
         */
        this.placeholder = '';
        /**
         * Whether input is readonly and calendar is available for date selection.
         */
        this.readonlyInput = false;
        /**
         * Emits when selected date changes.
         */
        this.valueChange = new EventEmitter();
        /**
         * Text for button to open calendar.
         */
        this.selectDateLabel = 'Select a date';
        this.dateDisabled = null;
        this.uid = uniqueId('datepicker-input');
        this._open = new BehaviorSubject(false);
        this._value = null;
        this.onChange = null;
        this.onTouched = () => { };
        this.validatorChange = () => { };
        this.renderer.addClass(this.element.nativeElement, 'slds-form-element');
        this.renderer.addClass(this.element.nativeElement, 'slds-dropdown-trigger');
        this.renderer.addClass(this.element.nativeElement, 'slds-dropdown-trigger_click');
        this.config = Object.assign(Object.assign({}, new NglDatepickerConfig(locale)), defaultConfig);
        this.format = this.config.format;
        this.delimiter = this.config.delimiter;
        this.setPositions(this.config.dropdownAlign);
        this.monthNames = this.config.monthNames;
        this.dayNamesShort = this.config.dayNamesShort;
        this.dayNamesLong = this.config.dayNamesLong;
        this.firstDayOfWeek = this.config.firstDayOfWeek;
        this.showToday = this.config.showToday;
        this.relativeYearFrom = this.config.relativeYearFrom;
        this.relativeYearTo = this.config.relativeYearTo;
        this.openOnInputClick = this.config.openOnInputClick;
        this.todayLabel = this.config.todayLabel;
        this.previousMonthLabel = this.config.previousMonthLabel;
        this.nextMonthLabel = this.config.nextMonthLabel;
    }
    /**
     * The date value.
     */
    set value(value) {
        if (value === this._value) {
            return;
        }
        this._value = value;
        if (this.value instanceof Date) {
            this.date = this.value;
            this.formatInputValue();
        }
        else {
            this.updateInputValue(value || '');
        }
    }
    get value() {
        return this._value;
    }
    set open(open) {
        this._open.next(open);
    }
    get open() {
        return this._open.value;
    }
    validate(c) {
        const value = c.value;
        if (!value) {
            return null;
        }
        if (!(this.value instanceof Date)) {
            return { 'nglDatepickerInput': { invalid: c.value } };
        }
        const date = parseDate(value);
        if (isDisabled(date, this.dateDisabled, parseDate(this.min), parseDate(this.max))) {
            return { 'nglDatepickerInput': { disabled: c.value } };
        }
        return null;
    }
    writeValue(value) {
        this.value = value;
        this.cd.markForCheck();
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    registerOnValidatorChange(fn) { this.validatorChange = fn; }
    setDisabledState(disabled) { this.disabled = disabled; }
    onBlur() {
        if (this.value instanceof Date) {
            this.updateInputValue();
        }
        this.onTouched();
    }
    ngOnInit() {
        this._open.subscribe(() => {
            this.setHostClass();
            this.cd.markForCheck();
        });
    }
    ngOnChanges(changes) {
        if (changes.format || changes.delimiter) {
            this.setPattern();
            if (this.value instanceof Date) {
                this.updateInputValue();
            }
        }
        if (changes.dropdownAlign) {
            this.setPositions(this.dropdownAlign);
        }
        if (changes.min || changes.max) {
            this.validatorChange();
        }
    }
    ngOnDestroy() {
        this.closeCalendar(false);
    }
    onKeyboardInput(evt) {
        const keyCode = evt.keyCode;
        if (!this.open && (keyCode === DOWN_ARROW || keyCode === UP_ARROW)) {
            this.openCalendar();
        }
    }
    onInputChange(value) {
        const date = this.dateParse(value);
        this.emitSelection(date || value);
    }
    openCalendar() {
        this.open = true;
    }
    onAttach() {
        this.focusTrap = this.focusTrapFactory.create(this.cdkOverlay.overlayRef.overlayElement);
    }
    onDetach() {
        if (this.open) {
            this.closeCalendar();
        }
    }
    closeCalendar(focusInput = true) {
        this.open = false;
        if (this.focusTrap) {
            this.focusTrap.destroy();
            this.focusTrap = null;
        }
        if (focusInput) {
            this.inputEl.nativeElement.focus();
        }
    }
    onTriggerClick(origin) {
        if (origin === 'input' && !this.openOnInputClick) {
            return;
        }
        if (!this.open) {
            this.openCalendar();
        }
        else {
            this.closeCalendar(false);
        }
    }
    pickerSelection(date) {
        this.emitSelection(date);
        this.closeCalendar();
    }
    updateDatepickerSize(width, height) {
        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {
            const { overlayRef } = this.cdkOverlay;
            overlayRef.updateSize({
                minWidth: width,
                minHeight: height + 4,
            });
            overlayRef.updatePosition();
        });
    }
    setPositions(align) {
        this.overlayPositions = [...DEFAULT_DROPDOWN_POSITIONS[align]];
    }
    formatInputValue() {
        const inputValue = this.inputEl.nativeElement.value;
        if (!inputValue) {
            this.updateInputValue();
        }
        else {
            const date = this.value;
            const dateNow = this.dateParse(inputValue);
            if (!dateNow || dateNow.getFullYear() !== date.getFullYear() || dateNow.getMonth() !== date.getMonth() || dateNow.getDate() !== date.getDate()) {
                this.updateInputValue();
            }
        }
    }
    updateInputValue(value = this.dateFormat(this.value)) {
        this.renderer.setProperty(this.inputEl.nativeElement, 'value', value || '');
    }
    dateParse(value) {
        return this.adapter.parse(value, this.getPattern());
    }
    dateFormat(date) {
        return this.adapter.format(date, this.getPattern());
    }
    getPattern() {
        if (!this.pattern) {
            this.setPattern();
        }
        return this.pattern;
    }
    setPattern() {
        this.pattern = this.adapter.pattern(this.format || this.config.format, this.delimiter || this.config.delimiter);
    }
    emitSelection(value) {
        this.valueChange.emit(value);
        if (this.onChange) {
            this.value = value;
            this.onChange(value);
        }
    }
    setHostClass() {
        this.hostService.updateClass(this.element, {
            [`slds-is-open`]: this.open,
        });
    }
};
NglDatepickerInput.ctorParameters = () => [
    { type: NglDatepickerConfig, decorators: [{ type: Optional }, { type: Inject, args: [NGL_DATEPICKER_CONFIG,] }] },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: HostService },
    { type: NgZone },
    { type: FocusTrapFactory },
    { type: NglDateAdapter }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglDatepickerInput.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglDatepickerInput.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglDatepickerInput.prototype, "format", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglDatepickerInput.prototype, "delimiter", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Boolean)
], NglDatepickerInput.prototype, "disabled", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglDatepickerInput.prototype, "readonlyInput", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglDatepickerInput.prototype, "dropdownAlign", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], NglDatepickerInput.prototype, "value", null);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Boolean)
], NglDatepickerInput.prototype, "openOnInputClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglDatepickerInput.prototype, "valueChange", void 0);
__decorate([
    ViewChild('inputEl', { static: true }),
    __metadata("design:type", ElementRef)
], NglDatepickerInput.prototype, "inputEl", void 0);
__decorate([
    ViewChild('cdkOverlay'),
    __metadata("design:type", CdkConnectedOverlay)
], NglDatepickerInput.prototype, "cdkOverlay", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], NglDatepickerInput.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Date)
], NglDatepickerInput.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglDatepickerInput.prototype, "selectDateLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NglDatepickerInput.prototype, "monthNames", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NglDatepickerInput.prototype, "dayNamesShort", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NglDatepickerInput.prototype, "dayNamesLong", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NglDatepickerInput.prototype, "firstDayOfWeek", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Boolean)
], NglDatepickerInput.prototype, "showToday", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], NglDatepickerInput.prototype, "dateDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NglDatepickerInput.prototype, "relativeYearFrom", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NglDatepickerInput.prototype, "relativeYearTo", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglDatepickerInput.prototype, "todayLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglDatepickerInput.prototype, "previousMonthLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NglDatepickerInput.prototype, "nextMonthLabel", void 0);
NglDatepickerInput = __decorate([
    Component({
        selector: 'ngl-datepicker-input',
        template: "\n<label class=\"slds-form-element__label\" *ngIf=\"label\" [attr.for]=\"uid\" [nglInternalOutlet]=\"label\"></label>\n<div class=\"slds-form-element__control slds-input-has-icon slds-input-has-icon_right\" #formEl>\n  <input class=\"slds-input\" #inputEl cdkOverlayOrigin #overlayOrigin=\"cdkOverlayOrigin\" [id]=\"uid\" type=\"text\" autocomplete=\"off\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [readOnly]=\"readonlyInput\" (click)=\"onTriggerClick('input')\" (keydown)=\"onKeyboardInput($event)\" (input)=\"onInputChange($event.target.value)\" (blur)=\"onBlur()\">\n  <button class=\"slds-button slds-button_icon slds-input__icon slds-input__icon_right\" type=\"button\" [title]=\"selectDateLabel\" [disabled]=\"disabled\" (click)=\"onTriggerClick('button')\">\n    <svg class=\"slds-button__icon\" nglIconName=\"utility:event\"></svg><span class=\"slds-assistive-text\">{{ selectDateLabel }}</span>\n  </button>\n</div>\n<ng-template cdkConnectedOverlay #cdkOverlay=\"cdkConnectedOverlay\" [cdkConnectedOverlayPositions]=\"overlayPositions\" [cdkConnectedOverlayOrigin]=\"overlayOrigin\" [cdkConnectedOverlayOpen]=\"open\" (nglOverlayScrolledOutsideView)=\"closeCalendar(false)\" (attach)=\"onAttach()\" (detach)=\"onDetach()\">\n  <ngl-datepicker class=\"slds-dropdown\" [attr.aria-hidden]=\"!open\" [date]=\"date\" [monthNames]=\"monthNames\" [dayNamesShort]=\"dayNamesShort\" [dayNamesLong]=\"dayNamesLong\" [firstDayOfWeek]=\"firstDayOfWeek\" [showToday]=\"showToday\" [min]=\"min\" [max]=\"max\" [relativeYearFrom]=\"relativeYearFrom\" [relativeYearTo]=\"relativeYearTo\" [todayLabel]=\"todayLabel\" [previousMonthLabel]=\"previousMonthLabel\" [nextMonthLabel]=\"nextMonthLabel\" [dateDisabled]=\"dateDisabled\" (dateChange)=\"pickerSelection($event)\" (nglClickOutside)=\"closeCalendar(false)\" [nglClickOutsideIgnore]=\"formEl\"></ngl-datepicker>\n</ng-template>",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [NGL_DATEPICKER_INPUT_VALUE_ACCESSOR, NGL_DATEPICKER_INPUT_VALIDATOR, HostService]
    }),
    __param(0, Optional()), __param(0, Inject(NGL_DATEPICKER_CONFIG)),
    __param(1, Inject(LOCALE_ID)),
    __metadata("design:paramtypes", [NglDatepickerConfig, String, ElementRef,
        Renderer2,
        ChangeDetectorRef,
        HostService,
        NgZone,
        FocusTrapFactory,
        NglDateAdapter])
], NglDatepickerInput);
export { NglDatepickerInput };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbnB1dC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9kYXRlcGlja2Vycy9pbnB1dC9kYXRlcGlja2VyLWlucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQzVHLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEosT0FBTyxFQUFFLGlCQUFpQixFQUF3QixhQUFhLEVBQWdELE1BQU0sZ0JBQWdCLENBQUM7QUFDdEksT0FBTyxFQUFFLG1CQUFtQixFQUEwQixNQUFNLHNCQUFzQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENB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QkFBa0IsQ0E4VjlCO1NBOVZZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIFRlbXBsYXRlUmVmLCBmb3J3YXJkUmVmLCBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBWaWV3Q2hpbGQsIE9uSW5pdCwgSW5qZWN0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIE9uRGVzdHJveSwgT3B0aW9uYWwsIE5nWm9uZSwgTE9DQUxFX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ2RrQ29ubmVjdGVkT3ZlcmxheSwgQ29ubmVjdGlvblBvc2l0aW9uUGFpciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IEZvY3VzVHJhcEZhY3RvcnksIEZvY3VzVHJhcCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IERPV05fQVJST1csIFVQX0FSUk9XIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2tleWNvZGVzJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHVuaXF1ZUlkIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWwvY29udmVydCc7XG5pbXBvcnQgeyBIb3N0U2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9ob3N0L2hvc3Quc2VydmljZSc7XG5pbXBvcnQgeyBOZ2xEYXRlQWRhcHRlciB9IGZyb20gJy4uL2FkYXB0ZXJzL2RhdGUtZm5zLWFkYXB0ZXInO1xuaW1wb3J0IHsgTkdMX0RBVEVQSUNLRVJfQ09ORklHLCBOZ2xEYXRlcGlja2VyQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7IERFRkFVTFRfRFJPUERPV05fUE9TSVRJT05TIH0gZnJvbSAnLi4vLi4vdXRpbC9vdmVybGF5LXBvc2l0aW9uJztcbmltcG9ydCB7IHBhcnNlRGF0ZSwgaXNEaXNhYmxlZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBOR0xfREFURVBJQ0tFUl9JTlBVVF9WQUxVRV9BQ0NFU1NPUiA9IHtcbiAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE5nbERhdGVwaWNrZXJJbnB1dCksXG4gIG11bHRpOiB0cnVlXG59O1xuXG5jb25zdCBOR0xfREFURVBJQ0tFUl9JTlBVVF9WQUxJREFUT1IgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IE5nbERhdGVwaWNrZXJJbnB1dCksXG4gIG11bHRpOiB0cnVlXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtZGF0ZXBpY2tlci1pbnB1dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9kYXRlcGlja2VyLWlucHV0Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbTkdMX0RBVEVQSUNLRVJfSU5QVVRfVkFMVUVfQUNDRVNTT1IsIE5HTF9EQVRFUElDS0VSX0lOUFVUX1ZBTElEQVRPUiwgSG9zdFNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xEYXRlcGlja2VySW5wdXQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yLCBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcblxuICAvKipcbiAgICogTGFiZWwgdGhhdCBhcHBlYXJzIGFib3ZlIHRoZSBpbnB1dC5cbiAgICovXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8qKlxuICAgKiBQbGFjZWhvbGRlciBvZiBpbnB1dC5cbiAgICovXG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyID0gJyc7XG5cbiAgLyoqXG4gICAqIFByZS1kZWZpbmVkIGZvcm1hdCB0byB1c2UuXG4gICAqL1xuICBASW5wdXQoKSBmb3JtYXQ6ICdiaWctZW5kaWFuJyB8ICdsaXR0bGUtZW5kaWFuJyB8ICdtaWRkbGUtZW5kaWFuJztcblxuICAvKipcbiAgICogRGVsaW1pdGVyIHRvIHVzZSBvbiBwcmUtZGVmaW5lZCBmb3JtYXRzLlxuICAgKi9cbiAgQElucHV0KCkgZGVsaW1pdGVyO1xuXG4gIC8qKlxuICAgKiBEaXNhYmxlIGlucHV0IGFuZCBjYWxlbmRhci5cbiAgICovXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBkaXNhYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciBpbnB1dCBpcyByZWFkb25seSBhbmQgY2FsZW5kYXIgaXMgYXZhaWxhYmxlIGZvciBkYXRlIHNlbGVjdGlvbi5cbiAgICovXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSByZWFkb25seUlucHV0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEFsaWducyB0aGUgcmlnaHQgb3IgbGVmdCBzaWRlIG9mIHRoZSBkcm9wZG93biBtZW51IHdpdGggdGhlIHJlc3BlY3RpdmUgc2lkZSBvZiB0aGUgaW5wdXQuXG4gICAqL1xuICBASW5wdXQoKSBkcm9wZG93bkFsaWduOiAnbGVmdCcgfCAncmlnaHQnO1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0ZSB2YWx1ZS5cbiAgICovXG4gIEBJbnB1dCgpIHNldCB2YWx1ZSh2YWx1ZTogRGF0ZSB8IHN0cmluZyB8IG51bGwpIHtcbiAgICBpZiAodmFsdWUgPT09IHRoaXMuX3ZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHRoaXMuZGF0ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLmZvcm1hdElucHV0VmFsdWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVJbnB1dFZhbHVlKDxzdHJpbmc+dmFsdWUgfHwgJycpO1xuICAgIH1cbiAgfVxuICBnZXQgdmFsdWUoKTogRGF0ZSB8IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIG9wZW4gdGhlIGRhdGVwaWNrZXIgd2hlbiBhIG1vdXNlIHVzZXIgY2xpY2tzIG9uIHRoZSBpbnB1dC5cbiAgICovXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBvcGVuT25JbnB1dENsaWNrOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBFbWl0cyB3aGVuIHNlbGVjdGVkIGRhdGUgY2hhbmdlcy5cbiAgICovXG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0ZSB8IHN0cmluZyB8IG51bGw+KCk7XG5cbiAgQFZpZXdDaGlsZCgnaW5wdXRFbCcsIHsgc3RhdGljOiB0cnVlIH0pIGlucHV0RWw6IEVsZW1lbnRSZWY7XG5cbiAgQFZpZXdDaGlsZCgnY2RrT3ZlcmxheScpIGNka092ZXJsYXk6IENka0Nvbm5lY3RlZE92ZXJsYXk7XG5cbiAgLyoqXG4gICAqIFRoZSBtaW5pbXVtIHZhbGlkIGRhdGUuXG4gICAqL1xuICBASW5wdXQoKSByZWFkb25seSBtaW46IERhdGU7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIHZhbGlkIGRhdGUuXG4gICAqL1xuICBASW5wdXQoKSByZWFkb25seSBtYXg6IERhdGU7XG5cbiAgLyoqXG4gICAqIFRleHQgZm9yIGJ1dHRvbiB0byBvcGVuIGNhbGVuZGFyLlxuICAgKi9cbiAgQElucHV0KCkgcmVhZG9ubHkgc2VsZWN0RGF0ZUxhYmVsID0gJ1NlbGVjdCBhIGRhdGUnO1xuXG4gIC8qKlxuICAgKiBEYXRlcGlja2VyIGlucHV0c1xuICAgKi9cbiAgQElucHV0KCkgbW9udGhOYW1lczogc3RyaW5nW107XG4gIEBJbnB1dCgpIGRheU5hbWVzU2hvcnQ6IHN0cmluZ1tdO1xuICBASW5wdXQoKSBkYXlOYW1lc0xvbmc6IHN0cmluZ1tdO1xuICBASW5wdXQoKSBmaXJzdERheU9mV2VlazogbnVtYmVyO1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgc2hvd1RvZGF5OiBib29sZWFuO1xuICBASW5wdXQoKSBkYXRlRGlzYWJsZWQ6IChkYXRlOiBEYXRlKSA9PiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG4gIEBJbnB1dCgpIHJlbGF0aXZlWWVhckZyb206IG51bWJlcjtcbiAgQElucHV0KCkgcmVsYXRpdmVZZWFyVG86IG51bWJlcjtcbiAgQElucHV0KCkgdG9kYXlMYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBwcmV2aW91c01vbnRoTGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgbmV4dE1vbnRoTGFiZWw6IHN0cmluZztcblxuICBkYXRlOiBEYXRlO1xuXG4gIHVpZCA9IHVuaXF1ZUlkKCdkYXRlcGlja2VyLWlucHV0Jyk7XG5cbiAgb3ZlcmxheVBvc2l0aW9uczogQ29ubmVjdGlvblBvc2l0aW9uUGFpcltdO1xuXG4gIHNldCBvcGVuKG9wZW46IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9vcGVuLm5leHQob3Blbik7XG4gIH1cbiAgZ2V0IG9wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wZW4udmFsdWU7XG4gIH1cblxuICBwcml2YXRlIF9vcGVuID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgcHJpdmF0ZSBfdmFsdWU6IERhdGUgfCBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBwcml2YXRlIHBhdHRlcm46IHN0cmluZztcblxuICBwcml2YXRlIGNvbmZpZzogTmdsRGF0ZXBpY2tlckNvbmZpZztcblxuICBwcml2YXRlIGZvY3VzVHJhcDogRm9jdXNUcmFwO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdMX0RBVEVQSUNLRVJfQ09ORklHKSBkZWZhdWx0Q29uZmlnOiBOZ2xEYXRlcGlja2VyQ29uZmlnLFxuICAgICAgICAgICAgICBASW5qZWN0KExPQ0FMRV9JRCkgbG9jYWxlOiBzdHJpbmcsXG4gICAgICAgICAgICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICAgICAgICBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBob3N0U2VydmljZTogSG9zdFNlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgICAgICAgIHByaXZhdGUgZm9jdXNUcmFwRmFjdG9yeTogRm9jdXNUcmFwRmFjdG9yeSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBhZGFwdGVyOiBOZ2xEYXRlQWRhcHRlcikge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzbGRzLWZvcm0tZWxlbWVudCcpO1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzbGRzLWRyb3Bkb3duLXRyaWdnZXInKTtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCAnc2xkcy1kcm9wZG93bi10cmlnZ2VyX2NsaWNrJyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IHsgLi4ubmV3IE5nbERhdGVwaWNrZXJDb25maWcobG9jYWxlKSwgLi4uZGVmYXVsdENvbmZpZyB9O1xuICAgIHRoaXMuZm9ybWF0ID0gdGhpcy5jb25maWcuZm9ybWF0O1xuICAgIHRoaXMuZGVsaW1pdGVyID0gdGhpcy5jb25maWcuZGVsaW1pdGVyO1xuICAgIHRoaXMuc2V0UG9zaXRpb25zKHRoaXMuY29uZmlnLmRyb3Bkb3duQWxpZ24pO1xuICAgIHRoaXMubW9udGhOYW1lcyA9IHRoaXMuY29uZmlnLm1vbnRoTmFtZXM7XG4gICAgdGhpcy5kYXlOYW1lc1Nob3J0ID0gdGhpcy5jb25maWcuZGF5TmFtZXNTaG9ydDtcbiAgICB0aGlzLmRheU5hbWVzTG9uZyA9IHRoaXMuY29uZmlnLmRheU5hbWVzTG9uZztcbiAgICB0aGlzLmZpcnN0RGF5T2ZXZWVrID0gdGhpcy5jb25maWcuZmlyc3REYXlPZldlZWs7XG4gICAgdGhpcy5zaG93VG9kYXkgPSB0aGlzLmNvbmZpZy5zaG93VG9kYXk7XG4gICAgdGhpcy5yZWxhdGl2ZVllYXJGcm9tID0gdGhpcy5jb25maWcucmVsYXRpdmVZZWFyRnJvbTtcbiAgICB0aGlzLnJlbGF0aXZlWWVhclRvID0gdGhpcy5jb25maWcucmVsYXRpdmVZZWFyVG87XG4gICAgdGhpcy5vcGVuT25JbnB1dENsaWNrID0gdGhpcy5jb25maWcub3Blbk9uSW5wdXRDbGljaztcbiAgICB0aGlzLnRvZGF5TGFiZWwgPSB0aGlzLmNvbmZpZy50b2RheUxhYmVsO1xuICAgIHRoaXMucHJldmlvdXNNb250aExhYmVsID0gdGhpcy5jb25maWcucHJldmlvdXNNb250aExhYmVsO1xuICAgIHRoaXMubmV4dE1vbnRoTGFiZWwgPSB0aGlzLmNvbmZpZy5uZXh0TW9udGhMYWJlbDtcbiAgfVxuXG4gIG9uQ2hhbmdlOiBGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xuXG4gIG9uVG91Y2hlZCA9ICgpID0+IHt9O1xuXG4gIHZhbGlkYXRvckNoYW5nZSA9ICgpID0+IHt9O1xuXG4gIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcbiAgICBjb25zdCB2YWx1ZSA9IGMudmFsdWU7XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoISh0aGlzLnZhbHVlIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgIHJldHVybiB7ICduZ2xEYXRlcGlja2VySW5wdXQnOiB7IGludmFsaWQ6IGMudmFsdWUgfSB9O1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGUgPSBwYXJzZURhdGUodmFsdWUpO1xuICAgIGlmIChpc0Rpc2FibGVkKGRhdGUsIHRoaXMuZGF0ZURpc2FibGVkLCBwYXJzZURhdGUodGhpcy5taW4pLCBwYXJzZURhdGUodGhpcy5tYXgpKSkge1xuICAgICAgcmV0dXJuIHsgJ25nbERhdGVwaWNrZXJJbnB1dCc6IHsgZGlzYWJsZWQ6IGMudmFsdWUgfSB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogRGF0ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IGFueSk6IHZvaWQgeyB0aGlzLm9uQ2hhbmdlID0gZm47IH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gYW55KTogdm9pZCB7IHRoaXMub25Ub3VjaGVkID0gZm47IH1cblxuICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7IHRoaXMudmFsaWRhdG9yQ2hhbmdlID0gZm47IH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGRpc2FibGVkOiBib29sZWFuKSB7IHRoaXMuZGlzYWJsZWQgPSBkaXNhYmxlZDsgfVxuXG4gIG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHRoaXMudXBkYXRlSW5wdXRWYWx1ZSgpO1xuICAgIH1cbiAgICB0aGlzLm9uVG91Y2hlZCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fb3Blbi5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRIb3N0Q2xhc3MoKTtcbiAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZm9ybWF0IHx8IGNoYW5nZXMuZGVsaW1pdGVyKSB7XG4gICAgICB0aGlzLnNldFBhdHRlcm4oKTtcbiAgICAgIGlmICh0aGlzLnZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZUlucHV0VmFsdWUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5kcm9wZG93bkFsaWduKSB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9ucyh0aGlzLmRyb3Bkb3duQWxpZ24pO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLm1pbiB8fCBjaGFuZ2VzLm1heCkge1xuICAgICAgdGhpcy52YWxpZGF0b3JDaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmNsb3NlQ2FsZW5kYXIoZmFsc2UpO1xuICB9XG5cbiAgb25LZXlib2FyZElucHV0KGV2dDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGNvbnN0IGtleUNvZGUgPSBldnQua2V5Q29kZTtcblxuICAgIGlmICghdGhpcy5vcGVuICYmIChrZXlDb2RlID09PSBET1dOX0FSUk9XIHx8IGtleUNvZGUgPT09IFVQX0FSUk9XKSkge1xuICAgICAgdGhpcy5vcGVuQ2FsZW5kYXIoKTtcbiAgICB9XG4gIH1cblxuICBvbklucHV0Q2hhbmdlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkYXRlID0gdGhpcy5kYXRlUGFyc2UodmFsdWUpO1xuICAgIHRoaXMuZW1pdFNlbGVjdGlvbihkYXRlIHx8IHZhbHVlKTtcbiAgfVxuXG4gIG9wZW5DYWxlbmRhcigpIHtcbiAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICB9XG5cbiAgb25BdHRhY2goKSB7XG4gICAgdGhpcy5mb2N1c1RyYXAgPSB0aGlzLmZvY3VzVHJhcEZhY3RvcnkuY3JlYXRlKHRoaXMuY2RrT3ZlcmxheS5vdmVybGF5UmVmLm92ZXJsYXlFbGVtZW50KTtcbiAgfVxuXG4gIG9uRGV0YWNoKCkge1xuICAgIGlmICh0aGlzLm9wZW4pIHtcbiAgICAgIHRoaXMuY2xvc2VDYWxlbmRhcigpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlQ2FsZW5kYXIoZm9jdXNJbnB1dCA9IHRydWUpIHtcbiAgICB0aGlzLm9wZW4gPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLmZvY3VzVHJhcCkge1xuICAgICAgdGhpcy5mb2N1c1RyYXAuZGVzdHJveSgpO1xuICAgICAgdGhpcy5mb2N1c1RyYXAgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChmb2N1c0lucHV0KSB7XG4gICAgICB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIG9uVHJpZ2dlckNsaWNrKG9yaWdpbjogJ2lucHV0JyB8ICdidXR0b24nKSB7XG4gICAgaWYgKG9yaWdpbiA9PT0gJ2lucHV0JyAmJiAhdGhpcy5vcGVuT25JbnB1dENsaWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wZW4pIHtcbiAgICAgIHRoaXMub3BlbkNhbGVuZGFyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2xvc2VDYWxlbmRhcihmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgcGlja2VyU2VsZWN0aW9uKGRhdGU6IERhdGUpIHtcbiAgICB0aGlzLmVtaXRTZWxlY3Rpb24oZGF0ZSk7XG4gICAgdGhpcy5jbG9zZUNhbGVuZGFyKCk7XG4gIH1cblxuICB1cGRhdGVEYXRlcGlja2VyU2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMubmdab25lLm9uU3RhYmxlLmFzT2JzZXJ2YWJsZSgpLnBpcGUodGFrZSgxKSkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbnN0IHsgb3ZlcmxheVJlZiB9ID0gdGhpcy5jZGtPdmVybGF5O1xuICAgICAgb3ZlcmxheVJlZi51cGRhdGVTaXplKHtcbiAgICAgICAgbWluV2lkdGg6IHdpZHRoLFxuICAgICAgICBtaW5IZWlnaHQ6IGhlaWdodCArIDQsXG4gICAgICB9KTtcbiAgICAgIG92ZXJsYXlSZWYudXBkYXRlUG9zaXRpb24oKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0UG9zaXRpb25zKGFsaWduOiAnbGVmdCcgfCAncmlnaHQnKSB7XG4gICAgdGhpcy5vdmVybGF5UG9zaXRpb25zID0gWy4uLkRFRkFVTFRfRFJPUERPV05fUE9TSVRJT05TW2FsaWduXV07XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdElucHV0VmFsdWUoKSB7XG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlO1xuICAgIGlmICghaW5wdXRWYWx1ZSkge1xuICAgICAgdGhpcy51cGRhdGVJbnB1dFZhbHVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLnZhbHVlIGFzIERhdGU7XG4gICAgICBjb25zdCBkYXRlTm93ID0gdGhpcy5kYXRlUGFyc2UoaW5wdXRWYWx1ZSk7XG5cbiAgICAgIGlmICghZGF0ZU5vdyB8fCBkYXRlTm93LmdldEZ1bGxZZWFyKCkgIT09IGRhdGUuZ2V0RnVsbFllYXIoKSB8fCBkYXRlTm93LmdldE1vbnRoKCkgIT09IGRhdGUuZ2V0TW9udGgoKSB8fCBkYXRlTm93LmdldERhdGUoKSAhPT0gZGF0ZS5nZXREYXRlKCkpIHtcbiAgICAgICAgdGhpcy51cGRhdGVJbnB1dFZhbHVlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVJbnB1dFZhbHVlKHZhbHVlOiBzdHJpbmcgPSB0aGlzLmRhdGVGb3JtYXQoPERhdGU+dGhpcy52YWx1ZSkpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LCAndmFsdWUnLCB2YWx1ZSB8fCAnJyk7XG4gIH1cblxuICBwcml2YXRlIGRhdGVQYXJzZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5wYXJzZSh2YWx1ZSwgdGhpcy5nZXRQYXR0ZXJuKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBkYXRlRm9ybWF0KGRhdGU6IERhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmZvcm1hdChkYXRlLCB0aGlzLmdldFBhdHRlcm4oKSk7XG4gIH1cblxuICBwcml2YXRlIGdldFBhdHRlcm4oKSB7XG4gICAgaWYgKCF0aGlzLnBhdHRlcm4pIHtcbiAgICAgIHRoaXMuc2V0UGF0dGVybigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wYXR0ZXJuO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRQYXR0ZXJuKCkge1xuICAgIHRoaXMucGF0dGVybiA9IHRoaXMuYWRhcHRlci5wYXR0ZXJuKHRoaXMuZm9ybWF0IHx8IHRoaXMuY29uZmlnLmZvcm1hdCwgdGhpcy5kZWxpbWl0ZXIgfHwgdGhpcy5jb25maWcuZGVsaW1pdGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdFNlbGVjdGlvbih2YWx1ZTogRGF0ZSB8IHN0cmluZykge1xuICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh2YWx1ZSk7XG5cbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5vbkNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRIb3N0Q2xhc3MoKSB7XG4gICAgdGhpcy5ob3N0U2VydmljZS51cGRhdGVDbGFzcyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgIFtgc2xkcy1pcy1vcGVuYF06IHRoaXMub3BlbixcbiAgICB9KTtcbiAgfVxufVxuIl19