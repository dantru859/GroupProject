import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { uniqueId } from '../util/util';
import { InputNumber } from '../util/convert';
let NglDatepickerYear = class NglDatepickerYear {
    constructor() {
        this.uid = uniqueId('datepicker_year');
        this.yearChange = new EventEmitter();
    }
    change($event) {
        this.yearChange.emit($event);
    }
    ngOnChanges() {
        this.range = this.getRange();
    }
    getRange() {
        const minYear = Math.min(this.from.year, this.year);
        const maxYear = Math.max(this.to.year, this.year);
        const size = maxYear - minYear;
        return Array.apply(null, { length: size + 1 }).map((value, index) => minYear + index);
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglDatepickerYear.prototype, "from", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglDatepickerYear.prototype, "to", void 0);
__decorate([
    Input(), InputNumber(),
    __metadata("design:type", Number)
], NglDatepickerYear.prototype, "year", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglDatepickerYear.prototype, "yearChange", void 0);
NglDatepickerYear = __decorate([
    Component({
        selector: 'ngl-date-year',
        template: "\n<label class=\"slds-assistive-text\" [attr.for]=\"uid\">Pick a Year</label>\n<div class=\"slds-select_container\">\n  <select class=\"slds-select\" [id]=\"uid\" [ngModel]=\"year\" (ngModelChange)=\"change($event)\">\n    <option *ngFor=\"let yr of range\" [value]=\"yr\">{{yr}}</option>\n  </select>\n</div>",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], NglDatepickerYear);
export { NglDatepickerYear };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9kYXRlcGlja2Vycy95ZWFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLHVCQUF1QixFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzNHLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBUTlDLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBQTlCO1FBRUUsUUFBRyxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBTXhCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBbUI1QyxDQUFDO0lBZkMsTUFBTSxDQUFDLE1BQWM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU8sUUFBUTtRQUNkLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELE1BQU0sSUFBSSxHQUFHLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDL0IsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFVLEVBQUUsS0FBYSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDckcsQ0FBQztDQUVGLENBQUE7QUF2QlU7SUFBUixLQUFLLEVBQUU7OytDQUF1QjtBQUN0QjtJQUFSLEtBQUssRUFBRTs7NkNBQXFCO0FBRUw7SUFBdkIsS0FBSyxFQUFFLEVBQUUsV0FBVyxFQUFFOzsrQ0FBYztBQUMzQjtJQUFULE1BQU0sRUFBRTs7cURBQWlDO0FBUi9CLGlCQUFpQjtJQUw3QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZUFBZTtRQUN6QixpVUFBMEI7UUFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztHQUNXLGlCQUFpQixDQTJCN0I7U0EzQlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHVuaXF1ZUlkIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IElucHV0TnVtYmVyIH0gZnJvbSAnLi4vdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IE5nbEludGVybmFsRGF0ZSB9IGZyb20gJy4vdXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC1kYXRlLXllYXInLFxuICB0ZW1wbGF0ZVVybDogJy4veWVhci5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE5nbERhdGVwaWNrZXJZZWFyIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICB1aWQgPSB1bmlxdWVJZCgnZGF0ZXBpY2tlcl95ZWFyJyk7XG5cbiAgQElucHV0KCkgZnJvbTogTmdsSW50ZXJuYWxEYXRlO1xuICBASW5wdXQoKSB0bzogTmdsSW50ZXJuYWxEYXRlO1xuXG4gIEBJbnB1dCgpIEBJbnB1dE51bWJlcigpIHllYXI6IG51bWJlcjtcbiAgQE91dHB1dCgpIHllYXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcmFuZ2U6IG51bWJlcltdO1xuXG4gIGNoYW5nZSgkZXZlbnQ6IHN0cmluZykge1xuICAgIHRoaXMueWVhckNoYW5nZS5lbWl0KCRldmVudCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLnJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSYW5nZSgpOiBudW1iZXJbXSB7XG4gICAgY29uc3QgbWluWWVhciA9IE1hdGgubWluKHRoaXMuZnJvbS55ZWFyLCB0aGlzLnllYXIpO1xuICAgIGNvbnN0IG1heFllYXIgPSBNYXRoLm1heCh0aGlzLnRvLnllYXIsIHRoaXMueWVhcik7XG4gICAgY29uc3Qgc2l6ZSA9IG1heFllYXIgLSBtaW5ZZWFyO1xuICAgIHJldHVybiBBcnJheS5hcHBseShudWxsLCB7IGxlbmd0aDogc2l6ZSArIDEgfSkubWFwKCh2YWx1ZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiBtaW5ZZWFyICsgaW5kZXgpO1xuICB9XG5cbn1cbiJdfQ==