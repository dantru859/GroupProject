import { __decorate, __metadata } from "tslib";
import { Directive, HostBinding, Input, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { InputBoolean } from '../util/convert';
import { NglCarouselImage } from './carousel-image';
import { uniqueId } from '../util/util';
let NglCarouselIndicator = class NglCarouselIndicator {
    constructor(el) {
        this.el = el;
        this.uid = uniqueId('carousel-indicator');
    }
    get tabindex() {
        return this.isActive ? 0 : -1;
    }
    ngOnChanges(changes) {
        this.image.active = this.isActive;
        if (changes.image) {
            this.image.labelledby = this.uid;
        }
    }
    focus() {
        this.el.nativeElement.focus();
    }
};
NglCarouselIndicator.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    HostBinding('class.slds-is-active'),
    HostBinding('attr.aria-selected'),
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglCarouselIndicator.prototype, "isActive", void 0);
__decorate([
    HostBinding('attr.tabindex'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglCarouselIndicator.prototype, "tabindex", null);
__decorate([
    Input(),
    __metadata("design:type", NglCarouselImage)
], NglCarouselIndicator.prototype, "image", void 0);
__decorate([
    HostBinding('attr.id'),
    __metadata("design:type", Object)
], NglCarouselIndicator.prototype, "uid", void 0);
NglCarouselIndicator = __decorate([
    Directive({
        selector: '[nglCarouselIndicator]',
    }),
    __metadata("design:paramtypes", [ElementRef])
], NglCarouselIndicator);
export { NglCarouselIndicator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtaW5kaWNhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2Nhcm91c2VsL2Nhcm91c2VsLWluZGljYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBS3hDLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBZ0IvQixZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUZsQyxRQUFHLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFFQSxDQUFDO0lBVHRDLElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBU0QsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFbEMsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2hDLENBQUM7Q0FDRixDQUFBOztZQWJ5QixVQUFVOztBQVpUO0lBRnhCLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQztJQUNuQyxXQUFXLENBQUMsb0JBQW9CLENBQUM7SUFDakMsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFOztzREFBbUI7QUFHM0M7SUFEQyxXQUFXLENBQUMsZUFBZSxDQUFDOzs7b0RBRzVCO0FBRVE7SUFBUixLQUFLLEVBQUU7OEJBQWlCLGdCQUFnQjttREFBQztBQUcxQztJQURDLFdBQVcsQ0FBQyxTQUFTLENBQUM7O2lEQUNjO0FBZDFCLG9CQUFvQjtJQUhoQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsd0JBQXdCO0tBQ25DLENBQUM7cUNBaUJ3QixVQUFVO0dBaEJ2QixvQkFBb0IsQ0E2QmhDO1NBN0JZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBFbGVtZW50UmVmLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uL3V0aWwvY29udmVydCc7XG5pbXBvcnQgeyBOZ2xDYXJvdXNlbEltYWdlIH0gZnJvbSAnLi9jYXJvdXNlbC1pbWFnZSc7XG5pbXBvcnQgeyB1bmlxdWVJZCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ2xDYXJvdXNlbEluZGljYXRvcl0nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xDYXJvdXNlbEluZGljYXRvciBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zbGRzLWlzLWFjdGl2ZScpXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLXNlbGVjdGVkJylcbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIHJlYWRvbmx5IGlzQWN0aXZlO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpXG4gIGdldCB0YWJpbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0FjdGl2ZSA/IDAgOiAtMTtcbiAgfVxuXG4gIEBJbnB1dCgpIHJlYWRvbmx5IGltYWdlOiBOZ2xDYXJvdXNlbEltYWdlO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5pZCcpXG4gIHVpZCA9IHVuaXF1ZUlkKCdjYXJvdXNlbC1pbmRpY2F0b3InKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICB0aGlzLmltYWdlLmFjdGl2ZSA9IHRoaXMuaXNBY3RpdmU7XG5cbiAgICBpZiAoY2hhbmdlcy5pbWFnZSkge1xuICAgICAgdGhpcy5pbWFnZS5sYWJlbGxlZGJ5ID0gdGhpcy51aWQ7XG4gICAgfVxuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cbn1cbiJdfQ==