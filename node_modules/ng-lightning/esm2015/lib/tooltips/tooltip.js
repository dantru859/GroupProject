import { __decorate, __metadata } from "tslib";
import { Component, ChangeDetectionStrategy, ChangeDetectorRef, TemplateRef, ElementRef, Renderer2 } from '@angular/core';
import { POSITION_MAP, getPlacementStyles } from '../util/overlay-position';
import { HostService } from '../common/host/host.service';
import { OnChange } from '../util/property-watch-decorator';
import { ngClassCombine } from '../util/util';
let NglTooltip = class NglTooltip {
    constructor(element, renderer, hostService, cd) {
        this.element = element;
        this.renderer = renderer;
        this.hostService = hostService;
        this.cd = cd;
        this.renderer.addClass(this.element.nativeElement, 'slds-popover');
        this.renderer.addClass(this.element.nativeElement, 'slds-popover_tooltip');
        this.renderer.setAttribute(this.element.nativeElement, 'role', 'tooltip');
    }
    nglOnPropertyChange(prop) {
        if (prop === 'uid') {
            this.renderer.setAttribute(this.element.nativeElement, 'id', this.uid);
        }
        else if (prop === 'placement') {
            this.nubbin = POSITION_MAP[this.placement].nubbin;
            this.setHostClass();
        }
        else if (prop === 'template') {
            this.cd.markForCheck();
        }
        else if (prop === 'tooltipClass') {
            this.setHostClass();
        }
    }
    setHostClass() {
        this.hostService.updateClass(this.element, ngClassCombine(this.tooltipClass, {
            [`slds-nubbin_${this.nubbin}`]: true,
        }));
        this.hostService.updateStyle(this.element, getPlacementStyles(this.nubbin));
    }
};
NglTooltip.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: HostService },
    { type: ChangeDetectorRef }
];
__decorate([
    OnChange(),
    __metadata("design:type", Object)
], NglTooltip.prototype, "template", void 0);
__decorate([
    OnChange(),
    __metadata("design:type", String)
], NglTooltip.prototype, "placement", void 0);
__decorate([
    OnChange(),
    __metadata("design:type", String)
], NglTooltip.prototype, "uid", void 0);
__decorate([
    OnChange(),
    __metadata("design:type", Object)
], NglTooltip.prototype, "tooltipClass", void 0);
NglTooltip = __decorate([
    Component({
        // tslint:disable-next-line:component-selector
        selector: 'div[ngl-tooltip]',
        template: "\n<div class=\"slds-popover__body\" [nglInternalOutlet]=\"template\"></div>",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [HostService]
    }),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        HostService,
        ChangeDetectorRef])
], NglTooltip);
export { NglTooltip };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi90b29sdGlwcy90b29sdGlwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFILE9BQU8sRUFBYSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzVELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFTOUMsSUFBYSxVQUFVLEdBQXZCLE1BQWEsVUFBVTtJQVlyQixZQUFvQixPQUFtQixFQUNuQixRQUFtQixFQUNuQixXQUF3QixFQUN4QixFQUFxQjtRQUhyQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ25CLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELG1CQUFtQixDQUFDLElBQUk7UUFDdEIsSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEU7YUFBTSxJQUFJLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNsRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7YUFBTSxJQUFJLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDOUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUN4QjthQUFNLElBQUksSUFBSSxLQUFLLGNBQWMsRUFBRTtZQUNsQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDO0lBRVMsWUFBWTtRQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzNFLENBQUMsZUFBZSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJO1NBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0NBQ0YsQ0FBQTs7WUE3QjhCLFVBQVU7WUFDVCxTQUFTO1lBQ04sV0FBVztZQUNwQixpQkFBaUI7O0FBYjdCO0lBQVgsUUFBUSxFQUFFOzs0Q0FBc0M7QUFFckM7SUFBWCxRQUFRLEVBQUU7OzZDQUFzQjtBQUVwQjtJQUFaLFFBQVEsRUFBRTs7dUNBQWM7QUFFWjtJQUFaLFFBQVEsRUFBRTs7Z0RBQW9CO0FBUnBCLFVBQVU7SUFQdEIsU0FBUyxDQUFDO1FBQ1QsOENBQThDO1FBQzlDLFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsdUZBQTZCO1FBQzdCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1FBQy9DLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQztLQUN6QixDQUFDO3FDQWE2QixVQUFVO1FBQ1QsU0FBUztRQUNOLFdBQVc7UUFDcEIsaUJBQWlCO0dBZjlCLFVBQVUsQ0F5Q3RCO1NBekNZLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgVGVtcGxhdGVSZWYsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxhY2VtZW50LCBQT1NJVElPTl9NQVAsIGdldFBsYWNlbWVudFN0eWxlcyB9IGZyb20gJy4uL3V0aWwvb3ZlcmxheS1wb3NpdGlvbic7XG5pbXBvcnQgeyBIb3N0U2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9ob3N0L2hvc3Quc2VydmljZSc7XG5pbXBvcnQgeyBPbkNoYW5nZSB9IGZyb20gJy4uL3V0aWwvcHJvcGVydHktd2F0Y2gtZGVjb3JhdG9yJztcbmltcG9ydCB7IG5nQ2xhc3NDb21iaW5lIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuQENvbXBvbmVudCh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdkaXZbbmdsLXRvb2x0aXBdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Rvb2x0aXAuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtIb3N0U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIE5nbFRvb2x0aXAge1xuXG4gIEBPbkNoYW5nZSgpIHRlbXBsYXRlOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcblxuICBAT25DaGFuZ2UoKSBwbGFjZW1lbnQ6IFBsYWNlbWVudDtcblxuICBAT25DaGFuZ2UoKSAgdWlkOiBzdHJpbmc7XG5cbiAgQE9uQ2hhbmdlKCkgIHRvb2x0aXBDbGFzczogYW55O1xuXG4gIHByaXZhdGUgbnViYmluOiBQbGFjZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgICAgICAgICAgIHByaXZhdGUgaG9zdFNlcnZpY2U6IEhvc3RTZXJ2aWNlLFxuICAgICAgICAgICAgICBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzbGRzLXBvcG92ZXInKTtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCAnc2xkcy1wb3BvdmVyX3Rvb2x0aXAnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3JvbGUnLCAndG9vbHRpcCcpO1xuICB9XG5cbiAgbmdsT25Qcm9wZXJ0eUNoYW5nZShwcm9wKSB7XG4gICAgaWYgKHByb3AgPT09ICd1aWQnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2lkJywgdGhpcy51aWQpO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ3BsYWNlbWVudCcpIHtcbiAgICAgIHRoaXMubnViYmluID0gUE9TSVRJT05fTUFQW3RoaXMucGxhY2VtZW50XS5udWJiaW47XG4gICAgICB0aGlzLnNldEhvc3RDbGFzcygpO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgPT09ICd0b29sdGlwQ2xhc3MnKSB7XG4gICAgICB0aGlzLnNldEhvc3RDbGFzcygpO1xuICAgIH1cbn1cblxuICBwcml2YXRlIHNldEhvc3RDbGFzcygpIHtcbiAgICB0aGlzLmhvc3RTZXJ2aWNlLnVwZGF0ZUNsYXNzKHRoaXMuZWxlbWVudCwgbmdDbGFzc0NvbWJpbmUodGhpcy50b29sdGlwQ2xhc3MsIHtcbiAgICAgIFtgc2xkcy1udWJiaW5fJHt0aGlzLm51YmJpbn1gXTogdHJ1ZSxcbiAgICB9KSk7XG5cbiAgICB0aGlzLmhvc3RTZXJ2aWNlLnVwZGF0ZVN0eWxlKHRoaXMuZWxlbWVudCwgZ2V0UGxhY2VtZW50U3R5bGVzKHRoaXMubnViYmluKSk7XG4gIH1cbn1cbiJdfQ==