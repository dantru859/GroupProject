import { __decorate, __metadata } from "tslib";
import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy } from '@angular/core';
let NglButtonStateOn = class NglButtonStateOn {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.renderer.addClass(this.el.nativeElement, this.getHostClass());
    }
    getHostClass() {
        return 'slds-text-selected';
    }
};
NglButtonStateOn.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], NglButtonStateOn.prototype, "iconName", void 0);
NglButtonStateOn = __decorate([
    Component({
        selector: 'ngl-state-on',
        template: "\n<svg class=\"slds-button__icon slds-button__icon_small slds-button__icon_left\" *ngIf=\"iconName\" [nglIconName]=\"iconName\"></svg>\n<ng-content></ng-content>",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2])
], NglButtonStateOn);
export { NglButtonStateOn };
let NglButtonStateOff = class NglButtonStateOff extends NglButtonStateOn {
    getHostClass() {
        return 'slds-text-not-selected';
    }
};
NglButtonStateOff = __decorate([
    Component({
        selector: 'ngl-state-off',
        template: "\n<svg class=\"slds-button__icon slds-button__icon_small slds-button__icon_left\" *ngIf=\"iconName\" [nglIconName]=\"iconName\"></svg>\n<ng-content></ng-content>",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], NglButtonStateOff);
export { NglButtonStateOff };
let NglButtonStateHover = class NglButtonStateHover extends NglButtonStateOn {
    getHostClass() {
        return 'slds-text-selected-focus';
    }
};
NglButtonStateHover = __decorate([
    Component({
        selector: 'ngl-state-hover',
        template: "\n<svg class=\"slds-button__icon slds-button__icon_small slds-button__icon_left\" *ngIf=\"iconName\" [nglIconName]=\"iconName\"></svg>\n<ng-content></ng-content>",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], NglButtonStateHover);
export { NglButtonStateHover };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLXN0YXRlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9idXR0b25zL2J1dHRvbi1zdGF0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPakcsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFRM0IsWUFBb0IsRUFBYyxFQUFVLFFBQW1CO1FBQTNDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQzdELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFUyxZQUFZO1FBQ3BCLE9BQU8sb0JBQW9CLENBQUM7SUFDOUIsQ0FBQztDQUNGLENBQUE7O1lBUHlCLFVBQVU7WUFBb0IsU0FBUzs7QUFGdEQ7SUFBUixLQUFLLEVBQUU7O2tEQUFrQjtBQU5mLGdCQUFnQjtJQUw1QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4Qiw2S0FBbUM7UUFDbkMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQztxQ0FTd0IsVUFBVSxFQUFvQixTQUFTO0dBUnBELGdCQUFnQixDQWU1QjtTQWZZLGdCQUFnQjtBQXNCN0IsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBa0IsU0FBUSxnQkFBZ0I7SUFDM0MsWUFBWTtRQUNwQixPQUFPLHdCQUF3QixDQUFDO0lBQ2xDLENBQUM7Q0FDRixDQUFBO0FBSlksaUJBQWlCO0lBTDdCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxlQUFlO1FBQ3pCLDZLQUFtQztRQUNuQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDO0dBQ1csaUJBQWlCLENBSTdCO1NBSlksaUJBQWlCO0FBVzlCLElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW9CLFNBQVEsZ0JBQWdCO0lBQzdDLFlBQVk7UUFDcEIsT0FBTywwQkFBMEIsQ0FBQztJQUNwQyxDQUFDO0NBQ0YsQ0FBQTtBQUpZLG1CQUFtQjtJQUwvQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLDZLQUFtQztRQUNuQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDO0dBQ1csbUJBQW1CLENBSS9CO1NBSlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtc3RhdGUtb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vYnV0dG9uLXN0YXRlcy5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE5nbEJ1dHRvblN0YXRlT24ge1xuXG4gIC8qKlxuICAgKiBMRFMgbmFtZSBvZiB0aGUgaWNvbi5cbiAgICogTmFtZXMgYXJlIHdyaXR0ZW4gaW4gdGhlIGZvcm1hdCAndXRpbGl0eTpkb3duJyB3aGVyZSAndXRpbGl0eScgaXMgdGhlIGNhdGVnb3J5LCBhbmQgJ2Rvd24nIGlzIHRoZSBzcGVjaWZpYyBpY29uIHRvIGJlIGRpc3BsYXllZC5cbiAgICovXG4gIEBJbnB1dCgpIGljb25OYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuZ2V0SG9zdENsYXNzKCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldEhvc3RDbGFzcygpIHtcbiAgICByZXR1cm4gJ3NsZHMtdGV4dC1zZWxlY3RlZCc7XG4gIH1cbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmdsLXN0YXRlLW9mZicsXG4gIHRlbXBsYXRlVXJsOiAnLi9idXR0b24tc3RhdGVzLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTmdsQnV0dG9uU3RhdGVPZmYgZXh0ZW5kcyBOZ2xCdXR0b25TdGF0ZU9uIHtcbiAgcHJvdGVjdGVkIGdldEhvc3RDbGFzcygpIHtcbiAgICByZXR1cm4gJ3NsZHMtdGV4dC1ub3Qtc2VsZWN0ZWQnO1xuICB9XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC1zdGF0ZS1ob3ZlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9idXR0b24tc3RhdGVzLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTmdsQnV0dG9uU3RhdGVIb3ZlciBleHRlbmRzIE5nbEJ1dHRvblN0YXRlT24ge1xuICBwcm90ZWN0ZWQgZ2V0SG9zdENsYXNzKCkge1xuICAgIHJldHVybiAnc2xkcy10ZXh0LXNlbGVjdGVkLWZvY3VzJztcbiAgfVxufVxuIl19