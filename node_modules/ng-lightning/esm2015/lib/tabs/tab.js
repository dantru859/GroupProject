import { __decorate, __metadata, __param } from "tslib";
import { Directive, Input, TemplateRef, Output, EventEmitter, Optional } from '@angular/core';
import { uniqueId } from '../util/util';
/*
 * <ng-template ngl-tab label="...">
 *    Content goes here...
 * </ng-template>
 */
let NglTab = class NglTab {
    constructor(templateRef) {
        this.templateRef = templateRef;
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
        this.uid = uniqueId('tab');
        this._active = false;
    }
    set active(active) {
        if (active === this._active) {
            return;
        }
        this._active = active;
        if (active) {
            this.activate.emit(this);
        }
        else {
            this.deactivate.emit(this);
        }
    }
    get active() {
        return this._active;
    }
};
NglTab.ctorParameters = () => [
    { type: TemplateRef, decorators: [{ type: Optional }] }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], NglTab.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglTab.prototype, "label", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglTab.prototype, "activate", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglTab.prototype, "deactivate", void 0);
NglTab = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: '[ngl-tab]',
        exportAs: 'nglTab',
    }),
    __param(0, Optional()),
    __metadata("design:paramtypes", [TemplateRef])
], NglTab);
export { NglTab };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL3RhYnMvdGFiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV4Qzs7OztHQUlHO0FBTUgsSUFBYSxNQUFNLEdBQW5CLE1BQWEsTUFBTTtJQVVqQixZQUErQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFQbEQsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDdEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFbEQsUUFBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVkLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFFdUMsQ0FBQztJQUVoRSxJQUFJLE1BQU0sQ0FBQyxNQUFlO1FBQ3hCLElBQUksTUFBTSxLQUFNLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQjthQUFNO1lBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Q0FDRixDQUFBOztZQWY2QyxXQUFXLHVCQUExQyxRQUFROztBQVRaO0lBQVIsS0FBSyxFQUFFOztrQ0FBWTtBQUNYO0lBQVIsS0FBSyxFQUFFOztxQ0FBa0M7QUFDaEM7SUFBVCxNQUFNLEVBQUU7O3dDQUF1QztBQUN0QztJQUFULE1BQU0sRUFBRTs7MENBQXlDO0FBSnZDLE1BQU07SUFMbEIsU0FBUyxDQUFDO1FBQ1QsOENBQThDO1FBQzlDLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFFBQVEsRUFBRSxRQUFRO0tBQ25CLENBQUM7SUFXYSxXQUFBLFFBQVEsRUFBRSxDQUFBO3FDQUFxQixXQUFXO0dBVjVDLE1BQU0sQ0F5QmxCO1NBekJZLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB1bmlxdWVJZCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbi8qXG4gKiA8bmctdGVtcGxhdGUgbmdsLXRhYiBsYWJlbD1cIi4uLlwiPlxuICogICAgQ29udGVudCBnb2VzIGhlcmUuLi5cbiAqIDwvbmctdGVtcGxhdGU+XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW25nbC10YWJdJyxcbiAgZXhwb3J0QXM6ICduZ2xUYWInLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xUYWIge1xuICBASW5wdXQoKSBpZDogc3RyaW5nO1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgQE91dHB1dCgpIGFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcjxOZ2xUYWI+KCk7XG4gIEBPdXRwdXQoKSBkZWFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcjxOZ2xUYWI+KCk7XG5cbiAgdWlkID0gdW5pcXVlSWQoJ3RhYicpO1xuXG4gIHByaXZhdGUgX2FjdGl2ZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge31cblxuICBzZXQgYWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xuICAgIGlmIChhY3RpdmUgPT09ICB0aGlzLl9hY3RpdmUpIHsgcmV0dXJuOyB9XG4gICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIHRoaXMuYWN0aXZhdGUuZW1pdCh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWFjdGl2YXRlLmVtaXQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG59XG4iXX0=