var NglTabVerbose_1;
import { __decorate, __metadata } from "tslib";
import { Directive, TemplateRef, ContentChild, AfterContentInit } from '@angular/core';
import { NglTab } from './tab';
/*
 * <ngl-tab [label="..."]>
 *    <ng-template ngl-tab-label>...</ng-template>
 *    <ng-template ngl-tab-content>
 *       Content goes here...
 *    </ng-template>
 * </ngl-tab>
 */
// tslint:disable-next-line:directive-selector
let NglTabLabel = class NglTabLabel {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
NglTabLabel.ctorParameters = () => [
    { type: TemplateRef }
];
NglTabLabel = __decorate([
    Directive({ selector: '[ngl-tab-label]' }),
    __metadata("design:paramtypes", [TemplateRef])
], NglTabLabel);
export { NglTabLabel };
// tslint:disable-next-line:directive-selector
let NglTabContent = class NglTabContent {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
NglTabContent.ctorParameters = () => [
    { type: TemplateRef }
];
NglTabContent = __decorate([
    Directive({ selector: '[ngl-tab-content]' }),
    __metadata("design:paramtypes", [TemplateRef])
], NglTabContent);
export { NglTabContent };
let NglTabVerbose = NglTabVerbose_1 = class NglTabVerbose extends NglTab {
    ngAfterContentInit() {
        if (this.labelTemplate) {
            this.label = this.labelTemplate.templateRef;
        }
        this.templateRef = this.contentTemplate.templateRef;
    }
};
__decorate([
    ContentChild(NglTabContent),
    __metadata("design:type", NglTabContent)
], NglTabVerbose.prototype, "contentTemplate", void 0);
__decorate([
    ContentChild(NglTabLabel),
    __metadata("design:type", NglTabLabel)
], NglTabVerbose.prototype, "labelTemplate", void 0);
NglTabVerbose = NglTabVerbose_1 = __decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: 'ngl-tab',
        providers: [{ provide: NglTab, useExisting: NglTabVerbose_1 }],
    })
], NglTabVerbose);
export { NglTabVerbose };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLXZlcmJvc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvdGFicy90YWItdmVyYm9zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRS9COzs7Ozs7O0dBT0c7QUFDSCw4Q0FBOEM7QUFFOUMsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztJQUN0QixZQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBRyxDQUFDO0NBQ3JELENBQUE7O1lBRGlDLFdBQVc7O0FBRGhDLFdBQVc7SUFEdkIsU0FBUyxDQUFDLEVBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFDLENBQUM7cUNBRVAsV0FBVztHQURoQyxXQUFXLENBRXZCO1NBRlksV0FBVztBQUl4Qiw4Q0FBOEM7QUFFOUMsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYTtJQUN4QixZQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBRyxDQUFDO0NBQ3JELENBQUE7O1lBRGlDLFdBQVc7O0FBRGhDLGFBQWE7SUFEekIsU0FBUyxDQUFDLEVBQUMsUUFBUSxFQUFFLG1CQUFtQixFQUFDLENBQUM7cUNBRVQsV0FBVztHQURoQyxhQUFhLENBRXpCO1NBRlksYUFBYTtBQVMxQixJQUFhLGFBQWEscUJBQTFCLE1BQWEsYUFBYyxTQUFRLE1BQU07SUFLdkMsa0JBQWtCO1FBQ2hCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1NBQzdDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQztJQUN0RCxDQUFDO0NBQ0YsQ0FBQTtBQVQ4QjtJQUE1QixZQUFZLENBQUMsYUFBYSxDQUFDOzhCQUFrQixhQUFhO3NEQUFDO0FBQ2pDO0lBQTFCLFlBQVksQ0FBQyxXQUFXLENBQUM7OEJBQWdCLFdBQVc7b0RBQUM7QUFIM0MsYUFBYTtJQUx6QixTQUFTLENBQUM7UUFDVCw4Q0FBOEM7UUFDOUMsUUFBUSxFQUFFLFNBQVM7UUFDbkIsU0FBUyxFQUFFLENBQUUsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxlQUFhLEVBQUMsQ0FBRTtLQUM3RCxDQUFDO0dBQ1csYUFBYSxDQVd6QjtTQVhZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBDb250ZW50Q2hpbGQsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nbFRhYiB9IGZyb20gJy4vdGFiJztcblxuLypcbiAqIDxuZ2wtdGFiIFtsYWJlbD1cIi4uLlwiXT5cbiAqICAgIDxuZy10ZW1wbGF0ZSBuZ2wtdGFiLWxhYmVsPi4uLjwvbmctdGVtcGxhdGU+XG4gKiAgICA8bmctdGVtcGxhdGUgbmdsLXRhYi1jb250ZW50PlxuICogICAgICAgQ29udGVudCBnb2VzIGhlcmUuLi5cbiAqICAgIDwvbmctdGVtcGxhdGU+XG4gKiA8L25nbC10YWI+XG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnW25nbC10YWItbGFiZWxdJ30pXG5leHBvcnQgY2xhc3MgTmdsVGFiTGFiZWwge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHt9XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnW25nbC10YWItY29udGVudF0nfSlcbmV4cG9ydCBjbGFzcyBOZ2xUYWJDb250ZW50IHtcbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogJ25nbC10YWInLFxuICBwcm92aWRlcnM6IFsge3Byb3ZpZGU6IE5nbFRhYiwgdXNlRXhpc3Rpbmc6IE5nbFRhYlZlcmJvc2V9IF0sXG59KVxuZXhwb3J0IGNsYXNzIE5nbFRhYlZlcmJvc2UgZXh0ZW5kcyBOZ2xUYWIgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblxuICBAQ29udGVudENoaWxkKE5nbFRhYkNvbnRlbnQpIGNvbnRlbnRUZW1wbGF0ZTogTmdsVGFiQ29udGVudDtcbiAgQENvbnRlbnRDaGlsZChOZ2xUYWJMYWJlbCkgbGFiZWxUZW1wbGF0ZTogTmdsVGFiTGFiZWw7XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICh0aGlzLmxhYmVsVGVtcGxhdGUpIHtcbiAgICAgIHRoaXMubGFiZWwgPSB0aGlzLmxhYmVsVGVtcGxhdGUudGVtcGxhdGVSZWY7XG4gICAgfVxuICAgIHRoaXMudGVtcGxhdGVSZWYgPSB0aGlzLmNvbnRlbnRUZW1wbGF0ZS50ZW1wbGF0ZVJlZjtcbiAgfVxufVxuIl19