import { __decorate, __metadata } from "tslib";
import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, HostBinding, } from '@angular/core';
import { InputBoolean } from '../util/convert';
import { isTemplateRef } from '../util/check';
let NglPill = class NglPill {
    constructor() {
        this.isTemplateRef = isTemplateRef;
        /**
           * Applies the error style to the component.
           */
        this.hasError = false;
        /**
           * Whether or not to override the remove button's visibility, if `remove` is set.
           */
        this.removable = true;
        /**
           * Remove button title (and assistive text).
           */
        this.removeTitle = 'Remove';
        /**
           * The event emitted when the remove button is clicked.
           */
        this.remove = new EventEmitter();
        this.linked = false;
    }
    ngOnInit() {
        this.canRemove = this.remove.observers.length > 0;
    }
    onRemove(e) {
        this.remove.emit(e);
    }
    get pillIcon() {
        return this.icon || this.avatar;
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglPill.prototype, "icon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglPill.prototype, "avatar", void 0);
__decorate([
    Input(), InputBoolean(), HostBinding('class.slds-has-error'),
    __metadata("design:type", Object)
], NglPill.prototype, "hasError", void 0);
__decorate([
    Input(), InputBoolean(),
    __metadata("design:type", Object)
], NglPill.prototype, "removable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglPill.prototype, "removeTitle", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NglPill.prototype, "remove", void 0);
__decorate([
    HostBinding('class.slds-pill_link'),
    __metadata("design:type", Object)
], NglPill.prototype, "linked", void 0);
NglPill = __decorate([
    Component({
        selector: 'ngl-pill',
        template: "<span class=\"slds-pill__icon_container\" *ngIf=\"pillIcon\">\n  <ng-container *ngIf=\"isTemplateRef(pillIcon); else defaultTpl\" [ngTemplateOutlet]=\"pillIcon\"></ng-container>\n  <ng-template #defaultTpl>\n    <ngl-icon *ngIf=\"icon; else avatarTpl\" [iconName]=\"icon\"></ngl-icon>\n    <ng-template #avatarTpl>\n      <ngl-avatar [src]=\"avatar\" variant=\"circle\"></ngl-avatar>\n    </ng-template>\n  </ng-template></span>\n<ng-container *ngIf=\"linked; else unlinked\">\n  <ng-content select=\"a\"></ng-content>\n</ng-container>\n<ng-template #unlinked><span class=\"slds-pill__label\">\n    <ng-content></ng-content></span></ng-template>\n<button class=\"slds-button slds-button_icon slds-pill__remove\" *ngIf=\"canRemove &amp;&amp; removable\" type=\"button\" [title]=\"removeTitle\" (click)=\"onRemove($event)\">\n  <svg class=\"slds-button__icon\" nglIconName=\"close\"></svg><span class=\"slds-assistive-text\" *ngIf=\"removeTitle\">{{removeTitle}}</span>\n</button>",
        changeDetection: ChangeDetectionStrategy.OnPush,
        host: {
            '[class.slds-pill]': 'true',
        }
    })
], NglPill);
export { NglPill };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlsbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9waWxscy9waWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUN2QixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFHWixXQUFXLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFVOUMsSUFBYSxPQUFPLEdBQXBCLE1BQWEsT0FBTztJQUFwQjtRQUNFLGtCQUFhLEdBQUcsYUFBYSxDQUFDO1FBVzlCOzthQUVFO1FBQzRELGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDL0U7O2FBRUU7UUFDdUIsY0FBUyxHQUFHLElBQUksQ0FBQztRQUMxQzs7YUFFRTtRQUNPLGdCQUFXLEdBQUcsUUFBUSxDQUFDO1FBQ2hDOzthQUVFO1FBQ1EsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7UUFFYixXQUFNLEdBQUcsS0FBSyxDQUFDO0lBYXRELENBQUM7SUFYQyxRQUFRO1FBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxRQUFRLENBQUMsQ0FBYTtRQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUE7QUFuQ1U7SUFBUixLQUFLLEVBQUU7O3FDQUFrQztBQUlqQztJQUFSLEtBQUssRUFBRTs7dUNBQW9DO0FBSWtCO0lBQTdELEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQzs7eUNBQWtCO0FBSXREO0lBQXhCLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRTs7MENBQWtCO0FBSWpDO0lBQVIsS0FBSyxFQUFFOzs0Q0FBd0I7QUFJdEI7SUFBVCxNQUFNLEVBQUU7O3VDQUF5QztBQUViO0lBQXBDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQzs7dUNBQWdCO0FBN0J6QyxPQUFPO0lBUm5CLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxVQUFVO1FBQ3BCLDg5QkFBMEI7UUFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsSUFBSSxFQUFFO1lBQ0osbUJBQW1CLEVBQUUsTUFBTTtTQUM1QjtLQUNGLENBQUM7R0FDVyxPQUFPLENBMENuQjtTQTFDWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBUZW1wbGF0ZVJlZixcbiAgT25Jbml0LFxuICBIb3N0QmluZGluZyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi91dGlsL2NvbnZlcnQnO1xuaW1wb3J0IHsgaXNUZW1wbGF0ZVJlZiB9IGZyb20gJy4uL3V0aWwvY2hlY2snO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtcGlsbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9waWxsLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3Muc2xkcy1waWxsXSc6ICd0cnVlJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdsUGlsbCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGlzVGVtcGxhdGVSZWYgPSBpc1RlbXBsYXRlUmVmO1xuICBjYW5SZW1vdmU6IGJvb2xlYW47XG5cbiAgLyoqXG5cdCAqIE5nbEljb24gY29tcG9uZW50IG9yIGljb25OYW1lIHRvIHNob3cgb24gdGhlIGxlZnQgb2YgdGhlIHBpbGwuXG5cdCAqL1xuICBASW5wdXQoKSBpY29uOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjx2b2lkPjtcbiAgLyoqXG5cdCAqIE5nbEF2YXRhciBjb21wb25lbnQgb3Igc3JjIHRvIHNob3cgb24gdGhlIGxlZnQgb2YgdGhlIHBpbGwuXG5cdCAqL1xuICBASW5wdXQoKSBhdmF0YXI6IHN0cmluZyB8IFRlbXBsYXRlUmVmPHZvaWQ+O1xuICAvKipcblx0ICogQXBwbGllcyB0aGUgZXJyb3Igc3R5bGUgdG8gdGhlIGNvbXBvbmVudC5cblx0ICovXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBASG9zdEJpbmRpbmcoJ2NsYXNzLnNsZHMtaGFzLWVycm9yJykgaGFzRXJyb3IgPSBmYWxzZTtcbiAgLyoqXG5cdCAqIFdoZXRoZXIgb3Igbm90IHRvIG92ZXJyaWRlIHRoZSByZW1vdmUgYnV0dG9uJ3MgdmlzaWJpbGl0eSwgaWYgYHJlbW92ZWAgaXMgc2V0LlxuXHQgKi9cbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIHJlbW92YWJsZSA9IHRydWU7XG4gIC8qKlxuXHQgKiBSZW1vdmUgYnV0dG9uIHRpdGxlIChhbmQgYXNzaXN0aXZlIHRleHQpLlxuXHQgKi9cbiAgQElucHV0KCkgcmVtb3ZlVGl0bGUgPSAnUmVtb3ZlJztcbiAgLyoqXG5cdCAqIFRoZSBldmVudCBlbWl0dGVkIHdoZW4gdGhlIHJlbW92ZSBidXR0b24gaXMgY2xpY2tlZC5cblx0ICovXG4gIEBPdXRwdXQoKSByZW1vdmUgPSBuZXcgRXZlbnRFbWl0dGVyPE1vdXNlRXZlbnQ+KCk7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zbGRzLXBpbGxfbGluaycpIGxpbmtlZCA9IGZhbHNlO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuY2FuUmVtb3ZlID0gdGhpcy5yZW1vdmUub2JzZXJ2ZXJzLmxlbmd0aCA+IDA7XG4gIH1cblxuICBvblJlbW92ZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5yZW1vdmUuZW1pdChlKTtcbiAgfVxuXG4gIGdldCBwaWxsSWNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pY29uIHx8IHRoaXMuYXZhdGFyO1xuICB9XG59XG4iXX0=