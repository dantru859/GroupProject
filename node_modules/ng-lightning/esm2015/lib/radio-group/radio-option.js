import { __decorate, __metadata } from "tslib";
import { Component, TemplateRef, Input, ContentChild, ChangeDetectionStrategy, ChangeDetectorRef, HostBinding, OnInit, AfterContentInit, OnDestroy } from '@angular/core';
import { NglRadioGroup } from './radio-group';
import { NglRadioInput } from './input/input';
let NglRadioOption = class NglRadioOption {
    constructor(radioGroup, cd) {
        this.radioGroup = radioGroup;
        this.cd = cd;
        this.subscriptions = [];
    }
    get isTypeList() {
        return this.type === 'list';
    }
    get isTypeButton() {
        return this.type === 'button';
    }
    ngOnInit() {
        this.subscriptions.push(this.radioGroup.type$.subscribe((type) => {
            this.type = type;
            this.cd.detectChanges();
        }), this.radioGroup.error$.subscribe((errorId) => {
            this.input.describedBy = errorId;
        }));
    }
    ngAfterContentInit() {
        this.input.name = this.radioGroup.uid;
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
};
NglRadioOption.ctorParameters = () => [
    { type: NglRadioGroup },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], NglRadioOption.prototype, "label", void 0);
__decorate([
    ContentChild(NglRadioInput, { static: true }),
    __metadata("design:type", NglRadioInput)
], NglRadioOption.prototype, "input", void 0);
__decorate([
    HostBinding('class.slds-radio'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglRadioOption.prototype, "isTypeList", null);
__decorate([
    HostBinding('class.slds-button'),
    HostBinding('class.slds-radio_button'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], NglRadioOption.prototype, "isTypeButton", null);
NglRadioOption = __decorate([
    Component({
        selector: 'ngl-radio-option',
        template: "\n<ng-content></ng-content>\n<label class=\"slds-radio__label\" *ngIf=\"type === 'list'\" [attr.for]=\"input.id\"><span class=\"slds-radio_faux\"></span><span class=\"slds-form-element__label\" [nglInternalOutlet]=\"label\"></span></label>\n<label class=\"slds-radio_button__label\" *ngIf=\"type === 'button'\" [attr.for]=\"input.id\"><span class=\"slds-radio_faux\" [nglInternalOutlet]=\"label\"></span></label>",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [NglRadioGroup, ChangeDetectorRef])
], NglRadioOption);
export { NglRadioOption };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tb3B0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL3JhZGlvLWdyb3VwL3JhZGlvLW9wdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsRUFDdkYsV0FBVyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTzlDLElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFLekIsWUFBb0IsVUFBeUIsRUFBVSxFQUFxQjtRQUF4RCxlQUFVLEdBQVYsVUFBVSxDQUFlO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFlcEUsa0JBQWEsR0FBbUIsRUFBRSxDQUFDO0lBZm9DLENBQUM7SUFLaEYsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBSUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztJQUNoQyxDQUFDO0lBSUQsUUFBUTtRQUNOLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUF1QixFQUFFLEVBQUU7WUFDMUQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsRUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFzQixFQUFFLEVBQUU7WUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7Q0FDRixDQUFBOztZQXBDaUMsYUFBYTtZQUFjLGlCQUFpQjs7QUFKbkU7SUFBUixLQUFLLEVBQUU7OzZDQUFrQztBQUVLO0lBQTlDLFlBQVksQ0FBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7OEJBQVEsYUFBYTs2Q0FBQztBQU9wRTtJQURDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQzs7O2dEQUcvQjtBQUlEO0lBRkMsV0FBVyxDQUFDLG1CQUFtQixDQUFDO0lBQ2hDLFdBQVcsQ0FBQyx5QkFBeUIsQ0FBQzs7O2tEQUd0QztBQWxCVSxjQUFjO0lBTDFCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsd2FBQWtDO1FBQ2xDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7cUNBTWdDLGFBQWEsRUFBYyxpQkFBaUI7R0FMakUsY0FBYyxDQXlDMUI7U0F6Q1ksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVSZWYsIElucHV0LCBDb250ZW50Q2hpbGQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgIEhvc3RCaW5kaW5nLCBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ2xSYWRpb0dyb3VwIH0gZnJvbSAnLi9yYWRpby1ncm91cCc7XG5pbXBvcnQgeyBOZ2xSYWRpb0lucHV0IH0gZnJvbSAnLi9pbnB1dC9pbnB1dCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC1yYWRpby1vcHRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcmFkaW8tb3B0aW9uLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTmdsUmFkaW9PcHRpb24gaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBDb250ZW50Q2hpbGQoTmdsUmFkaW9JbnB1dCwgeyBzdGF0aWM6IHRydWUgfSkgaW5wdXQ6IE5nbFJhZGlvSW5wdXQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByYWRpb0dyb3VwOiBOZ2xSYWRpb0dyb3VwLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICB0eXBlOiAnbGlzdCcgfCAnYnV0dG9uJztcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNsZHMtcmFkaW8nKVxuICBnZXQgaXNUeXBlTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSAnbGlzdCc7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNsZHMtYnV0dG9uJylcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zbGRzLXJhZGlvX2J1dHRvbicpXG4gIGdldCBpc1R5cGVCdXR0b24oKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ2J1dHRvbic7XG4gIH1cblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICB0aGlzLnJhZGlvR3JvdXAudHlwZSQuc3Vic2NyaWJlKCh0eXBlOiAnbGlzdCcgfCAnYnV0dG9uJykgPT4ge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH0pLFxuICAgICAgdGhpcy5yYWRpb0dyb3VwLmVycm9yJC5zdWJzY3JpYmUoKGVycm9ySWQ6IHN0cmluZyB8IG51bGwpID0+IHtcbiAgICAgICAgdGhpcy5pbnB1dC5kZXNjcmliZWRCeSA9IGVycm9ySWQ7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuaW5wdXQubmFtZSA9IHRoaXMucmFkaW9Hcm91cC51aWQ7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoczogU3Vic2NyaXB0aW9uKSA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICB9XG59XG4iXX0=