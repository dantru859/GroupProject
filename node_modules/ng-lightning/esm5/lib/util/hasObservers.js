import { EventEmitter } from '@angular/core';
export function hasObservers(output) {
    function propDecorator(target, propName) {
        var privatePropName = "$$__" + propName;
        if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
            console.warn("[ng-lightning]: The prop \"" + privatePropName + "\" already exists, it will be overridden by " + propName + " decorator.");
        }
        Object.defineProperty(target, privatePropName, {
            configurable: true,
            writable: true
        });
        Object.defineProperty(target, propName, {
            get: function () {
                if (!(this[output] instanceof EventEmitter)) {
                    throw Error("[ng-lightning] " + target.constructor.name + ": \"" + output + "\" is not an EventEmitter");
                }
                return this[output].observers.length > 0;
            },
            set: function () {
                console.warn("[ng-lightning] " + target.constructor.name + ": \"" + propName + "\" is readonly and cannot be assigned a value");
            }
        });
    }
    return propDecorator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzT2JzZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL3V0aWwvaGFzT2JzZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0MsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFjO0lBRXpDLFNBQVMsYUFBYSxDQUFDLE1BQVcsRUFBRSxRQUFnQjtRQUNsRCxJQUFNLGVBQWUsR0FBRyxTQUFPLFFBQVUsQ0FBQztRQUUxQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUU7WUFDakUsT0FBTyxDQUFDLElBQUksQ0FBQyxnQ0FBNkIsZUFBZSxvREFBOEMsUUFBUSxnQkFBYSxDQUFDLENBQUM7U0FDL0g7UUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxlQUFlLEVBQUU7WUFDN0MsWUFBWSxFQUFFLElBQUk7WUFDbEIsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7WUFDdEMsR0FBRyxFQUFIO2dCQUNFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxZQUFZLENBQUMsRUFBRTtvQkFDM0MsTUFBTSxLQUFLLENBQUMsb0JBQWtCLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxZQUFNLE1BQU0sOEJBQTBCLENBQUMsQ0FBQztpQkFDOUY7Z0JBQ0QsT0FBMkIsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ2hFLENBQUM7WUFDRCxHQUFHLEVBQUg7Z0JBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxvQkFBa0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFlBQU0sUUFBUSxrREFBOEMsQ0FBQyxDQUFDO1lBQ3RILENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzT2JzZXJ2ZXJzKG91dHB1dDogc3RyaW5nKSB7XG5cbiAgZnVuY3Rpb24gcHJvcERlY29yYXRvcih0YXJnZXQ6IGFueSwgcHJvcE5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHByaXZhdGVQcm9wTmFtZSA9IGAkJF9fJHtwcm9wTmFtZX1gO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByaXZhdGVQcm9wTmFtZSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgW25nLWxpZ2h0bmluZ106IFRoZSBwcm9wIFwiJHtwcml2YXRlUHJvcE5hbWV9XCIgYWxyZWFkeSBleGlzdHMsIGl0IHdpbGwgYmUgb3ZlcnJpZGRlbiBieSAke3Byb3BOYW1lfSBkZWNvcmF0b3IuYCk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJpdmF0ZVByb3BOYW1lLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcE5hbWUsIHtcbiAgICAgIGdldCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCEodGhpc1tvdXRwdXRdIGluc3RhbmNlb2YgRXZlbnRFbWl0dGVyKSkge1xuICAgICAgICAgIHRocm93IEVycm9yKGBbbmctbGlnaHRuaW5nXSAke3RhcmdldC5jb25zdHJ1Y3Rvci5uYW1lfTogXCIke291dHB1dH1cIiBpcyBub3QgYW4gRXZlbnRFbWl0dGVyYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICg8RXZlbnRFbWl0dGVyPGFueT4+dGhpc1tvdXRwdXRdKS5vYnNlcnZlcnMubGVuZ3RoID4gMDtcbiAgICAgIH0sXG4gICAgICBzZXQoKTogdm9pZCB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW25nLWxpZ2h0bmluZ10gJHt0YXJnZXQuY29uc3RydWN0b3IubmFtZX06IFwiJHtwcm9wTmFtZX1cIiBpcyByZWFkb25seSBhbmQgY2Fubm90IGJlIGFzc2lnbmVkIGEgdmFsdWVgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwcm9wRGVjb3JhdG9yO1xufVxuIl19