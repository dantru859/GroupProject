import { __decorate, __metadata, __param } from "tslib";
import { Component, Input, Output, ElementRef, EventEmitter, HostListener, ContentChild, ChangeDetectionStrategy, Inject, OnChanges, SimpleChanges, AfterContentInit, OnDestroy } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';
import { BlockScrollStrategy, Overlay, OverlayRef } from '@angular/cdk/overlay';
import { uniqueId } from '../util/util';
import { InputBoolean } from '../util/convert';
import { NglModalHeaderTemplate, NglModalTaglineTemplate, NglModalFooterTemplate } from './templates';
import { hasObservers } from '../util/hasObservers';
var NglModal = /** @class */ (function () {
    function NglModal(focusTrapFactory, document, overlay, element) {
        this.focusTrapFactory = focusTrapFactory;
        this.document = document;
        this.overlay = overlay;
        this.element = element;
        this.header = '';
        this.directional = false;
        this.headingId = uniqueId('modal-heading');
        this.contentId = uniqueId('modal-content');
        this.open = true;
        this.closeButtonAssistiveText = 'Close';
        this.openChange = new EventEmitter();
        this.dismissOnClickOutside = true;
        /** Element that was focused before the dialog was opened. Save this to restore upon close. */
        this.elementFocusedBeforeDialogWasOpened = null;
        this.scrollStrategy = this.overlay.scrollStrategies.block();
    }
    Object.defineProperty(NglModal.prototype, "hasHeader", {
        get: function () {
            return this.header || this.headerTpl;
        },
        enumerable: true,
        configurable: true
    });
    NglModal.prototype.close = function (evt) {
        if (evt) {
            evt.stopPropagation();
        }
        this.openChange.emit(false);
    };
    NglModal.prototype.ngOnChanges = function (changes) {
        if ('open' in changes) {
            this.handleOpen();
        }
    };
    NglModal.prototype.ngAfterContentInit = function () {
        this.handleOpen();
    };
    NglModal.prototype.clickOutside = function (evt) {
        if (!this.dismissOnClickOutside) {
            return;
        }
        var classList = evt.target.classList;
        if (classList.contains('slds-modal') || classList.contains('slds-modal__container')) {
            this.close();
        }
    };
    NglModal.prototype.ngOnDestroy = function () {
        this.handleOpen(false);
        this.scrollStrategy = null;
    };
    NglModal.prototype.modalClass = function () {
        var _a;
        return _a = {},
            _a["slds-modal_" + this.size] = !!this.size,
            _a["slds-fade-in-open"] = this.open,
            _a["slds-modal_prompt"] = !!this.prompt,
            _a;
    };
    NglModal.prototype.modalHeaderClass = function () {
        var _a;
        return _a = {},
            _a["slds-modal__header_empty"] = !this.hasHeader,
            _a["slds-theme_" + this.prompt] = !!this.prompt,
            _a;
    };
    NglModal.prototype.modalFooterClass = function () {
        var _a;
        return _a = {},
            _a["slds-modal__footer_directional"] = !!this.directional,
            _a["slds-theme_default"] = !!this.prompt,
            _a;
    };
    NglModal.prototype.handleOpen = function (open) {
        if (open === void 0) { open = this.open; }
        if (open) {
            if (this.document) {
                this.elementFocusedBeforeDialogWasOpened = this.document.activeElement;
            }
            this.container = this.overlay.create();
            // Attach the dom to overlay, the view container is not changed
            this.container.overlayElement.appendChild(this.element.nativeElement);
            this.focusTrap = this.focusTrapFactory.create(this.element.nativeElement);
            this.focusTrap.focusInitialElementWhenReady();
            this.scrollStrategy.enable();
        }
        else {
            if (this.elementFocusedBeforeDialogWasOpened && typeof this.elementFocusedBeforeDialogWasOpened.focus === 'function') {
                this.elementFocusedBeforeDialogWasOpened.focus();
            }
            if (this.container) {
                this.container.dispose();
                this.container = null;
            }
            if (this.focusTrap) {
                this.focusTrap.destroy();
            }
            this.scrollStrategy.disable();
        }
    };
    NglModal.ctorParameters = function () { return [
        { type: FocusTrapFactory },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Overlay },
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglModal.prototype, "header", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglModal.prototype, "size", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglModal.prototype, "directional", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglModal.prototype, "open", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglModal.prototype, "closeButtonAssistiveText", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglModal.prototype, "openChange", void 0);
    __decorate([
        ContentChild(NglModalHeaderTemplate),
        __metadata("design:type", NglModalHeaderTemplate)
    ], NglModal.prototype, "headerTpl", void 0);
    __decorate([
        ContentChild(NglModalTaglineTemplate),
        __metadata("design:type", NglModalTaglineTemplate)
    ], NglModal.prototype, "taglineTpl", void 0);
    __decorate([
        ContentChild(NglModalFooterTemplate),
        __metadata("design:type", NglModalFooterTemplate)
    ], NglModal.prototype, "footer", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglModal.prototype, "dismissOnClickOutside", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglModal.prototype, "prompt", void 0);
    __decorate([
        hasObservers('openChange'),
        __metadata("design:type", Boolean)
    ], NglModal.prototype, "showClose", void 0);
    __decorate([
        HostListener('keydown.esc', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], NglModal.prototype, "close", null);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], NglModal.prototype, "clickOutside", null);
    NglModal = __decorate([
        Component({
            selector: 'ngl-modal',
            template: "\n<section class=\"slds-modal\" [ngClass]=\"modalClass()\" [attr.aria-hidden]=\"!open\" [attr.aria-labelledby]=\"headingId\" [attr.aria-describedby]=\"contentId\" aria-modal=\"true\" [attr.role]=\"prompt ? 'alertdialog' : 'dialog'\" tabindex=\"-1\">\n  <div class=\"slds-modal__container\">\n    <header class=\"slds-modal__header\" [ngClass]=\"modalHeaderClass()\">\n      <button class=\"slds-button slds-button_icon slds-button_icon-inverse slds-modal__close\" *ngIf=\"showClose\" type=\"button\" (click)=\"close()\">\n        <svg class=\"slds-button__icon slds-button__icon_large\" nglIconName=\"utility:close\"></svg><span class=\"slds-assistive-text\" *ngIf=\"closeButtonAssistiveText\">{{closeButtonAssistiveText}}</span>\n      </button>\n      <ng-template #localHeader>\n        <h2 class=\"slds-text-heading_medium slds-hyphenate\" *ngIf=\"header\" [id]=\"headingId\">{{header}}</h2>\n      </ng-template>\n      <ng-template *ngIf=\"headerTpl; else localHeader\" [ngTemplateOutlet]=\"headerTpl.templateRef\" [ngTemplateOutletContext]=\"{id: headingId}\"></ng-template>\n      <p class=\"slds-m-top_x-small\" *ngIf=\"hasHeader &amp;&amp; taglineTpl\">\n        <ng-template [ngTemplateOutlet]=\"taglineTpl.templateRef\"></ng-template>\n      </p>\n    </header>\n    <div class=\"slds-modal__content\" [id]=\"contentId\" cdkScrollable>\n      <ng-content></ng-content>\n    </div>\n    <footer class=\"slds-modal__footer\" *ngIf=\"footer\" [ngClass]=\"modalFooterClass()\">\n      <ng-template [ngTemplateOutlet]=\"footer.templateRef\"></ng-template>\n    </footer>\n  </div>\n</section>\n<div class=\"slds-backdrop\" [class.slds-backdrop_open]=\"open\"></div>",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __param(1, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [FocusTrapFactory, Object, Overlay,
            ElementRef])
    ], NglModal);
    return NglModal;
}());
export { NglModal };
//# sourceMappingURL=data:application/json;base64,