import { __decorate, __metadata, __read, __spread } from "tslib";
import { Component, EventEmitter, Input, Output, ChangeDetectionStrategy } from '@angular/core';
import { InputBoolean } from '../util/convert';
var NglPagination = /** @class */ (function () {
    function NglPagination() {
        this.pages = [];
        this.pageChange = new EventEmitter();
        this.perPage = 10;
        this.limit = 0;
        this.boundaryNumbers = 0;
        this.firstText = 'First';
        this.previousText = 'Previous';
        this.nextText = 'Next';
        this.lastText = 'Last';
        this.boundaryLinks = false;
    }
    Object.defineProperty(NglPagination.prototype, "page", {
        set: function (page) {
            this.current = +page;
        },
        enumerable: true,
        configurable: true
    });
    NglPagination.prototype.hasPrevious = function () {
        return this.current > 1;
    };
    NglPagination.prototype.hasNext = function () {
        return this.current < this.totalPages;
    };
    NglPagination.prototype.goto = function (page) {
        if (page === this.current) {
            return;
        }
        this.pageChange.emit(+page);
    };
    NglPagination.prototype.ngOnChanges = function () {
        var _a, _b;
        var _this = this;
        this.totalPages = Math.ceil(+this.total / +this.perPage);
        var _c = this.limits(), start = _c.start, end = _c.end;
        this.pages = this.getPageArray(start, end);
        if (this.boundaryNumbers > 0) {
            if (start > 1) {
                var preGap = this.getPageArray(1, Math.min(start - 1, this.boundaryNumbers));
                var lastGapNumber = +preGap[preGap.length - 1].number;
                if (lastGapNumber < start - 1) {
                    this.pages.unshift(this.getGapPage(lastGapNumber, start));
                }
                (_a = this.pages).unshift.apply(_a, __spread(preGap));
            }
            if (end < this.totalPages) {
                var postGap = this.getPageArray(Math.max(this.totalPages - this.boundaryNumbers + 1, end + 1), this.totalPages);
                var firstGapNumber = +postGap[0].number;
                if (firstGapNumber > end + 1) {
                    this.pages.push(this.getGapPage(end, firstGapNumber));
                }
                (_b = this.pages).push.apply(_b, __spread(postGap));
            }
        }
        if (this.current > this.totalPages) {
            setTimeout(function () { return _this.goto(_this.totalPages); });
        }
        else if (!this.current && this.totalPages > 0) {
            setTimeout(function () { return _this.goto(1); });
        }
    };
    NglPagination.prototype.pageTrackBy = function (index, page) {
        return page.number;
    };
    Object.defineProperty(NglPagination.prototype, "start", {
        get: function () {
            return Math.min(Math.max(1 + (+this.current - 1) * +this.perPage, 0), +this.total);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPagination.prototype, "end", {
        get: function () {
            return Math.min(this.start + (+this.perPage - 1), +this.total);
        },
        enumerable: true,
        configurable: true
    });
    NglPagination.prototype.getPageArray = function (start, end) {
        var _this = this;
        return Array.apply(null, { length: end - start + 1 }).map(function (value, index) { return _this.getPage(start + index); });
    };
    NglPagination.prototype.getPage = function (number, disabled) {
        if (disabled === void 0) { disabled = false; }
        return { number: number, disabled: disabled };
    };
    NglPagination.prototype.getGapPage = function (before, after) {
        var isConsecutive = before + 1 === after - 1;
        return this.getPage(isConsecutive ? before + 1 : '...', !isConsecutive);
    };
    /**
     * Calculate first and last visible page numbers
     */
    NglPagination.prototype.limits = function () {
        var start = 1, end = this.totalPages;
        if (this.limit < 1) {
            return { start: start, end: end };
        }
        // Current page is displayed in the middle of the visible ones
        start = Math.max(+this.current - Math.floor(+this.limit / 2), 1);
        end = start + +this.limit - 1;
        // Adjust if limit is exceeded
        if (end > this.totalPages) {
            end = this.totalPages;
            start = Math.max(end - +this.limit + 1, 1);
        }
        return { start: start, end: end };
    };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NglPagination.prototype, "page", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "pageChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "total", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "perPage", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "limit", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "boundaryNumbers", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "firstText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "previousText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "nextText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "lastText", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglPagination.prototype, "boundaryLinks", void 0);
    NglPagination = __decorate([
        Component({
            selector: 'ngl-pagination',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "\n<div class=\"slds-button-group\" role=\"group\">\n  <button class=\"slds-button slds-button_neutral\" *ngIf=\"boundaryLinks\" [disabled]=\"!hasPrevious()\" (click)=\"goto(1)\">{{firstText}}</button>\n  <button class=\"slds-button slds-button_neutral\" [disabled]=\"!hasPrevious()\" (click)=\"goto(current - 1)\">{{previousText}}</button>\n  <button class=\"slds-button\" *ngFor=\"let page of pages; trackBy:pageTrackBy\" [ngClass]=\"'slds-button_' + (page.number === current ? 'brand' : 'neutral')\" (click)=\"goto(page.number)\" [disabled]=\"page.disabled\">{{page.number}}</button>\n  <button class=\"slds-button slds-button_neutral\" [disabled]=\"!hasNext()\" (click)=\"goto(current + 1)\">{{nextText}}</button>\n  <button class=\"slds-button slds-button_neutral\" *ngIf=\"boundaryLinks\" [disabled]=\"!hasNext()\" (click)=\"goto(totalPages)\">{{lastText}}</button>\n</div>",
            exportAs: 'nglPagination'
        })
    ], NglPagination);
    return NglPagination;
}());
export { NglPagination };
//# sourceMappingURL=data:application/json;base64,