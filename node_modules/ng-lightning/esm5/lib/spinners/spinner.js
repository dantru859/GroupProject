import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ElementRef, Renderer2, OnInit, OnChanges } from '@angular/core';
import { HostService } from '../common/host/host.service';
var NglSpinner = /** @class */ (function () {
    function NglSpinner(element, renderer, hostService) {
        this.element = element;
        this.renderer = renderer;
        this.hostService = hostService;
        this.renderer.addClass(this.element.nativeElement, 'slds-spinner');
        this.renderer.setAttribute(this.element.nativeElement, 'role', 'status');
    }
    NglSpinner.prototype.ngOnInit = function () {
        this.setHostClass();
    };
    NglSpinner.prototype.ngOnChanges = function () {
        this.setHostClass();
    };
    NglSpinner.prototype.setHostClass = function () {
        var _a;
        this.hostService.updateClass(this.element, (_a = {},
            _a["slds-spinner_" + (this.size || 'medium')] = true,
            _a["slds-spinner_" + this.variant] = !!this.variant,
            _a));
    };
    NglSpinner.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HostService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglSpinner.prototype, "size", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglSpinner.prototype, "variant", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglSpinner.prototype, "alternativeText", void 0);
    NglSpinner = __decorate([
        Component({
            selector: 'ngl-spinner',
            template: "<span class=\"slds-assistive-text\" *ngIf=\"alternativeText\">{{ alternativeText }}</span>\n<div class=\"slds-spinner__dot-a\"></div>\n<div class=\"slds-spinner__dot-b\"></div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [HostService]
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2, HostService])
    ], NglSpinner);
    return NglSpinner;
}());
export { NglSpinner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9zcGlubmVycy9zcGlubmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBUTFEO0lBaUJFLG9CQUFvQixPQUFtQixFQUFVLFFBQW1CLEVBQVUsV0FBd0I7UUFBbEYsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUNwRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELDZCQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELGdDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLGlDQUFZLEdBQXBCOztRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQ3ZDLEdBQUMsbUJBQWdCLElBQUksQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFFLElBQUcsSUFBSTtZQUMvQyxHQUFDLGtCQUFnQixJQUFJLENBQUMsT0FBUyxJQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTztnQkFDaEQsQ0FBQztJQUNMLENBQUM7O2dCQWxCNEIsVUFBVTtnQkFBb0IsU0FBUztnQkFBdUIsV0FBVzs7SUFaN0Y7UUFBUixLQUFLLEVBQUU7OzRDQUE4RDtJQUs3RDtRQUFSLEtBQUssRUFBRTs7K0NBQThCO0lBSzdCO1FBQVIsS0FBSyxFQUFFOzt1REFBeUI7SUFmdEIsVUFBVTtRQU50QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsYUFBYTtZQUN2Qiw0TEFBNkI7WUFDN0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDO1NBQ3pCLENBQUM7eUNBa0I2QixVQUFVLEVBQW9CLFNBQVMsRUFBdUIsV0FBVztPQWpCM0YsVUFBVSxDQW9DdEI7SUFBRCxpQkFBQztDQUFBLEFBcENELElBb0NDO1NBcENZLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkluaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdFNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vaG9zdC9ob3N0LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtc3Bpbm5lcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9zcGlubmVyLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbSG9zdFNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xTcGlubmVyIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgc3Bpbm5lci5cbiAgICovXG4gIEBJbnB1dCgpIHNpemU6ICd4eC1zbWFsbCcgfCAneC1zbWFsbCcgfCAgJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJztcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgY2hhbmdlcyB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgc3Bpbm5lci5cbiAgICovXG4gIEBJbnB1dCgpIHZhcmlhbnQ6ICdicmFuZCcgfCAnaW52ZXJzZSc7XG5cbiAgLyoqXG4gICAqIFRoZSBhbHRlcm5hdGl2ZSB0ZXh0IHVzZWQgdG8gZGVzY3JpYmUgdGhlIHJlYXNvbiBmb3IgdGhlIHdhaXQgYW5kIG5lZWQgZm9yIGEgc3Bpbm5lci5cbiAgICovXG4gIEBJbnB1dCgpIGFsdGVybmF0aXZlVGV4dDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGhvc3RTZXJ2aWNlOiBIb3N0U2VydmljZSkge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzbGRzLXNwaW5uZXInKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3JvbGUnLCAnc3RhdHVzJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldEhvc3RDbGFzcygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5zZXRIb3N0Q2xhc3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0SG9zdENsYXNzKCkge1xuICAgIHRoaXMuaG9zdFNlcnZpY2UudXBkYXRlQ2xhc3ModGhpcy5lbGVtZW50LCB7XG4gICAgICBbYHNsZHMtc3Bpbm5lcl8ke3RoaXMuc2l6ZSB8fCAnbWVkaXVtJ31gXTogdHJ1ZSxcbiAgICAgIFtgc2xkcy1zcGlubmVyXyR7dGhpcy52YXJpYW50fWBdOiAhIXRoaXMudmFyaWFudCxcbiAgICB9KTtcbiAgfVxufVxuIl19