import { __decorate, __metadata, __read, __spread } from "tslib";
import { Directive, Input, ElementRef, TemplateRef, ViewContainerRef, OnDestroy, OnChanges, SimpleChanges, Output, EventEmitter, Renderer2, HostListener } from '@angular/core';
import { OverlayRef, Overlay, FlexibleConnectedPositionStrategy } from '@angular/cdk/overlay';
import { ESCAPE } from '@angular/cdk/keycodes';
import { ComponentPortal } from '@angular/cdk/portal';
import { Subject, merge } from 'rxjs';
import { map, filter, mapTo, distinctUntilChanged } from 'rxjs/operators';
import { NglPopover } from './popover';
import { POSITION_MAP, DEFAULT_POPOVER_POSITIONS, getPlacementName } from '../util/overlay-position';
import { hasObservers } from '../util/hasObservers';
import { toBoolean, InputBoolean } from '../util/convert';
var NglPopoverTrigger = /** @class */ (function () {
    function NglPopoverTrigger(element, renderer, viewContainerRef, overlay) {
        this.element = element;
        this.renderer = renderer;
        this.viewContainerRef = viewContainerRef;
        this.overlay = overlay;
        /**
         * Close button title (and assistive text).
         */
        this.closeTitle = 'Close dialog';
        /**
           * Whether or not to override the close button's visibility, if `nglPopoverOpenChange` is set.
           */
        this.closeVisible = true;
        /** Emit an event when actual popover is shown or hidden */
        this.nglPopoverOpenChange = new EventEmitter();
        /** Names of properties that should be proxy to child component. */
        this.needProxyProperties = new Set([
            'template',
            'header',
            'footer',
            'placement',
            'variant',
            'size',
            'closeTitle',
            'canClose',
            'popoverClass',
            'closeVisible',
        ]);
        this._placement = 'top';
        this.backdrop = new Subject();
        this.globalClickEventUnsubscriber = null;
        this.clickEventUnsubscriber = null;
    }
    Object.defineProperty(NglPopoverTrigger.prototype, "placement", {
        get: function () {
            return this._placement;
        },
        /**
         * Position relative to host element.
         */
        set: function (_placement) {
            _placement = _placement || 'top';
            if (_placement === this._placement) {
                return;
            }
            this._placement = _placement;
            if (this.overlayRef) {
                this.updatePosition();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglPopoverTrigger.prototype, "nglOpen", {
        get: function () {
            return this._open;
        },
        /**
         * Whether the floating popover is visible.
         */
        set: function (_open) {
            _open = toBoolean(_open) && (['backdrop', 'x', 'escape'].indexOf(_open) === -1);
            _open ? this.create() : this.detach();
            this._open = _open;
        },
        enumerable: true,
        configurable: true
    });
    NglPopoverTrigger.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.nglOpen && !changes.nglOpen.firstChange) {
            var open_1 = changes.nglOpen.currentValue;
            if (!toBoolean(open_1) || open_1 === 'x' || open_1 === 'escape') {
                this.element.nativeElement.focus();
            }
        }
        if (this.nglOpen) {
            this.updateProxies(changes);
            Promise.resolve().then(function () {
                if (_this.overlayRef) {
                    _this.overlayRef.updatePosition();
                }
            });
            this.popover.markForCheck();
        }
    };
    NglPopoverTrigger.prototype.onclick = function (evt) {
        evt.preventDefault();
        this.toggle();
    };
    NglPopoverTrigger.prototype.ngOnDestroy = function () {
        this.detach();
        this.close();
    };
    NglPopoverTrigger.prototype.open = function () {
        if (!this.nglOpen) {
            this.nglPopoverOpenChange.emit(true);
        }
    };
    NglPopoverTrigger.prototype.close = function (reason) {
        if (reason === void 0) { reason = false; }
        if (this.nglOpen) {
            this.nglPopoverOpenChange.emit(reason);
        }
    };
    NglPopoverTrigger.prototype.toggle = function () {
        this.nglOpen ? this.close() : this.open();
    };
    NglPopoverTrigger.prototype.create = function () {
        var _this = this;
        if (this.nglOpen) {
            return;
        }
        this.detach();
        var overlayRef = this.createOverlay();
        this.portal = this.portal || new ComponentPortal(NglPopover, this.viewContainerRef);
        this.popover = overlayRef.attach(this.portal).instance;
        this.needProxyProperties.forEach(function (property) { return _this.updatePopover(property, _this[property]); });
        this.popover.markForCheck();
        this.clearGlobalClickTimeout();
        this.globalClickTimeout = setTimeout(function () {
            _this.subscribeToClickEvents();
        });
        this.closeSubscription = this.popoverClosingActions()
            .subscribe(function (reason) { return _this.close(reason); });
    };
    /** Detaches the currently attached popover. */
    NglPopoverTrigger.prototype.detach = function () {
        if (this.overlayRef) {
            this.overlayRef.detach();
            this.overlayRef.dispose();
            this.overlayRef = null;
        }
        this.unsubscribeFromClickEvents();
        if (this.closeSubscription) {
            this.closeSubscription.unsubscribe();
            this.closeSubscription = null;
        }
        if (this.positionChangesSubscription) {
            this.positionChangesSubscription.unsubscribe();
            this.positionChangesSubscription = null;
        }
        this.popover = null;
    };
    /** Create the overlay config and position strategy */
    NglPopoverTrigger.prototype.createOverlay = function () {
        var _this = this;
        if (this.overlayRef) {
            return this.overlayRef;
        }
        // Create connected position strategy that listens for scroll events to reposition.
        var strategy = this.overlay.position()
            .flexibleConnectedTo(this.element)
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withPush(false);
        this.positionChangesSubscription = strategy.positionChanges
            .pipe(map(function (change) { return getPlacementName(change, _this.placement); }), distinctUntilChanged())
            .subscribe(function (placement) {
            _this.updatePosition();
            _this.updatePopover('placement', placement);
            _this.popover.markForCheck();
        });
        this.overlayRef = this.overlay.create({
            positionStrategy: strategy,
            scrollStrategy: this.overlay.scrollStrategies.reposition(),
        });
        this.updatePosition();
        return this.overlayRef;
    };
    /** Updates the position of the current popover. */
    NglPopoverTrigger.prototype.updatePosition = function () {
        var position = this.overlayRef.getConfig().positionStrategy;
        position.withPositions(__spread([
            POSITION_MAP[this.placement].position
        ], DEFAULT_POPOVER_POSITIONS));
    };
    NglPopoverTrigger.prototype.updatePopover = function (key, value) {
        this.popover[key] = value;
    };
    /** Set inputs of child components when this component's inputs change. */
    NglPopoverTrigger.prototype.updateProxies = function (changes) {
        var _this = this;
        Object.keys(changes)
            .filter(function (key) { return _this.needProxyProperties.has(key); })
            .forEach(function (key) { return _this.updatePopover(key, _this[key]); });
    };
    /** Returns a stream that emits whenever an action that should close the popover occurs. */
    NglPopoverTrigger.prototype.popoverClosingActions = function () {
        var backdrop = this.backdrop.pipe(mapTo('backdrop'));
        var close = this.popover.close.pipe(mapTo('x'));
        var escape = this.overlayRef.keydownEvents().pipe(filter(function (event) { return event.keyCode === ESCAPE; }), mapTo('escape'));
        return merge(backdrop, close, escape);
    };
    NglPopoverTrigger.prototype.handleGlobalClickEvent = function ($event) {
        if ($event.$nglStop) {
            return;
        }
        this.backdrop.next();
    };
    NglPopoverTrigger.prototype.subscribeToClickEvents = function () {
        this.unsubscribeFromClickEvents();
        // Prevent document listener to close it, since click happened inside
        this.clickEventUnsubscriber = this.renderer.listen(this.popover.element.nativeElement, 'click', function ($event) { return $event.$nglStop = true; });
        this.globalClickEventUnsubscriber = this.renderer.listen('document', 'click', this.handleGlobalClickEvent.bind(this));
    };
    NglPopoverTrigger.prototype.unsubscribeFromClickEvents = function () {
        if (this.clickEventUnsubscriber) {
            this.clickEventUnsubscriber();
            this.clickEventUnsubscriber = null;
        }
        if (this.globalClickEventUnsubscriber) {
            this.globalClickEventUnsubscriber();
            this.globalClickEventUnsubscriber = null;
        }
    };
    NglPopoverTrigger.prototype.clearGlobalClickTimeout = function () {
        clearTimeout(this.globalClickTimeout);
    };
    NglPopoverTrigger.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: Overlay }
    ]; };
    __decorate([
        Input('nglPopover'),
        __metadata("design:type", Object)
    ], NglPopoverTrigger.prototype, "template", void 0);
    __decorate([
        Input('nglPopoverHeader'),
        __metadata("design:type", Object)
    ], NglPopoverTrigger.prototype, "header", void 0);
    __decorate([
        Input('nglPopoverFooter'),
        __metadata("design:type", Object)
    ], NglPopoverTrigger.prototype, "footer", void 0);
    __decorate([
        Input('nglPopoverVariant'),
        __metadata("design:type", String)
    ], NglPopoverTrigger.prototype, "variant", void 0);
    __decorate([
        Input('nglPopoverSize'),
        __metadata("design:type", String)
    ], NglPopoverTrigger.prototype, "size", void 0);
    __decorate([
        Input('nglPopoverPlacement'),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NglPopoverTrigger.prototype, "placement", null);
    __decorate([
        Input('nglPopoverOpen'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NglPopoverTrigger.prototype, "nglOpen", null);
    __decorate([
        Input('nglPopoverCloseTitle'),
        __metadata("design:type", Object)
    ], NglPopoverTrigger.prototype, "closeTitle", void 0);
    __decorate([
        Input('nglPopoverClass'),
        __metadata("design:type", Object)
    ], NglPopoverTrigger.prototype, "popoverClass", void 0);
    __decorate([
        Input('nglPopoverCloseVisible'), InputBoolean(),
        __metadata("design:type", Object)
    ], NglPopoverTrigger.prototype, "closeVisible", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglPopoverTrigger.prototype, "nglPopoverOpenChange", void 0);
    __decorate([
        hasObservers('nglPopoverOpenChange'),
        __metadata("design:type", Boolean)
    ], NglPopoverTrigger.prototype, "canClose", void 0);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], NglPopoverTrigger.prototype, "onclick", null);
    NglPopoverTrigger = __decorate([
        Directive({
            selector: '[nglPopover]',
            exportAs: 'nglPopover',
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            ViewContainerRef,
            Overlay])
    ], NglPopoverTrigger);
    return NglPopoverTrigger;
}());
export { NglPopoverTrigger };
//# sourceMappingURL=data:application/json;base64,