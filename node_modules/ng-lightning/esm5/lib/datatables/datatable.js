import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectorRef, ContentChild, ContentChildren, QueryList, HostBinding, Output, EventEmitter, AfterContentInit, OnDestroy } from '@angular/core';
import { NglDatatableColumn } from './column';
import { NglDatatableLoadingOverlay, NglDatatableNoRowsOverlay } from './overlays';
var NglDatatable = /** @class */ (function () {
    function NglDatatable(detector) {
        var _this = this;
        this.detector = detector;
        this.data = [];
        this.sortChange = new EventEmitter();
        this.loading = false;
        this.rowClick = new EventEmitter();
        this.dataTrackBy = function (index, data) {
            return _this.trackByKey ? data[_this.trackByKey] : index;
        };
    }
    Object.defineProperty(NglDatatable.prototype, "showLoading", {
        get: function () {
            return this.loading && this.loadingOverlay;
        },
        enumerable: true,
        configurable: true
    });
    NglDatatable.prototype.columnTrackBy = function (index, column) {
        return column.key || index;
    };
    NglDatatable.prototype.onColumnSort = function (column, order) {
        var key = column.key;
        if (!key) {
            throw new Error("ng-lightning: No \"key\" property is set for sortable column \"" + column.heading + "\"");
        }
        this.sortChange.emit({ key: key, order: order });
    };
    NglDatatable.prototype.getColumnSortOrder = function (column) {
        return this.sort && column.key === this.sort.key ? this.sort.order : null;
    };
    NglDatatable.prototype.onRowClick = function (event, data) {
        this.rowClick.emit({ event: event, data: data });
    };
    NglDatatable.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._columnsSubscription = this.columns.changes.subscribe(function () { return _this.detector.markForCheck(); });
    };
    NglDatatable.prototype.ngOnDestroy = function () {
        if (this._columnsSubscription) {
            this._columnsSubscription.unsubscribe();
            this._columnsSubscription = null;
        }
    };
    NglDatatable.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglDatatable.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatatable.prototype, "trackByKey", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglDatatable.prototype, "sort", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglDatatable.prototype, "sortChange", void 0);
    __decorate([
        HostBinding('class.slds-is-relative'),
        Input(),
        __metadata("design:type", Object)
    ], NglDatatable.prototype, "loading", void 0);
    __decorate([
        ContentChild(NglDatatableLoadingOverlay),
        __metadata("design:type", NglDatatableLoadingOverlay)
    ], NglDatatable.prototype, "loadingOverlay", void 0);
    __decorate([
        ContentChild(NglDatatableNoRowsOverlay),
        __metadata("design:type", NglDatatableNoRowsOverlay)
    ], NglDatatable.prototype, "noRowsOverlay", void 0);
    __decorate([
        ContentChildren(NglDatatableColumn),
        __metadata("design:type", QueryList)
    ], NglDatatable.prototype, "columns", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglDatatable.prototype, "rowClick", void 0);
    NglDatatable = __decorate([
        Component({
            // tslint:disable-next-line:component-selector
            selector: 'table[ngl-datatable]',
            template: "\n<thead>\n  <tr class=\"slds-line-height_reset\">\n    <th *ngFor=\"let col of columns; trackBy:columnTrackBy\" nglDatatableHead scope=\"col\" [heading]=\"col.heading\" [headingTpl]=\"col.headingTpl?.templateRef\" [sortable]=\"col.sortable\" [sortOrder]=\"getColumnSortOrder(col)\" (sort)=\"onColumnSort(col, $event)\" [ngClass]=\"col.headClass\"></th>\n  </tr>\n</thead>\n<tbody>\n  <ng-template #noData>\n    <tr>\n      <td [attr.colspan]=\"columns.length\">\n        <ng-template [ngTemplateOutlet]=\"noRowsOverlay?.templateRef\"></ng-template>\n      </td>\n    </tr>\n  </ng-template>\n  <ng-container *ngIf=\"data &amp;&amp; data.length &gt; 0; else noData\">\n    <tr *ngFor=\"let d of data; let i = index; trackBy:dataTrackBy\" (click)=\"onRowClick($event, d)\">\n      <td *ngFor=\"let col of columns; trackBy:columnTrackBy\" [ngClass]=\"col.cellClass\" nglDatatatableCell_ [row]=\"d\" [column]=\"col\" [index]=\"i\"></td>\n    </tr>\n  </ng-container>\n</tbody>\n<div class=\"ngl-datatable-loading slds-align_absolute-center\" *ngIf=\"showLoading\">\n  <ng-template [ngTemplateOutlet]=\"loadingOverlay.templateRef\"></ng-template>\n</div>",
            host: {
                '[class.slds-table]': 'true',
            },
            styles: ["\n    .ngl-datatable-loading {\n      position: absolute;\n      z-index: 1;\n      top: 0; left: 0; right: 0; bottom: 0;\n      background: rgba(255, 255, 255, 0.5)\n    }\n  "]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], NglDatatable);
    return NglDatatable;
}());
export { NglDatatable };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2RhdGF0YWJsZXMvZGF0YXRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFDN0UsV0FBVyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUMvRCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDOUMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBNEJuRjtJQXlCRSxzQkFBb0IsUUFBMkI7UUFBL0MsaUJBQW1EO1FBQS9CLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBdkJ0QyxTQUFJLEdBQVUsRUFBRSxDQUFDO1FBSWhCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBcUIsQ0FBQztRQUdwRCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBWWYsYUFBUSxHQUFHLElBQUksWUFBWSxFQUF5QixDQUFDO1FBVS9ELGdCQUFXLEdBQUcsVUFBQyxLQUFhLEVBQUUsSUFBUztZQUNyQyxPQUFPLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN6RCxDQUFDLENBQUE7SUFSaUQsQ0FBQztJQVpuRCxzQkFBSSxxQ0FBVzthQUFmO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDN0MsQ0FBQzs7O09BQUE7SUFZRCxvQ0FBYSxHQUFiLFVBQWMsS0FBYSxFQUFFLE1BQTBCO1FBQ3JELE9BQU8sTUFBTSxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQU1ELG1DQUFZLEdBQVosVUFBYSxNQUEwQixFQUFFLEtBQXFCO1FBQzVELElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsb0VBQStELE1BQU0sQ0FBQyxPQUFPLE9BQUcsQ0FBQyxDQUFDO1NBQ25HO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBQyxHQUFHLEtBQUEsRUFBRSxLQUFLLE9BQUEsRUFBQyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELHlDQUFrQixHQUFsQixVQUFtQixNQUEwQjtRQUMzQyxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM1RSxDQUFDO0lBRUQsaUNBQVUsR0FBVixVQUFXLEtBQVksRUFBRSxJQUFTO1FBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxPQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCx5Q0FBa0IsR0FBbEI7UUFBQSxpQkFFQztRQURDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLEVBQTVCLENBQTRCLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQsa0NBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzdCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN4QyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQzs7Z0JBbkM2QixpQkFBaUI7O0lBdkJ0QztRQUFSLEtBQUssRUFBRTs7OENBQWtCO0lBQ2pCO1FBQVIsS0FBSyxFQUFFOztvREFBb0I7SUFFbkI7UUFBUixLQUFLLEVBQUU7OzhDQUF5QjtJQUN2QjtRQUFULE1BQU0sRUFBRTs7b0RBQW9EO0lBR3BEO1FBRFIsV0FBVyxDQUFDLHdCQUF3QixDQUFDO1FBQ3JDLEtBQUssRUFBRTs7aURBQWlCO0lBRWlCO1FBQXpDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQztrQ0FBaUIsMEJBQTBCO3dEQUFDO0lBTTVDO1FBQXhDLFlBQVksQ0FBQyx5QkFBeUIsQ0FBQztrQ0FBZ0IseUJBQXlCO3VEQUFDO0lBRTdDO1FBQXBDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQztrQ0FBVSxTQUFTO2lEQUFxQjtJQUVsRTtRQUFULE1BQU0sRUFBRTs7a0RBQXNEO0lBckJwRCxZQUFZO1FBaEJ4QixTQUFTLENBQUM7WUFDVCw4Q0FBOEM7WUFDOUMsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQywwb0NBQStCO1lBQy9CLElBQUksRUFBRTtnQkFDSixvQkFBb0IsRUFBRSxNQUFNO2FBQzdCO3FCQUNRLGtMQU9SO1NBQ0YsQ0FBQzt5Q0EwQjhCLGlCQUFpQjtPQXpCcEMsWUFBWSxDQTZEeEI7SUFBRCxtQkFBQztDQUFBLEFBN0RELElBNkRDO1NBN0RZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsIElucHV0LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29udGVudENoaWxkLCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCxcbiAgSG9zdEJpbmRpbmcsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5nbERhdGF0YWJsZUNvbHVtbiB9IGZyb20gJy4vY29sdW1uJztcbmltcG9ydCB7IE5nbERhdGF0YWJsZUxvYWRpbmdPdmVybGF5LCBOZ2xEYXRhdGFibGVOb1Jvd3NPdmVybGF5IH0gZnJvbSAnLi9vdmVybGF5cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5nbERhdGF0YWJsZVNvcnQge1xuICBrZXk6IHN0cmluZztcbiAgb3JkZXI6ICdhc2MnIHwgJ2Rlc2MnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElOZ2xEYXRhdGFibGVSb3dDbGljayB7XG4gIGV2ZW50OiBFdmVudDtcbiAgZGF0YTogYW55O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3RhYmxlW25nbC1kYXRhdGFibGVdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RhdGF0YWJsZS5odG1sJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3Muc2xkcy10YWJsZV0nOiAndHJ1ZScsXG4gIH0sXG4gIHN0eWxlczogW2BcbiAgICAubmdsLWRhdGF0YWJsZS1sb2FkaW5nIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHotaW5kZXg6IDE7XG4gICAgICB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwOyBib3R0b206IDA7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSlcbiAgICB9XG4gIGBdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xEYXRhdGFibGUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIGRhdGE6IGFueVtdID0gW107XG4gIEBJbnB1dCgpIHRyYWNrQnlLZXk6IHN0cmluZztcblxuICBASW5wdXQoKSBzb3J0OiBJTmdsRGF0YXRhYmxlU29ydDtcbiAgQE91dHB1dCgpIHNvcnRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPElOZ2xEYXRhdGFibGVTb3J0PigpO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2xkcy1pcy1yZWxhdGl2ZScpXG4gIEBJbnB1dCgpIGxvYWRpbmcgPSBmYWxzZTtcblxuICBAQ29udGVudENoaWxkKE5nbERhdGF0YWJsZUxvYWRpbmdPdmVybGF5KSBsb2FkaW5nT3ZlcmxheTogTmdsRGF0YXRhYmxlTG9hZGluZ092ZXJsYXk7XG5cbiAgZ2V0IHNob3dMb2FkaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmxvYWRpbmcgJiYgdGhpcy5sb2FkaW5nT3ZlcmxheTtcbiAgfVxuXG4gIEBDb250ZW50Q2hpbGQoTmdsRGF0YXRhYmxlTm9Sb3dzT3ZlcmxheSkgbm9Sb3dzT3ZlcmxheTogTmdsRGF0YXRhYmxlTm9Sb3dzT3ZlcmxheTtcblxuICBAQ29udGVudENoaWxkcmVuKE5nbERhdGF0YWJsZUNvbHVtbikgY29sdW1uczogUXVlcnlMaXN0PE5nbERhdGF0YWJsZUNvbHVtbj47XG5cbiAgQE91dHB1dCgpIHJvd0NsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxJTmdsRGF0YXRhYmxlUm93Q2xpY2s+KCk7XG5cbiAgcHJpdmF0ZSBfY29sdW1uc1N1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIGNvbHVtblRyYWNrQnkoaW5kZXg6IG51bWJlciwgY29sdW1uOiBOZ2xEYXRhdGFibGVDb2x1bW4pIHtcbiAgICByZXR1cm4gY29sdW1uLmtleSB8fCBpbmRleDtcbiAgfVxuXG4gIGRhdGFUcmFja0J5ID0gKGluZGV4OiBudW1iZXIsIGRhdGE6IGFueSkgPT4ge1xuICAgIHJldHVybiB0aGlzLnRyYWNrQnlLZXkgPyBkYXRhW3RoaXMudHJhY2tCeUtleV0gOiBpbmRleDtcbiAgfVxuXG4gIG9uQ29sdW1uU29ydChjb2x1bW46IE5nbERhdGF0YWJsZUNvbHVtbiwgb3JkZXI6ICdhc2MnIHwgJ2Rlc2MnKSB7XG4gICAgY29uc3Qga2V5ID0gY29sdW1uLmtleTtcbiAgICBpZiAoIWtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBuZy1saWdodG5pbmc6IE5vIFwia2V5XCIgcHJvcGVydHkgaXMgc2V0IGZvciBzb3J0YWJsZSBjb2x1bW4gXCIke2NvbHVtbi5oZWFkaW5nfVwiYCk7XG4gICAgfVxuICAgIHRoaXMuc29ydENoYW5nZS5lbWl0KHtrZXksIG9yZGVyfSk7XG4gIH1cblxuICBnZXRDb2x1bW5Tb3J0T3JkZXIoY29sdW1uOiBOZ2xEYXRhdGFibGVDb2x1bW4pIHtcbiAgICByZXR1cm4gdGhpcy5zb3J0ICYmIGNvbHVtbi5rZXkgPT09IHRoaXMuc29ydC5rZXkgPyB0aGlzLnNvcnQub3JkZXIgOiBudWxsO1xuICB9XG5cbiAgb25Sb3dDbGljayhldmVudDogRXZlbnQsIGRhdGE6IGFueSkge1xuICAgIHRoaXMucm93Q2xpY2suZW1pdCh7IGV2ZW50LCBkYXRhIH0pO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuX2NvbHVtbnNTdWJzY3JpcHRpb24gPSB0aGlzLmNvbHVtbnMuY2hhbmdlcy5zdWJzY3JpYmUoKCkgPT4gdGhpcy5kZXRlY3Rvci5tYXJrRm9yQ2hlY2soKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5fY29sdW1uc1N1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5fY29sdW1uc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5fY29sdW1uc1N1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9XG59XG4iXX0=