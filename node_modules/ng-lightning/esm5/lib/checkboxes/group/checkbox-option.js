import { __decorate, __metadata } from "tslib";
import { Component, TemplateRef, Input, ContentChild, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef } from '@angular/core';
import { NglCheckboxInput } from '../input/input';
import { HostService } from '../../common/host/host.service';
var NglCheckboxOption = /** @class */ (function () {
    function NglCheckboxOption(cd, element, hostService) {
        this.cd = cd;
        this.element = element;
        this.hostService = hostService;
    }
    Object.defineProperty(NglCheckboxOption.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (type) {
            this._type = type;
            this.setHostClass();
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    NglCheckboxOption.prototype.setError = function (id) {
        this.input.describedBy = id;
    };
    NglCheckboxOption.prototype.setHostClass = function () {
        var _a;
        this.hostService.updateClass(this.element, (_a = {},
            _a["slds-checkbox"] = this.type === 'list',
            _a["slds-button"] = this.type === 'button',
            _a["slds-checkbox_button"] = this.type === 'button',
            _a));
    };
    NglCheckboxOption.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: HostService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCheckboxOption.prototype, "label", void 0);
    __decorate([
        ContentChild(NglCheckboxInput, { static: true }),
        __metadata("design:type", NglCheckboxInput)
    ], NglCheckboxOption.prototype, "input", void 0);
    NglCheckboxOption = __decorate([
        Component({
            selector: 'ngl-checkbox-option',
            template: "\n<ng-content></ng-content>\n<label class=\"slds-checkbox__label\" *ngIf=\"type === 'list'\" [attr.for]=\"input.id\"><span class=\"slds-checkbox_faux\"></span><span class=\"slds-form-element__label\" [nglInternalOutlet]=\"label\"></span></label>\n<label class=\"slds-checkbox_button__label\" *ngIf=\"type === 'button'\" [attr.for]=\"input.id\"><span class=\"slds-checkbox_faux\" [nglInternalOutlet]=\"label\"></span></label>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [HostService]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef, HostService])
    ], NglCheckboxOption);
    return NglCheckboxOption;
}());
export { NglCheckboxOption };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtb3B0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NoZWNrYm94ZXMvZ3JvdXAvY2hlY2tib3gtb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFRN0Q7SUFLRSwyQkFBb0IsRUFBcUIsRUFBVSxPQUFtQixFQUFVLFdBQXdCO1FBQXBGLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFhO0lBQUcsQ0FBQztJQUU1RyxzQkFBSSxtQ0FBSTthQUtSO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7YUFQRCxVQUFTLElBQVk7WUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDbEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7SUFPRCxvQ0FBUSxHQUFSLFVBQVMsRUFBVTtRQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVPLHdDQUFZLEdBQXBCOztRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQ3ZDLEdBQUMsZUFBZSxJQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTTtZQUN2QyxHQUFDLGFBQWEsSUFBRyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVE7WUFDdkMsR0FBQyxzQkFBc0IsSUFBRyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVE7Z0JBQ2hELENBQUM7SUFDTCxDQUFDOztnQkF2QnVCLGlCQUFpQjtnQkFBbUIsVUFBVTtnQkFBdUIsV0FBVzs7SUFKL0Y7UUFBUixLQUFLLEVBQUU7O29EQUFrQztJQUVRO1FBQWpELFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrQ0FBUSxnQkFBZ0I7b0RBQUM7SUFIL0QsaUJBQWlCO1FBTjdCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxxQkFBcUI7WUFDL0Isb2JBQXFDO1lBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1lBQy9DLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQztTQUN6QixDQUFDO3lDQU13QixpQkFBaUIsRUFBbUIsVUFBVSxFQUF1QixXQUFXO09BTDdGLGlCQUFpQixDQThCN0I7SUFBRCx3QkFBQztDQUFBLEFBOUJELElBOEJDO1NBOUJZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVGVtcGxhdGVSZWYsIElucHV0LCBDb250ZW50Q2hpbGQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdsQ2hlY2tib3hJbnB1dCB9IGZyb20gJy4uL2lucHV0L2lucHV0JztcbmltcG9ydCB7IEhvc3RTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29tbW9uL2hvc3QvaG9zdC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmdsLWNoZWNrYm94LW9wdGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jaGVja2JveC1vcHRpb24uaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFtIb3N0U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIE5nbENoZWNrYm94T3B0aW9uIHtcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgQENvbnRlbnRDaGlsZChOZ2xDaGVja2JveElucHV0LCB7IHN0YXRpYzogdHJ1ZSB9KSBpbnB1dDogTmdsQ2hlY2tib3hJbnB1dDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIGhvc3RTZXJ2aWNlOiBIb3N0U2VydmljZSkge31cblxuICBzZXQgdHlwZSh0eXBlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgICB0aGlzLnNldEhvc3RDbGFzcygpO1xuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgcHJpdmF0ZSBfdHlwZTogc3RyaW5nO1xuXG4gIHNldEVycm9yKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmlucHV0LmRlc2NyaWJlZEJ5ID0gaWQ7XG4gIH1cblxuICBwcml2YXRlIHNldEhvc3RDbGFzcygpIHtcbiAgICB0aGlzLmhvc3RTZXJ2aWNlLnVwZGF0ZUNsYXNzKHRoaXMuZWxlbWVudCwge1xuICAgICAgW2BzbGRzLWNoZWNrYm94YF06IHRoaXMudHlwZSA9PT0gJ2xpc3QnLFxuICAgICAgW2BzbGRzLWJ1dHRvbmBdOiB0aGlzLnR5cGUgPT09ICdidXR0b24nLFxuICAgICAgW2BzbGRzLWNoZWNrYm94X2J1dHRvbmBdOiB0aGlzLnR5cGUgPT09ICdidXR0b24nLFxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==