import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ContentChild, ChangeDetectorRef, AfterContentInit, TemplateRef } from '@angular/core';
import { NglCheckboxInput } from '../input/input';
var NglCheckboxButton = /** @class */ (function () {
    function NglCheckboxButton(cd) {
        this.cd = cd;
    }
    NglCheckboxButton.prototype.ngAfterContentInit = function () {
        if (!this.input) {
            throw Error("[ng-lightning] Couldn't find an <input type=\"checkbox\"> with [ngl] attribute inside " + this);
        }
        this._uid = this.input.id;
        this.cd.detectChanges();
        this.input.addClass('slds-assistive-text');
    };
    NglCheckboxButton.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ContentChild(NglCheckboxInput, { static: true }),
        __metadata("design:type", NglCheckboxInput)
    ], NglCheckboxButton.prototype, "input", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCheckboxButton.prototype, "label", void 0);
    NglCheckboxButton = __decorate([
        Component({
            selector: 'ngl-checkbox-button',
            template: "\n<ng-content></ng-content>\n<label class=\"slds-checkbox_faux\" [attr.for]=\"_uid\"><span class=\"slds-assistive-text\" [nglInternalOutlet]=\"label\"></span></label>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                '[class.slds-checkbox_add-button]': 'true',
            }
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], NglCheckboxButton);
    return NglCheckboxButton;
}());
export { NglCheckboxButton };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtYnV0dG9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NoZWNrYm94ZXMvYnV0dG9uL2NoZWNrYm94LWJ1dHRvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxSSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVVsRDtJQU9FLDJCQUFvQixFQUFxQjtRQUFyQixPQUFFLEdBQUYsRUFBRSxDQUFtQjtJQUFHLENBQUM7SUFFN0MsOENBQWtCLEdBQWxCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixNQUFNLEtBQUssQ0FBQywyRkFBdUYsSUFBTSxDQUFDLENBQUM7U0FDNUc7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUM3QyxDQUFDOztnQkFYdUIsaUJBQWlCOztJQU5TO1FBQWpELFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrQ0FBUSxnQkFBZ0I7b0RBQUM7SUFFakU7UUFBUixLQUFLLEVBQUU7O29EQUFrQztJQUgvQixpQkFBaUI7UUFSN0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLHFCQUFxQjtZQUMvQixrTEFBcUM7WUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsSUFBSSxFQUFFO2dCQUNKLGtDQUFrQyxFQUFFLE1BQU07YUFDM0M7U0FDRixDQUFDO3lDQVF3QixpQkFBaUI7T0FQOUIsaUJBQWlCLENBbUI3QjtJQUFELHdCQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FuQlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbnRlbnRDaGlsZCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEFmdGVyQ29udGVudEluaXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2xDaGVja2JveElucHV0IH0gZnJvbSAnLi4vaW5wdXQvaW5wdXQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtY2hlY2tib3gtYnV0dG9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NoZWNrYm94LWJ1dHRvbi5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLnNsZHMtY2hlY2tib3hfYWRkLWJ1dHRvbl0nOiAndHJ1ZScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5nbENoZWNrYm94QnV0dG9uIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBDb250ZW50Q2hpbGQoTmdsQ2hlY2tib3hJbnB1dCwgeyBzdGF0aWM6IHRydWUgfSkgaW5wdXQ6IE5nbENoZWNrYm94SW5wdXQ7XG5cbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgX3VpZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuaW5wdXQpIHtcbiAgICAgIHRocm93IEVycm9yKGBbbmctbGlnaHRuaW5nXSBDb3VsZG4ndCBmaW5kIGFuIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIj4gd2l0aCBbbmdsXSBhdHRyaWJ1dGUgaW5zaWRlICR7dGhpc31gKTtcbiAgICB9XG5cbiAgICB0aGlzLl91aWQgPSB0aGlzLmlucHV0LmlkO1xuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuXG4gICAgdGhpcy5pbnB1dC5hZGRDbGFzcygnc2xkcy1hc3Npc3RpdmUtdGV4dCcpO1xuICB9XG59XG4iXX0=