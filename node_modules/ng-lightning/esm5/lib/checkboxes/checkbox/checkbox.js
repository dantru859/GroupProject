import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ContentChild, TemplateRef, HostBinding, AfterContentInit, ChangeDetectorRef, OnChanges, OnDestroy } from '@angular/core';
import { NglCheckboxInput } from '../input/input';
import { toBoolean, InputBoolean } from '../../util/convert';
var NglCheckbox = /** @class */ (function () {
    function NglCheckbox(cd) {
        this.cd = cd;
    }
    Object.defineProperty(NglCheckbox.prototype, "hasError", {
        get: function () {
            return toBoolean(this.error);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglCheckbox.prototype, "errorId", {
        get: function () {
            return "error_" + this._uid;
        },
        enumerable: true,
        configurable: true
    });
    NglCheckbox.prototype.ngOnChanges = function () {
        this.input.describedBy = this.error ? this.errorId : null;
    };
    NglCheckbox.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this.input) {
            throw Error("[ng-lightning] Couldn't find an <input type=\"checkbox\"> with [ngl] attribute inside NglCheckbox");
        }
        this.ɵRequiredSubscription = this.input.ɵRequiredSubject.subscribe(function (required) {
            _this.required = required;
            _this.cd.detectChanges();
        });
        this._uid = this.input.id;
        this.cd.detectChanges();
    };
    NglCheckbox.prototype.ngOnDestroy = function () {
        if (this.ɵRequiredSubscription) {
            this.ɵRequiredSubscription.unsubscribe();
            this.ɵRequiredSubscription = null;
        }
    };
    NglCheckbox.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ContentChild(NglCheckboxInput, { static: true }),
        __metadata("design:type", NglCheckboxInput)
    ], NglCheckbox.prototype, "input", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCheckbox.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCheckbox.prototype, "error", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglCheckbox.prototype, "stacked", void 0);
    __decorate([
        HostBinding('class.slds-has-error'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], NglCheckbox.prototype, "hasError", null);
    NglCheckbox = __decorate([
        Component({
            selector: 'ngl-checkbox,[ngl-checkbox]',
            template: "\n<div class=\"slds-form-element__control\">\n  <div class=\"slds-checkbox\" [class.slds-checkbox_stacked]=\"stacked\"><abbr class=\"slds-required\" *ngIf=\"required\" title=\"required\">*</abbr>\n    <ng-content></ng-content>\n    <label class=\"slds-checkbox__label\" [attr.for]=\"_uid\"><span class=\"slds-checkbox_faux\"></span><span class=\"slds-form-element__label\" [nglInternalOutlet]=\"label\"></span></label>\n  </div>\n</div>\n<div class=\"slds-form-element__help\" *ngIf=\"hasError\" [id]=\"errorId\" [nglInternalOutlet]=\"error\"></div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                '[class.slds-form-element]': 'true',
            }
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], NglCheckbox);
    return NglCheckbox;
}());
export { NglCheckbox };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvY2hlY2tib3hlcy9jaGVja2JveC9jaGVja2JveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQ2pGLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQVc3RDtJQXdCRSxxQkFBb0IsRUFBcUI7UUFBckIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFBRyxDQUFDO0lBZDdDLHNCQUFJLGlDQUFRO2FBQVo7WUFDRSxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsQ0FBQzs7O09BQUE7SUFNRCxzQkFBSSxnQ0FBTzthQUFYO1lBQ0UsT0FBTyxXQUFTLElBQUksQ0FBQyxJQUFNLENBQUM7UUFDOUIsQ0FBQzs7O09BQUE7SUFNRCxpQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzVELENBQUM7SUFFRCx3Q0FBa0IsR0FBbEI7UUFBQSxpQkFZQztRQVhDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsTUFBTSxLQUFLLENBQUMsbUdBQWlHLENBQUMsQ0FBQztTQUNoSDtRQUVELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxVQUFDLFFBQVE7WUFDMUUsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDekIsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsaUNBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO1lBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN6QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQzs7Z0JBekJ1QixpQkFBaUI7O0lBdkJTO1FBQWpELFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztrQ0FBUSxnQkFBZ0I7OENBQUM7SUFFakU7UUFBUixLQUFLLEVBQUU7OzhDQUFrQztJQUVqQztRQUFSLEtBQUssRUFBRTs7OENBQWtDO0lBRWpCO1FBQXhCLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRTs7Z0RBQWtCO0lBRzFDO1FBREMsV0FBVyxDQUFDLHNCQUFzQixDQUFDOzs7K0NBR25DO0lBWlUsV0FBVztRQVJ2QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsNkJBQTZCO1lBQ3ZDLGlqQkFBOEI7WUFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsSUFBSSxFQUFFO2dCQUNKLDJCQUEyQixFQUFFLE1BQU07YUFDcEM7U0FDRixDQUFDO3lDQXlCd0IsaUJBQWlCO09BeEI5QixXQUFXLENBa0R2QjtJQUFELGtCQUFDO0NBQUEsQUFsREQsSUFrREM7U0FsRFksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb250ZW50Q2hpbGQsIFRlbXBsYXRlUmVmLCBIb3N0QmluZGluZyxcbiAgICAgICAgIEFmdGVyQ29udGVudEluaXQsIENoYW5nZURldGVjdG9yUmVmLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdsQ2hlY2tib3hJbnB1dCB9IGZyb20gJy4uL2lucHV0L2lucHV0JztcbmltcG9ydCB7IHRvQm9vbGVhbiwgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtY2hlY2tib3gsW25nbC1jaGVja2JveF0nLFxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3guaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5zbGRzLWZvcm0tZWxlbWVudF0nOiAndHJ1ZScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIE5nbENoZWNrYm94IGltcGxlbWVudHMgT25DaGFuZ2VzLCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBAQ29udGVudENoaWxkKE5nbENoZWNrYm94SW5wdXQsIHsgc3RhdGljOiB0cnVlIH0pIGlucHV0OiBOZ2xDaGVja2JveElucHV0O1xuXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBJbnB1dCgpIGVycm9yOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBJbnB1dCgpIEBJbnB1dEJvb2xlYW4oKSBzdGFja2VkOiBib29sZWFuO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2xkcy1oYXMtZXJyb3InKVxuICBnZXQgaGFzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRvQm9vbGVhbih0aGlzLmVycm9yKTtcbiAgfVxuXG4gIHJlcXVpcmVkOiBib29sZWFuO1xuXG4gIF91aWQ6IHN0cmluZztcblxuICBnZXQgZXJyb3JJZCgpIHtcbiAgICByZXR1cm4gYGVycm9yXyR7dGhpcy5fdWlkfWA7XG4gIH1cblxuICBwcml2YXRlIMm1UmVxdWlyZWRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLmlucHV0LmRlc2NyaWJlZEJ5ID0gdGhpcy5lcnJvciA/IHRoaXMuZXJyb3JJZCA6IG51bGw7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmlucHV0KSB7XG4gICAgICB0aHJvdyBFcnJvcihgW25nLWxpZ2h0bmluZ10gQ291bGRuJ3QgZmluZCBhbiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCI+IHdpdGggW25nbF0gYXR0cmlidXRlIGluc2lkZSBOZ2xDaGVja2JveGApO1xuICAgIH1cblxuICAgIHRoaXMuybVSZXF1aXJlZFN1YnNjcmlwdGlvbiA9IHRoaXMuaW5wdXQuybVSZXF1aXJlZFN1YmplY3Quc3Vic2NyaWJlKChyZXF1aXJlZCkgPT4ge1xuICAgICAgdGhpcy5yZXF1aXJlZCA9IHJlcXVpcmVkO1xuICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl91aWQgPSB0aGlzLmlucHV0LmlkO1xuICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuybVSZXF1aXJlZFN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy7JtVJlcXVpcmVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLsm1UmVxdWlyZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19