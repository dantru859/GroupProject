import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ContentChild, ChangeDetectorRef, AfterContentInit, TemplateRef, HostBinding, OnDestroy } from '@angular/core';
import { NglCheckboxInput } from '../input/input';
import { toBoolean } from '../../util/convert';
var NglCheckboxToggle = /** @class */ (function () {
    function NglCheckboxToggle(cd) {
        this.cd = cd;
        this.enabledText = 'Enabled';
        this.disabledText = 'Disabled';
    }
    Object.defineProperty(NglCheckboxToggle.prototype, "hasError", {
        get: function () {
            return toBoolean(this.error);
        },
        enumerable: true,
        configurable: true
    });
    NglCheckboxToggle.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this.input) {
            throw Error("[ng-lightning] Couldn't find an <input type=\"checkbox\"> with [ngl] attribute inside NglCheckboxToggle");
        }
        this.ɵRequiredSubscription = this.input.ɵRequiredSubject.subscribe(function (required) {
            _this.required = required;
            _this.cd.detectChanges();
        });
        this.uid = this.input.id + "_toggle";
        this.input.describedBy = this.uid;
        this.cd.detectChanges();
    };
    NglCheckboxToggle.prototype.ngOnDestroy = function () {
        if (this.ɵRequiredSubscription) {
            this.ɵRequiredSubscription.unsubscribe();
            this.ɵRequiredSubscription = null;
        }
    };
    NglCheckboxToggle.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ContentChild(NglCheckboxInput, { static: true }),
        __metadata("design:type", NglCheckboxInput)
    ], NglCheckboxToggle.prototype, "input", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCheckboxToggle.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglCheckboxToggle.prototype, "error", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCheckboxToggle.prototype, "enabledText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCheckboxToggle.prototype, "disabledText", void 0);
    __decorate([
        HostBinding('class.slds-has-error'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], NglCheckboxToggle.prototype, "hasError", null);
    NglCheckboxToggle = __decorate([
        Component({
            selector: 'ngl-checkbox-toggle',
            template: "\n<label class=\"slds-checkbox_toggle slds-grid\"><abbr class=\"slds-required\" *ngIf=\"required\" title=\"required\">*</abbr><span class=\"slds-form-element__label slds-m-bottom_none\" [nglInternalOutlet]=\"label\"></span>\n  <ng-content></ng-content><span class=\"slds-checkbox_faux_container\" [id]=\"uid\" aria-live=\"assertive\"><span class=\"slds-checkbox_faux\"></span><span class=\"slds-checkbox_on\">{{enabledText}}</span><span class=\"slds-checkbox_off\">{{disabledText}}</span></span>\n</label>\n<div class=\"slds-form-element__help\" *ngIf=\"error\">{{error}}</div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                '[class.slds-form-element]': 'true',
            }
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef])
    ], NglCheckboxToggle);
    return NglCheckboxToggle;
}());
export { NglCheckboxToggle };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtdG9nZ2xlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NoZWNrYm94ZXMvdG9nZ2xlL2NoZWNrYm94LXRvZ2dsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUM1RixXQUFXLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFXL0M7SUFxQkUsMkJBQW9CLEVBQXFCO1FBQXJCLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBZGhDLGdCQUFXLEdBQUcsU0FBUyxDQUFDO1FBQ3hCLGlCQUFZLEdBQUcsVUFBVSxDQUFDO0lBYVMsQ0FBQztJQVY3QyxzQkFBSSx1Q0FBUTthQUFaO1lBQ0UsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBVUQsOENBQWtCLEdBQWxCO1FBQUEsaUJBYUM7UUFaQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNmLE1BQU0sS0FBSyxDQUFDLHlHQUF1RyxDQUFDLENBQUM7U0FDdEg7UUFFRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsVUFBQyxRQUFRO1lBQzFFLEtBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3pCLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsR0FBRyxHQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFTLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCx1Q0FBVyxHQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDOUIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7U0FDbkM7SUFDSCxDQUFDOztnQkF0QnVCLGlCQUFpQjs7SUFwQlM7UUFBakQsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO2tDQUFRLGdCQUFnQjtvREFBQztJQUVqRTtRQUFSLEtBQUssRUFBRTs7b0RBQWtDO0lBRWpDO1FBQVIsS0FBSyxFQUFFOztvREFBZTtJQUVkO1FBQVIsS0FBSyxFQUFFOzswREFBeUI7SUFDeEI7UUFBUixLQUFLLEVBQUU7OzJEQUEyQjtJQUduQztRQURDLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQzs7O3FEQUduQztJQWJVLGlCQUFpQjtRQVI3QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLDZrQkFBcUM7WUFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsSUFBSSxFQUFFO2dCQUNKLDJCQUEyQixFQUFFLE1BQU07YUFDcEM7U0FDRixDQUFDO3lDQXNCd0IsaUJBQWlCO09BckI5QixpQkFBaUIsQ0E0QzdCO0lBQUQsd0JBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQTVDWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29udGVudENoaWxkLCBDaGFuZ2VEZXRlY3RvclJlZiwgQWZ0ZXJDb250ZW50SW5pdCxcbiAgICAgICAgIFRlbXBsYXRlUmVmLCBIb3N0QmluZGluZywgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2xDaGVja2JveElucHV0IH0gZnJvbSAnLi4vaW5wdXQvaW5wdXQnO1xuaW1wb3J0IHsgdG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbC9jb252ZXJ0JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtY2hlY2tib3gtdG9nZ2xlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NoZWNrYm94LXRvZ2dsZS5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLnNsZHMtZm9ybS1lbGVtZW50XSc6ICd0cnVlJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgTmdsQ2hlY2tib3hUb2dnbGUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICBAQ29udGVudENoaWxkKE5nbENoZWNrYm94SW5wdXQsIHsgc3RhdGljOiB0cnVlIH0pIGlucHV0OiBOZ2xDaGVja2JveElucHV0O1xuXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBJbnB1dCgpIGVycm9yOiBzdHJpbmc7XG5cbiAgQElucHV0KCkgZW5hYmxlZFRleHQgPSAnRW5hYmxlZCc7XG4gIEBJbnB1dCgpIGRpc2FibGVkVGV4dCA9ICdEaXNhYmxlZCc7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zbGRzLWhhcy1lcnJvcicpXG4gIGdldCBoYXNFcnJvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdG9Cb29sZWFuKHRoaXMuZXJyb3IpO1xuICB9XG5cbiAgcmVxdWlyZWQ6IGJvb2xlYW47XG5cbiAgdWlkOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSDJtVJlcXVpcmVkU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICghdGhpcy5pbnB1dCkge1xuICAgICAgdGhyb3cgRXJyb3IoYFtuZy1saWdodG5pbmddIENvdWxkbid0IGZpbmQgYW4gPGlucHV0IHR5cGU9XCJjaGVja2JveFwiPiB3aXRoIFtuZ2xdIGF0dHJpYnV0ZSBpbnNpZGUgTmdsQ2hlY2tib3hUb2dnbGVgKTtcbiAgICB9XG5cbiAgICB0aGlzLsm1UmVxdWlyZWRTdWJzY3JpcHRpb24gPSB0aGlzLmlucHV0Lsm1UmVxdWlyZWRTdWJqZWN0LnN1YnNjcmliZSgocmVxdWlyZWQpID0+IHtcbiAgICAgIHRoaXMucmVxdWlyZWQgPSByZXF1aXJlZDtcbiAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH0pO1xuXG4gICAgdGhpcy51aWQgPSBgJHt0aGlzLmlucHV0LmlkfV90b2dnbGVgO1xuICAgIHRoaXMuaW5wdXQuZGVzY3JpYmVkQnkgPSB0aGlzLnVpZDtcbiAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLsm1UmVxdWlyZWRTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuybVSZXF1aXJlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy7JtVJlcXVpcmVkU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==