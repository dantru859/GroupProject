import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ElementRef, Renderer2, TemplateRef, HostBinding, OnChanges, SimpleChanges } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { trapEvent, uniqueId } from '../util/util';
import { InputBoolean, InputNumber } from '../util/convert';
import { isFileTypeAccepted } from './file-upload.util';
var NglFileUpload = /** @class */ (function () {
    function NglFileUpload(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        /**
         * File types that can be accepted. See [input accept Attribute](https://www.w3schools.com/tags/att_input_accept.asp).
         */
        this.accept = null;
        /**
         * Whether file selection is disabled.
         */
        this.disabled = false;
        /**
          * How many files can be selected simultaneously. `0` means unlimited.
          */
        this.maxFiles = 1;
        /**
         * File size limit in bytes. `0` means unlimited.
         */
        this.maxFilesize = 0;
        /**
         * Message to display when there is in an error state.
         */
        this.error = null;
        /**
         * Text for button to open file selector.
         */
        this.uploadButtonLabel = 'Upload Files';
        /**
         * Text to display inside drop zone.
         */
        this.dropZoneLabel = 'or Drop Files';
        this.uid = uniqueId('file-upload');
        this.isDragOver = false;
        this.files = [];
        this.onChange = null;
        this.onTouched = function () { };
        this.validatorChange = function () { };
        this.renderer.addClass(this.element.nativeElement, 'slds-form-element');
    }
    NglFileUpload_1 = NglFileUpload;
    NglFileUpload.prototype.writeValue = function (value) {
        this.files = value;
    };
    NglFileUpload.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    NglFileUpload.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    NglFileUpload.prototype.registerOnValidatorChange = function (fn) { this.validatorChange = fn; };
    NglFileUpload.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
    NglFileUpload.prototype.validate = function (c) {
        var files = c.value;
        if (!files || files.length === 0) {
            return null;
        }
        if (this.maxFiles > 0 && files.length > this.maxFiles) {
            return { nglFileUpload: { maxFiles: files.length } };
        }
        for (var i = 0, n = files.length; i < n; i++) {
            var file = files[i];
            if (this.accept && !isFileTypeAccepted(this.accept, file)) {
                return { nglFileUpload: { invalidType: file } };
            }
            if (this.maxFilesize && file.size > this.maxFilesize) {
                return { nglFileUpload: { maxFilesize: file } };
            }
        }
        return null;
    };
    NglFileUpload.prototype.ngOnChanges = function (changes) {
        if (changes['maxFiles'] || changes['maxFilesize'] || changes['accept']) {
            this.validatorChange();
        }
    };
    NglFileUpload.prototype.onDropZone = function (evt) {
        trapEvent(evt);
        if (this.disabled) {
            return;
        }
        this.isDragOver = evt.type === 'dragover';
        if (evt.type === 'drop' && evt.dataTransfer) {
            this.select(evt.dataTransfer.files);
        }
    };
    NglFileUpload.prototype.onInputChange = function (files) {
        this.select(files);
    };
    NglFileUpload.prototype.select = function (files) {
        this.onChange(Array.from(files));
    };
    var NglFileUpload_1;
    NglFileUpload.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglFileUpload.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglFileUpload.prototype, "accept", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglFileUpload.prototype, "disabled", void 0);
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Object)
    ], NglFileUpload.prototype, "maxFiles", void 0);
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Object)
    ], NglFileUpload.prototype, "maxFilesize", void 0);
    __decorate([
        HostBinding('class.slds-has-error'),
        Input(),
        __metadata("design:type", Object)
    ], NglFileUpload.prototype, "error", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglFileUpload.prototype, "uploadButtonLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglFileUpload.prototype, "dropZoneLabel", void 0);
    NglFileUpload = NglFileUpload_1 = __decorate([
        Component({
            selector: 'ngl-file-upload',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "<span class=\"slds-form-element__label\" *ngIf=\"label\" [id]=\"uid + '-primary-label'\" [nglInternalOutlet]=\"label\"></span>\n<div class=\"slds-form-element__control\">\n  <div class=\"slds-file-selector slds-file-selector_files\">\n    <div class=\"slds-file-selector__dropzone\" [class.slds-has-drag-over]=\"isDragOver\" (dragover)=\"onDropZone($event)\" (dragleave)=\"onDropZone($event)\" (drop)=\"onDropZone($event)\">\n      <input class=\"slds-file-selector__input slds-assistive-text\" type=\"file\" [id]=\"uid\" [attr.accept]=\"accept\" [disabled]=\"disabled\" [multiple]=\"maxFiles !== 1\" [attr.aria-describedby]=\"error ? uid + '-error' : null\" [attr.aria-labelledby]=\"uid + '-primary-label ' + uid + '-secondary-label'\" (change)=\"onInputChange($event.target.files)\">\n      <label class=\"slds-file-selector__body\" [attr.for]=\"uid\" [id]=\"uid + '-secondary-label'\"><span class=\"slds-file-selector__button slds-button slds-button_neutral\">\n          <svg class=\"slds-button__icon slds-button__icon_left\" nglIconName=\"utility:upload\"></svg>{{ uploadButtonLabel }}</span><span class=\"slds-file-selector__text slds-medium-show\">{{ dropZoneLabel }}</span></label>\n    </div>\n  </div>\n</div>\n<div class=\"slds-form-element__help\" *ngIf=\"error\" [id]=\"uid + '-error'\" [nglInternalOutlet]=\"error\"></div>",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: NglFileUpload_1,
                    multi: true
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: NglFileUpload_1,
                    multi: true
                }
            ]
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglFileUpload);
    return NglFileUpload;
}());
export { NglFileUpload };
//# sourceMappingURL=data:application/json;base64,