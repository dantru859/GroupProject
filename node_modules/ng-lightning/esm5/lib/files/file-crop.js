import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Renderer2, Input } from '@angular/core';
var NglFileCrop = /** @class */ (function () {
    function NglFileCrop(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.cropClass = 'slds-file__crop';
        // this.renderer.addClass(this.element.nativeElement, this.cropClass);
    }
    Object.defineProperty(NglFileCrop.prototype, "nglFileCrop", {
        set: function (ratio) {
            var nativeElement = this.element.nativeElement;
            if (this.currentRatio) {
                this.renderer.removeClass(nativeElement, "" + this.cropClass);
                this.renderer.removeClass(nativeElement, this.cropClass + "_" + this.currentRatio);
            }
            if (ratio) {
                this.renderer.addClass(nativeElement, "" + this.cropClass);
                this.renderer.addClass(nativeElement, this.cropClass + "_" + ratio);
            }
            this.currentRatio = ratio;
        },
        enumerable: true,
        configurable: true
    });
    NglFileCrop.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NglFileCrop.prototype, "nglFileCrop", null);
    NglFileCrop = __decorate([
        Directive({
            selector: '[nglFileCrop]',
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglFileCrop);
    return NglFileCrop;
}());
export { NglFileCrop };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jcm9wLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2ZpbGVzL2ZpbGUtY3JvcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU94RTtJQXNCRSxxQkFBb0IsT0FBbUIsRUFBVSxRQUFtQjtRQUFoRCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUo1RCxjQUFTLEdBQUcsaUJBQWlCLENBQUM7UUFLcEMsc0VBQXNFO0lBQ3hFLENBQUM7SUF0QlEsc0JBQUksb0NBQVc7YUFBZixVQUFnQixLQUF1QjtZQUM5QyxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUVqRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxLQUFHLElBQUksQ0FBQyxTQUFXLENBQUMsQ0FBQztnQkFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFLLElBQUksQ0FBQyxTQUFTLFNBQUksSUFBSSxDQUFDLFlBQWMsQ0FBQyxDQUFDO2FBQ3BGO1lBRUQsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLEtBQUcsSUFBSSxDQUFDLFNBQVcsQ0FBQyxDQUFDO2dCQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUssSUFBSSxDQUFDLFNBQVMsU0FBSSxLQUFPLENBQUMsQ0FBQzthQUNyRTtZQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzVCLENBQUM7OztPQUFBOztnQkFNNEIsVUFBVTtnQkFBb0IsU0FBUzs7SUFwQjNEO1FBQVIsS0FBSyxFQUFFOzs7a0RBY1A7SUFoQlUsV0FBVztRQUh2QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsZUFBZTtTQUMxQixDQUFDO3lDQXVCNkIsVUFBVSxFQUFvQixTQUFTO09BdEJ6RCxXQUFXLENBeUJ2QjtJQUFELGtCQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0F6QlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBOZ2xGaWxlQ3JvcFZhbHVlID0gJzE2LWJ5LTknIHwgJzQtYnktMycgfCAnMS1ieS0xJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25nbEZpbGVDcm9wXScsXG59KVxuZXhwb3J0IGNsYXNzIE5nbEZpbGVDcm9wIHtcblxuICBASW5wdXQoKSBzZXQgbmdsRmlsZUNyb3AocmF0aW86IE5nbEZpbGVDcm9wVmFsdWUpIHtcbiAgICBjb25zdCBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICBpZiAodGhpcy5jdXJyZW50UmF0aW8pIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MobmF0aXZlRWxlbWVudCwgYCR7dGhpcy5jcm9wQ2xhc3N9YCk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKG5hdGl2ZUVsZW1lbnQsIGAke3RoaXMuY3JvcENsYXNzfV8ke3RoaXMuY3VycmVudFJhdGlvfWApO1xuICAgIH1cblxuICAgIGlmIChyYXRpbykge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhuYXRpdmVFbGVtZW50LCBgJHt0aGlzLmNyb3BDbGFzc31gKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MobmF0aXZlRWxlbWVudCwgYCR7dGhpcy5jcm9wQ2xhc3N9XyR7cmF0aW99YCk7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50UmF0aW8gPSByYXRpbztcbiAgfVxuXG4gIHByaXZhdGUgY3JvcENsYXNzID0gJ3NsZHMtZmlsZV9fY3JvcCc7XG5cbiAgcHJpdmF0ZSBjdXJyZW50UmF0aW86IE5nbEZpbGVDcm9wVmFsdWU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICAvLyB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCB0aGlzLmNyb3BDbGFzcyk7XG4gIH1cbn1cbiJdfQ==