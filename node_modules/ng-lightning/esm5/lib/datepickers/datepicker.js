var _a;
import { __assign, __decorate, __metadata, __param, __read } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ElementRef, OnInit, OnChanges, AfterViewInit, Optional, Inject, ViewChild, SimpleChanges, LOCALE_ID } from '@angular/core';
import { ENTER, UP_ARROW, LEFT_ARROW, DOWN_ARROW, RIGHT_ARROW, PAGE_UP, PAGE_DOWN, HOME, END } from '@angular/cdk/keycodes';
import { uniqueId, trapEvent } from '../util/util';
import { InputBoolean, InputNumber } from '../util/convert';
import { NglDatepickerInput } from './input/datepicker-input';
import { NGL_DATEPICKER_CONFIG, NglDatepickerConfig } from './config';
import { numberOfDaysInMonth, getToday, isDisabled, compareDate, isSameMonth, parseDate } from './util';
import { NglDatepickerMonth } from './month';
var KEYBOARD_MOVES = (_a = {},
    _a[UP_ARROW] = ['Move', -7],
    _a[LEFT_ARROW] = ['Move', -1],
    _a[DOWN_ARROW] = ['Move', 7],
    _a[RIGHT_ARROW] = ['Move', 1],
    _a[PAGE_UP] = ['MoveMonth', -1],
    _a[PAGE_DOWN] = ['MoveMonth', 1],
    _a[HOME] = ['MoveTo', 1],
    _a[END] = ['MoveTo', 31],
    _a);
var NglDatepicker = /** @class */ (function () {
    function NglDatepicker(dtInput, defaultConfig, locale, element) {
        this.dtInput = dtInput;
        this.element = element;
        this.dateDisabled = null;
        this.dateChange = new EventEmitter();
        this.uid = uniqueId('datepicker');
        var config = __assign(__assign({}, new NglDatepickerConfig(locale)), defaultConfig);
        this.monthNames = config.monthNames;
        this.dayNamesShort = config.dayNamesShort;
        this.dayNamesLong = config.dayNamesLong;
        this.firstDayOfWeek = config.firstDayOfWeek;
        this.showToday = config.showToday;
        this.relativeYearFrom = config.relativeYearFrom;
        this.relativeYearTo = config.relativeYearTo;
        this.todayLabel = config.todayLabel;
        this.previousMonthLabel = config.previousMonthLabel;
        this.nextMonthLabel = config.nextMonthLabel;
    }
    Object.defineProperty(NglDatepicker.prototype, "date", {
        set: function (date) {
            this._date = parseDate(date);
        },
        enumerable: true,
        configurable: true
    });
    NglDatepicker.prototype.ngOnInit = function () {
        this.setMinMaxDates();
        this.setCurrent(this._date || getToday());
    };
    NglDatepicker.prototype.ngOnChanges = function (changes) {
        if ((changes.date && changes.date.isFirstChange()) ||
            changes.relativeYearFrom || changes.relativeYearTo ||
            changes.min || changes.max) {
            this.setMinMaxDates();
        }
        if (changes.date) {
            this.setCurrent(this._date);
        }
    };
    NglDatepicker.prototype.moveYear = function (year) {
        this.setCurrent({ year: +year });
    };
    NglDatepicker.prototype.moveMonth = function (diff) {
        this.moveCalendar('MoveMonth', diff);
    };
    NglDatepicker.prototype.keyboardHandler = function (evt) {
        var keyCode = evt.keyCode;
        if (keyCode === ENTER) {
            trapEvent(evt);
            if (!this.isDisabledDate(this.current)) {
                this.select(this.current);
            }
            return;
        }
        var move = KEYBOARD_MOVES[keyCode];
        if (!move) {
            return;
        }
        // Handle keyboard event inside datepicker
        trapEvent(evt);
        var _a = __read(move, 2), code = _a[0], param = _a[1];
        this.moveCalendar(code, param);
        this.focusActiveDay();
    };
    NglDatepicker.prototype.select = function (date) {
        if (date.disabled) {
            return;
        }
        var year = date.year, month = date.month, day = date.day;
        this.dateChange.emit(new Date(year, month, day));
    };
    NglDatepicker.prototype.selectToday = function () {
        var today = getToday();
        if (this.isDisabledDate(today)) {
            this.setCurrent(today);
        }
        else {
            this.dateChange.emit(new Date());
        }
    };
    NglDatepicker.prototype.ngAfterViewInit = function () {
        if (this.dtInput) {
            var el = this.element.nativeElement;
            this.dtInput.updateDatepickerSize(el.offsetWidth, el.offsetHeight);
            this.focusActiveDay();
        }
    };
    /** Whether the previous period button is disabled. */
    NglDatepicker.prototype.previousDisabled = function () {
        return this.minDate && isSameMonth(this.current, this.minDate);
    };
    /** Whether the next period button is disabled. */
    NglDatepicker.prototype.nextDisabled = function () {
        return this.maxDate && isSameMonth(this.current, this.maxDate);
    };
    NglDatepicker.prototype.focusActiveDay = function () {
        this.monthView.focusActiveDay();
    };
    NglDatepicker.prototype.moveCalendar = function (code, param) {
        var _a = this.current, year = _a.year, month = _a.month, day = _a.day;
        var date = new Date(year, month, day, 12);
        if (code === 'Move') {
            date.setDate(day + (+param));
            this.setCurrent({ year: date.getFullYear(), month: date.getMonth(), day: date.getDate() });
        }
        else if (code === 'MoveMonth') {
            date.setMonth(month + (+param), 1);
            this.setCurrent({ year: date.getFullYear(), month: date.getMonth(), day: day });
        }
        else if (code === 'MoveTo') {
            this.setCurrent({ day: +param });
        }
    };
    NglDatepicker.prototype.setCurrent = function (d, doRender) {
        if (doRender === void 0) { doRender = true; }
        this.current = __assign(__assign({}, this.current), d);
        // Keep current inside minimum/maximum range
        if (compareDate(this.current, this.minDate) < 0) {
            this.current = this.minDate;
        }
        else if (compareDate(this.current, this.maxDate) > 0) {
            this.current = this.maxDate;
        }
        if (doRender) {
            this.render();
        }
    };
    NglDatepicker.prototype.render = function () {
        var _a = this.current, year = _a.year, month = _a.month, day = _a.day;
        this.monthLabel = this.monthNames[month];
        // Keep current day inside limits of this month
        this.setCurrent({ day: Math.min(day, numberOfDaysInMonth(year, month)) }, false);
    };
    /** Date filter for the month */
    NglDatepicker.prototype.isDisabledDate = function (date) {
        return isDisabled(date, this.dateDisabled, this.minDate, this.maxDate);
    };
    NglDatepicker.prototype.setMinMaxDates = function () {
        var year = getToday().year;
        this.minDate = this.min ? parseDate(this.min) : { year: year + this.relativeYearFrom, month: 0, day: 1 };
        this.maxDate = this.max ? parseDate(this.max) : { year: year + this.relativeYearTo, month: 11, day: 31 };
    };
    NglDatepicker.ctorParameters = function () { return [
        { type: NglDatepickerInput, decorators: [{ type: Optional }, { type: Inject, args: [NglDatepickerInput,] }] },
        { type: NglDatepickerConfig, decorators: [{ type: Optional }, { type: Inject, args: [NGL_DATEPICKER_CONFIG,] }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglDatepicker.prototype, "monthNames", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglDatepicker.prototype, "dayNamesShort", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglDatepicker.prototype, "dayNamesLong", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], NglDatepicker.prototype, "dateDisabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date),
        __metadata("design:paramtypes", [Date])
    ], NglDatepicker.prototype, "date", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglDatepicker.prototype, "dateChange", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglDatepicker.prototype, "showToday", void 0);
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Number)
    ], NglDatepicker.prototype, "firstDayOfWeek", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepicker.prototype, "relativeYearFrom", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepicker.prototype, "relativeYearTo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], NglDatepicker.prototype, "min", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Date)
    ], NglDatepicker.prototype, "max", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatepicker.prototype, "todayLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatepicker.prototype, "previousMonthLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglDatepicker.prototype, "nextMonthLabel", void 0);
    __decorate([
        ViewChild(NglDatepickerMonth),
        __metadata("design:type", NglDatepickerMonth)
    ], NglDatepicker.prototype, "monthView", void 0);
    NglDatepicker = __decorate([
        Component({
            selector: 'ngl-datepicker',
            template: "\n<div class=\"slds-datepicker__filter slds-grid\">\n  <div class=\"slds-datepicker__filter_month slds-grid slds-grid_align-spread slds-grow\">\n    <div class=\"slds-align-middle\">\n      <button class=\"slds-button slds-button_icon-container\" type=\"button\" (click)=\"moveMonth(-1)\" [disabled]=\"previousDisabled()\" [title]=\"previousMonthLabel\">\n        <svg class=\"slds-button__icon\" nglIconName=\"left\"></svg><span class=\"slds-assistive-text\">{{ previousMonthLabel }}</span>\n      </button>\n    </div>\n    <h2 class=\"slds-align-middle\" [id]=\"uid + '_month'\" aria-live=\"assertive\" aria-atomic=\"true\">{{ monthLabel }}</h2>\n    <div class=\"slds-align-middle\">\n      <button class=\"slds-button slds-button_icon-container\" type=\"button\" (click)=\"moveMonth(1)\" [disabled]=\"nextDisabled()\" [title]=\"nextMonthLabel\">\n        <svg class=\"slds-button__icon\" nglIconName=\"right\"></svg><span class=\"slds-assistive-text\">{{ nextMonthLabel }}</span>\n      </button>\n    </div>\n  </div>\n  <ngl-date-year class=\"slds-shrink-none\" [year]=\"current.year\" [from]=\"minDate\" [to]=\"maxDate\" (yearChange)=\"moveYear($event)\"></ngl-date-year>\n</div>\n<table class=\"datepicker__month\" role=\"grid\" [attr.aria-labelledby]=\"uid + '_month'\" (keydown)=\"keyboardHandler($event)\">\n  <thead>\n    <tr nglWeekdays [firstDayOfWeek]=\"firstDayOfWeek\" [dayNamesShort]=\"dayNamesShort\" [dayNamesLong]=\"dayNamesLong\"></tr>\n  </thead>\n  <tbody *ngIf=\"current\" nglDatepickerMonth [year]=\"current.year\" [month]=\"current.month\" [day]=\"current.day\" [selected]=\"_date\" [firstDayOfWeek]=\"firstDayOfWeek\" [minDate]=\"minDate\" [maxDate]=\"maxDate\" [dateDisabled]=\"dateDisabled\" (selectDate)=\"select($event)\"></tbody>\n</table>\n<button class=\"slds-button slds-align_absolute-center slds-text-link\" *ngIf=\"showToday\" (click)=\"selectToday()\">{{ todayLabel }}</button>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                '[class.slds-datepicker]': 'true',
            },
            styles: [":host { display: block; }"]
        }),
        __param(0, Optional()), __param(0, Inject(NglDatepickerInput)),
        __param(1, Optional()), __param(1, Inject(NGL_DATEPICKER_CONFIG)),
        __param(2, Inject(LOCALE_ID)),
        __metadata("design:paramtypes", [NglDatepickerInput,
            NglDatepickerConfig, String, ElementRef])
    ], NglDatepicker);
    return NglDatepicker;
}());
export { NglDatepicker };
//# sourceMappingURL=data:application/json;base64,