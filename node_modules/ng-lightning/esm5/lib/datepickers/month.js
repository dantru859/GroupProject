import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewChildren, QueryList, NgZone, OnChanges, SimpleChanges } from '@angular/core';
import { take } from 'rxjs/operators';
import { split, getToday, isEqualDate, numberOfDaysInMonth, isDisabled } from './util';
import { NglDay } from './day';
var NglDatepickerMonth = /** @class */ (function () {
    function NglDatepickerMonth(ngZone) {
        this.ngZone = ngZone;
        this.dateDisabled = null;
        this.selectDate = new EventEmitter();
    }
    NglDatepickerMonth.prototype.indexTrackBy = function (index) {
        return index;
    };
    NglDatepickerMonth.prototype.dateTrackBy = function (index, _a) {
        var year = _a.year, month = _a.month, day = _a.day;
        return day + "-" + month + "-" + year;
    };
    NglDatepickerMonth.prototype.onSelect = function (date) {
        if (date.disabled)
            return;
        this.selectDate.emit(date);
    };
    NglDatepickerMonth.prototype.ngOnChanges = function (changes) {
        if (changes.year || changes.month || changes.firstDayOfWeek) {
            this.renderView();
            return;
        }
        if (changes.day) {
            this.updateActive();
        }
        if (changes.selected) {
            this.updateSelected();
        }
        if (changes.minDate || changes.maxDate || changes.dateDisabled) {
            this.updateDisabled();
        }
    };
    NglDatepickerMonth.prototype.focusActiveDay = function () {
        var _this = this;
        this.ngZone.runOutsideAngular(function () {
            _this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {
                var active = _this.days.find(function (d) { return d.isActive; });
                if (active) {
                    active.focus();
                }
            });
        });
    };
    NglDatepickerMonth.prototype.renderView = function () {
        var days = this.daysInMonth(this.year, this.month);
        Array.prototype.unshift.apply(days, this.daysInPreviousMonth(this.year, this.month));
        var nextMonth = this.daysInNextMonth(this.year, this.month + 1, days.length);
        if (nextMonth) {
            Array.prototype.push.apply(days, nextMonth);
        }
        this.weeks = split(days);
    };
    NglDatepickerMonth.prototype.daysInMonth = function (year, month) {
        var last = numberOfDaysInMonth(year, month);
        return this.getDayObjects(year, month, 1, last);
    };
    NglDatepickerMonth.prototype.daysInPreviousMonth = function (year, month) {
        var firstIndex = (new Date(year, month, 1)).getDay();
        var last = new Date(year, month, 0).getDate();
        var numDays = (7 + firstIndex - this.firstDayOfWeek) % 7;
        return this.getDayObjects(year, month - 1, last - numDays + 1, last, false);
    };
    NglDatepickerMonth.prototype.daysInNextMonth = function (year, month, numOfDays) {
        if (numOfDays % 7 === 0) {
            return;
        }
        return this.getDayObjects(year, month, 1, 7 - (numOfDays % 7), false);
    };
    NglDatepickerMonth.prototype.getDayObjects = function (year, month, from, to, isCurrentMonth) {
        if (isCurrentMonth === void 0) { isCurrentMonth = true; }
        var today = getToday();
        var days = [];
        for (var day = from; day <= to; day++) {
            var d = {
                year: year,
                month: month,
                day: day,
                isCurrentMonth: isCurrentMonth,
                today: isEqualDate(today, { year: year, month: month, day: day }),
            };
            d.active = this.isActive(d);
            d.selected = this.isSelected(d);
            d.disabled = this.isDisabled(d);
            days.push(d);
        }
        return days;
    };
    NglDatepickerMonth.prototype.updateActive = function () {
        var _this = this;
        this.weeks.forEach(function (days) {
            days.forEach(function (day) {
                day.active = _this.isActive(day);
            });
        });
    };
    NglDatepickerMonth.prototype.isActive = function (day) {
        return day.isCurrentMonth && day.day === this.day;
    };
    NglDatepickerMonth.prototype.updateSelected = function () {
        var _this = this;
        this.weeks.forEach(function (days) {
            days.forEach(function (day) {
                day.selected = _this.isSelected(day);
            });
        });
    };
    NglDatepickerMonth.prototype.isSelected = function (day) {
        return isEqualDate(this.selected, day);
    };
    NglDatepickerMonth.prototype.updateDisabled = function () {
        var _this = this;
        this.weeks.forEach(function (days) {
            days.forEach(function (day) {
                day.disabled = _this.isDisabled(day);
            });
        });
    };
    /** Date filter for the month */
    NglDatepickerMonth.prototype.isDisabled = function (d) {
        return !d.isCurrentMonth || isDisabled(d, this.dateDisabled, this.minDate, this.maxDate);
    };
    NglDatepickerMonth.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglDatepickerMonth.prototype, "selected", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepickerMonth.prototype, "year", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepickerMonth.prototype, "month", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepickerMonth.prototype, "day", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NglDatepickerMonth.prototype, "firstDayOfWeek", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglDatepickerMonth.prototype, "minDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglDatepickerMonth.prototype, "maxDate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Function)
    ], NglDatepickerMonth.prototype, "dateDisabled", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglDatepickerMonth.prototype, "selectDate", void 0);
    __decorate([
        ViewChildren(NglDay),
        __metadata("design:type", QueryList)
    ], NglDatepickerMonth.prototype, "days", void 0);
    NglDatepickerMonth = __decorate([
        Component({
            // tslint:disable-next-line:component-selector
            selector: '[nglDatepickerMonth]',
            template: "\n<tr *ngFor=\"let week of weeks; trackBy:indexTrackBy\">\n  <td *ngFor=\"let date of week; trackBy:dateTrackBy\" [class.slds-is-today]=\"date.today\" [isActive]=\"date.active\" [nglDay]=\"date\" [nglDaySelected]=\"date.selected\" [nglDayDisabled]=\"date.disabled\" (click)=\"onSelect(date)\" role=\"gridcell\"><span class=\"slds-day\">{{ date.day }}</span></td>\n</tr>",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [NgZone])
    ], NglDatepickerMonth);
    return NglDatepickerMonth;
}());
export { NglDatepickerMonth };
//# sourceMappingURL=data:application/json;base64,