import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { format as dateFnsFormat, parse as dateFnsParse } from 'date-fns';
import { NglDateAdapterBase } from './adapter';
var PATTERNS = {
    'big-endian': 'yyyy/MM/dd',
    'little-endian': 'dd/MM/yyyy',
    'middle-endian': 'MM/dd/yyyy',
};
var NglDateAdapter = /** @class */ (function (_super) {
    __extends(NglDateAdapter, _super);
    function NglDateAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NglDateAdapter.prototype.parse = function (value, format) {
        var date = dateFnsParse(value, format, new Date());
        return this.isValidDate(date) ? date : null;
    };
    NglDateAdapter.prototype.format = function (date, format) {
        return dateFnsFormat(date, format);
    };
    NglDateAdapter.prototype.pattern = function (name, delimiter) {
        var pattern = PATTERNS[name];
        return (delimiter && delimiter !== '/') ? pattern.replace(/\//g, delimiter) : pattern;
    };
    NglDateAdapter.prototype.isValidDate = function (value) {
        var dateWrapper = new Date(value);
        return !isNaN(dateWrapper.getDate());
    };
    NglDateAdapter = __decorate([
        Injectable()
    ], NglDateAdapter);
    return NglDateAdapter;
}(NglDateAdapterBase));
export { NglDateAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1mbnMtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9kYXRlcGlja2Vycy9hZGFwdGVycy9kYXRlLWZucy1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLElBQUksYUFBYSxFQUFFLEtBQUssSUFBSSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDMUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRS9DLElBQU0sUUFBUSxHQUFHO0lBQ2YsWUFBWSxFQUFFLFlBQVk7SUFDMUIsZUFBZSxFQUFFLFlBQVk7SUFDN0IsZUFBZSxFQUFFLFlBQVk7Q0FDOUIsQ0FBQztBQUdGO0lBQW9DLGtDQUFrQjtJQUF0RDs7SUFxQkEsQ0FBQztJQW5CQyw4QkFBSyxHQUFMLFVBQU0sS0FBYSxFQUFFLE1BQWM7UUFDakMsSUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDOUMsQ0FBQztJQUVELCtCQUFNLEdBQU4sVUFBTyxJQUFVLEVBQUUsTUFBYztRQUMvQixPQUFPLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGdDQUFPLEdBQVAsVUFBUSxJQUFzRCxFQUFFLFNBQWlCO1FBQy9FLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixPQUFPLENBQUMsU0FBUyxJQUFJLFNBQVMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUN4RixDQUFDO0lBRU8sb0NBQVcsR0FBbkIsVUFBb0IsS0FBSztRQUN2QixJQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFuQlUsY0FBYztRQUQxQixVQUFVLEVBQUU7T0FDQSxjQUFjLENBcUIxQjtJQUFELHFCQUFDO0NBQUEsQUFyQkQsQ0FBb0Msa0JBQWtCLEdBcUJyRDtTQXJCWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZm9ybWF0IGFzIGRhdGVGbnNGb3JtYXQsIHBhcnNlIGFzIGRhdGVGbnNQYXJzZSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IE5nbERhdGVBZGFwdGVyQmFzZSB9IGZyb20gJy4vYWRhcHRlcic7XG5cbmNvbnN0IFBBVFRFUk5TID0ge1xuICAnYmlnLWVuZGlhbic6ICd5eXl5L01NL2RkJyxcbiAgJ2xpdHRsZS1lbmRpYW4nOiAnZGQvTU0veXl5eScsXG4gICdtaWRkbGUtZW5kaWFuJzogJ01NL2RkL3l5eXknLFxufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nbERhdGVBZGFwdGVyIGV4dGVuZHMgTmdsRGF0ZUFkYXB0ZXJCYXNlIHtcblxuICBwYXJzZSh2YWx1ZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZyk6IERhdGUgfCBudWxsIHtcbiAgICBjb25zdCBkYXRlID0gZGF0ZUZuc1BhcnNlKHZhbHVlLCBmb3JtYXQsIG5ldyBEYXRlKCkpO1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWREYXRlKGRhdGUpID8gZGF0ZSA6IG51bGw7XG4gIH1cblxuICBmb3JtYXQoZGF0ZTogRGF0ZSwgZm9ybWF0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBkYXRlRm5zRm9ybWF0KGRhdGUsIGZvcm1hdCk7XG4gIH1cblxuICBwYXR0ZXJuKG5hbWU6ICdiaWctZW5kaWFuJyB8ICdsaXR0bGUtZW5kaWFuJyB8ICdtaWRkbGUtZW5kaWFuJywgZGVsaW1pdGVyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHBhdHRlcm4gPSBQQVRURVJOU1tuYW1lXTtcbiAgICByZXR1cm4gKGRlbGltaXRlciAmJiBkZWxpbWl0ZXIgIT09ICcvJykgPyBwYXR0ZXJuLnJlcGxhY2UoL1xcLy9nLCBkZWxpbWl0ZXIpIDogcGF0dGVybjtcbiAgfVxuXG4gIHByaXZhdGUgaXNWYWxpZERhdGUodmFsdWUpOiBib29sZWFuIHtcbiAgICBjb25zdCBkYXRlV3JhcHBlciA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICByZXR1cm4gIWlzTmFOKGRhdGVXcmFwcGVyLmdldERhdGUoKSk7XG4gIH1cblxufVxuIl19