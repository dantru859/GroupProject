import { __decorate, __metadata } from "tslib";
import { Directive, HostListener, ElementRef, OnDestroy } from '@angular/core';
import { NglDropdown } from './dropdown';
var NglDropdownTrigger = /** @class */ (function () {
    function NglDropdownTrigger(element, dropdown) {
        this.element = element;
        this.dropdown = dropdown;
        this.parentFocusEventSubscription = this.dropdown.triggerFocusEventEmitter.subscribe(this.focus.bind(this));
    }
    NglDropdownTrigger.prototype.ngOnDestroy = function () {
        this.parentFocusEventSubscription.unsubscribe();
    };
    NglDropdownTrigger.prototype.toggleOpen = function () {
        this.dropdown.toggle();
    };
    NglDropdownTrigger.prototype.onKeyDownOpen = function ($event) {
        $event.preventDefault();
        this.dropdown.toggle(true);
    };
    NglDropdownTrigger.prototype.focus = function () {
        this.element.nativeElement.focus();
    };
    NglDropdownTrigger.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NglDropdown }
    ]; };
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NglDropdownTrigger.prototype, "toggleOpen", null);
    __decorate([
        HostListener('keydown.arrowdown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], NglDropdownTrigger.prototype, "onKeyDownOpen", null);
    NglDropdownTrigger = __decorate([
        Directive({
            selector: '[nglDropdownTrigger]',
            host: {
                'aria-haspopup': 'true',
            },
        }),
        __metadata("design:paramtypes", [ElementRef, NglDropdown])
    ], NglDropdownTrigger);
    return NglDropdownTrigger;
}());
export { NglDropdownTrigger };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tdHJpZ2dlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9tZW51cy9kcm9wZG93bi10cmlnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFRekM7SUFHRSw0QkFBb0IsT0FBbUIsRUFBVSxRQUFxQjtRQUFsRCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQUNwRSxJQUFJLENBQUMsNEJBQTRCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RyxDQUFDO0lBRUQsd0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRXNCLHVDQUFVLEdBQVY7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBR0QsMENBQWEsR0FBYixVQUFjLE1BQWE7UUFDekIsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxrQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Z0JBcEI0QixVQUFVO2dCQUFvQixXQUFXOztJQVEvQztRQUF0QixZQUFZLENBQUMsT0FBTyxDQUFDOzs7O3dEQUVyQjtJQUdEO1FBREMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3lDQUN4QixLQUFLOzsyREFHMUI7SUFuQlUsa0JBQWtCO1FBTjlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsSUFBSSxFQUFFO2dCQUNKLGVBQWUsRUFBRSxNQUFNO2FBQ3hCO1NBQ0YsQ0FBQzt5Q0FJNkIsVUFBVSxFQUFvQixXQUFXO09BSDNELGtCQUFrQixDQXdCOUI7SUFBRCx5QkFBQztDQUFBLEFBeEJELElBd0JDO1NBeEJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBFbGVtZW50UmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nbERyb3Bkb3duIH0gZnJvbSAnLi9kcm9wZG93bic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ2xEcm9wZG93blRyaWdnZXJdJyxcbiAgaG9zdDoge1xuICAgICdhcmlhLWhhc3BvcHVwJzogJ3RydWUnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xEcm9wZG93blRyaWdnZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHBhcmVudEZvY3VzRXZlbnRTdWJzY3JpcHRpb246IGFueTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgZHJvcGRvd246IE5nbERyb3Bkb3duKSB7XG4gICAgdGhpcy5wYXJlbnRGb2N1c0V2ZW50U3Vic2NyaXB0aW9uID0gdGhpcy5kcm9wZG93bi50cmlnZ2VyRm9jdXNFdmVudEVtaXR0ZXIuc3Vic2NyaWJlKHRoaXMuZm9jdXMuYmluZCh0aGlzKSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnBhcmVudEZvY3VzRXZlbnRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgdG9nZ2xlT3BlbigpIHtcbiAgICB0aGlzLmRyb3Bkb3duLnRvZ2dsZSgpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5hcnJvd2Rvd24nLCBbJyRldmVudCddKVxuICBvbktleURvd25PcGVuKCRldmVudDogRXZlbnQpIHtcbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmRyb3Bkb3duLnRvZ2dsZSh0cnVlKTtcbiAgfVxuXG4gIGZvY3VzKCkge1xuICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cbn1cbiJdfQ==