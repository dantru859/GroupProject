import { __decorate, __metadata } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener, ElementRef, OnInit, OnDestroy, ContentChildren, QueryList, Renderer2 } from '@angular/core';
import { toBoolean, InputBoolean } from '../util/convert';
import { NglDropdownItem } from './dropdown-item';
var openEventEmitter = new EventEmitter();
var NglDropdown = /** @class */ (function () {
    function NglDropdown(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.handlePageEvents = true;
        this.isOpenChange = new EventEmitter();
        this.triggerFocusEventEmitter = new EventEmitter();
        this._isOpen = false;
        this.globalClickEventUnsubscriber = null;
        this.clickEventUnsubscriber = null;
    }
    Object.defineProperty(NglDropdown.prototype, "isOpen", {
        get: function () {
            return this._isOpen;
        },
        set: function (isOpen) {
            var _this = this;
            this._isOpen = toBoolean(isOpen);
            if (this.isOpen) {
                this.clearGlobalClickTimeout();
                this.globalClickTimeout = setTimeout(function () {
                    if (_this.handlePageEvents) {
                        _this._subscribeToClickEvents();
                    }
                });
                this.renderer.addClass(this.element.nativeElement, 'slds-is-open');
            }
            else {
                this._unsubscribeFromClickEvents();
                this.renderer.removeClass(this.element.nativeElement, 'slds-is-open');
            }
            this.renderer.setAttribute(this.element.nativeElement, 'aria-expanded', "" + this.isOpen);
        },
        enumerable: true,
        configurable: true
    });
    NglDropdown.prototype.onKeydownClose = function (eventName) {
        this.toggle(false);
        if (eventName === 'esc') {
            this.triggerFocusEventEmitter.emit(null);
        }
    };
    NglDropdown.prototype.onKeydownFocusNext = function ($event, direction) {
        $event.preventDefault();
        this.focusItem(direction);
    };
    NglDropdown.prototype.ngOnInit = function () {
        this.openEventSubscription = openEventEmitter.subscribe(this.handleDropdownOpenEvent.bind(this));
    };
    NglDropdown.prototype.ngOnDestroy = function () {
        this.clearGlobalClickTimeout();
        if (this.openEventSubscription) {
            this.openEventSubscription.unsubscribe();
        }
        this._unsubscribeFromClickEvents();
    };
    NglDropdown.prototype.toggle = function (toggle, focus) {
        if (toggle === void 0) { toggle = !this.isOpen; }
        if (focus === void 0) { focus = false; }
        if (toggle === this.isOpen) {
            return;
        }
        this.isOpenChange.emit(toggle);
        if (toggle) {
            openEventEmitter.emit(this);
            if (focus) {
                this.focusItem('next');
            }
        }
    };
    NglDropdown.prototype.handleGlobalClickEvent = function ($event) {
        if (!this.handlePageEvents || $event.$nglStop) {
            return;
        }
        this.toggle(false);
    };
    NglDropdown.prototype._subscribeToClickEvents = function () {
        this._unsubscribeFromClickEvents();
        // Prevent document listener to close it, since click happened inside
        this.clickEventUnsubscriber = this.renderer.listen(this.element.nativeElement, 'click', function ($event) { return $event.$nglStop = true; });
        this.globalClickEventUnsubscriber = this.renderer.listen('document', 'click', this.handleGlobalClickEvent.bind(this));
    };
    NglDropdown.prototype._unsubscribeFromClickEvents = function () {
        if (this.clickEventUnsubscriber) {
            this.clickEventUnsubscriber();
            this.clickEventUnsubscriber = null;
        }
        if (this.globalClickEventUnsubscriber) {
            this.globalClickEventUnsubscriber();
            this.globalClickEventUnsubscriber = null;
        }
    };
    NglDropdown.prototype.clearGlobalClickTimeout = function () {
        clearTimeout(this.globalClickTimeout);
    };
    NglDropdown.prototype.focusItem = function (direction) {
        if (!this.items.length) {
            return;
        }
        var items = this.items.toArray();
        var activeElementIndex = items.findIndex(function (item) { return item.hasFocus(); }) + (direction === 'next' ? 1 : -1);
        if (activeElementIndex === items.length || activeElementIndex < 0) {
            return;
        }
        items[activeElementIndex].focus();
    };
    NglDropdown.prototype.handleDropdownOpenEvent = function (dropdown) {
        if (dropdown !== this) {
            this.toggle(false);
        }
    };
    NglDropdown.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input('open'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], NglDropdown.prototype, "isOpen", null);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglDropdown.prototype, "handlePageEvents", void 0);
    __decorate([
        ContentChildren(NglDropdownItem, { descendants: true }),
        __metadata("design:type", QueryList)
    ], NglDropdown.prototype, "items", void 0);
    __decorate([
        Output('openChange'),
        __metadata("design:type", Object)
    ], NglDropdown.prototype, "isOpenChange", void 0);
    __decorate([
        HostListener('keydown.esc', ['"esc"']),
        HostListener('keydown.tab', ['"tab"']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], NglDropdown.prototype, "onKeydownClose", null);
    __decorate([
        HostListener('keydown.arrowdown', ['$event', '"next"']),
        HostListener('keydown.arrowup', ['$event', '"previous"']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event, String]),
        __metadata("design:returntype", void 0)
    ], NglDropdown.prototype, "onKeydownFocusNext", null);
    NglDropdown = __decorate([
        Directive({
            selector: '[nglDropdown]',
            host: {
                '[class.slds-dropdown-trigger]': 'true',
                '[class.slds-dropdown-trigger_click]': 'true',
            },
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglDropdown);
    return NglDropdown;
}());
export { NglDropdown };
//# sourceMappingURL=data:application/json;base64,