import { __decorate, __metadata } from "tslib";
import { Input, Output, EventEmitter } from '@angular/core';
import { isInt } from '../../util/util';
var NglCommonNotify = /** @class */ (function () {
    function NglCommonNotify(element, renderer, cd, type) {
        this.element = element;
        this.renderer = renderer;
        this.cd = cd;
        this.closeButtonAssistiveText = 'Close';
        /**
         * Triggered by close button or duration timeout.
         */
        // tslint:disable-next-line:no-output-rename
        this.closeEventEmitter = new EventEmitter();
        this.currentTimeout = null;
        this.renderer.addClass(this.element.nativeElement, 'slds-notify');
        this.renderer.addClass(this.element.nativeElement, "slds-notify_" + type);
        this.toggleThemeClass(true, this.variant);
        this.renderer.setAttribute(this.element.nativeElement, 'role', type === 'toast' ? 'status' : 'alert');
    }
    Object.defineProperty(NglCommonNotify.prototype, "variant", {
        get: function () {
            return this._variant || 'info';
        },
        /**
         * The type of alert.
         */
        set: function (variant) {
            this.toggleThemeClass(false, this.variant);
            this._variant = variant;
            this.toggleThemeClass(true, this.variant);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglCommonNotify.prototype, "duration", {
        /**
         * The number of milliseconds after which, the close event will be triggered with an emitted reason of `'timeout'`.
         */
        set: function (duration) {
            var _this = this;
            this.clearTimeout();
            if (isInt(duration) && duration >= 0) {
                this.currentTimeout = setTimeout(function () { return _this.close('timeout'); }, +duration);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglCommonNotify.prototype, "dismissible", {
        get: function () {
            return this._dismissible;
        },
        set: function (dismissible) {
            this._dismissible = dismissible;
            this.cd.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    NglCommonNotify.prototype.close = function (reason, $event) {
        this.clearTimeout();
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        this.closeEventEmitter.emit(reason);
    };
    NglCommonNotify.prototype.ngOnDestroy = function () {
        this.clearTimeout();
    };
    NglCommonNotify.prototype.clearTimeout = function () {
        if (this.currentTimeout !== null) {
            clearTimeout(this.currentTimeout);
            this.currentTimeout = null;
        }
    };
    NglCommonNotify.prototype.toggleThemeClass = function (isAdd, klass) {
        if (!klass) {
            return;
        }
        var el = this.element.nativeElement;
        this.renderer[isAdd ? 'addClass' : 'removeClass'](el, "slds-theme_" + klass);
    };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NglCommonNotify.prototype, "variant", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglCommonNotify.prototype, "iconName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCommonNotify.prototype, "assistiveText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCommonNotify.prototype, "closeButtonAssistiveText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], NglCommonNotify.prototype, "duration", null);
    __decorate([
        Output('close'),
        __metadata("design:type", Object)
    ], NglCommonNotify.prototype, "closeEventEmitter", void 0);
    return NglCommonNotify;
}());
export { NglCommonNotify };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9ub3RpZnkvbm90aWZ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQXVELE1BQU0sZUFBZSxDQUFDO0FBQ2pILE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QztJQWlERSx5QkFBb0IsT0FBbUIsRUFBVSxRQUFtQixFQUFVLEVBQXFCLEVBQUUsSUFBdUI7UUFBeEcsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQWhDMUYsNkJBQXdCLEdBQUcsT0FBTyxDQUFFO1FBWTdDOztXQUVHO1FBQ0gsNENBQTRDO1FBQzNCLHNCQUFpQixHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFZeEQsbUJBQWMsR0FBUSxJQUFJLENBQUM7UUFLakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsaUJBQWUsSUFBTSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEcsQ0FBQztJQWpEUSxzQkFBSSxvQ0FBTzthQUtwQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUM7UUFDakMsQ0FBQztRQVZEOztXQUVHO2FBQ00sVUFBWSxPQUFpRDtZQUNwRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUN4QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTtJQWFRLHNCQUFJLHFDQUFRO1FBSHJCOztXQUVHO2FBQ00sVUFBYSxRQUFnQjtZQUF0QyxpQkFLQztZQUpDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQixJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBckIsQ0FBcUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzFFO1FBQ0gsQ0FBQzs7O09BQUE7SUFRRCxzQkFBSSx3Q0FBVzthQUlmO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7YUFORCxVQUFnQixXQUFvQjtZQUNsQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztZQUNoQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3pCLENBQUM7OztPQUFBO0lBa0JELCtCQUFLLEdBQUwsVUFBTSxNQUFlLEVBQUUsTUFBYztRQUNuQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxNQUFNLEVBQUU7WUFDVixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDeEIsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQscUNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sc0NBQVksR0FBcEI7UUFDRSxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssSUFBSSxFQUFFO1lBQ2hDLFlBQVksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRU8sMENBQWdCLEdBQXhCLFVBQXlCLEtBQWMsRUFBRSxLQUFhO1FBQ3BELElBQUksQ0FBQyxLQUFLLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFFdkIsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxFQUFFLGdCQUFjLEtBQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUE1RVE7UUFBUixLQUFLLEVBQUU7OztrREFJUDtJQUtRO1FBQVIsS0FBSyxFQUFFOztxREFBa0I7SUFFakI7UUFBUixLQUFLLEVBQUU7OzBEQUFlO0lBQ2Q7UUFBUixLQUFLLEVBQUU7O3FFQUFxQztJQUtwQztRQUFSLEtBQUssRUFBRTs7O21EQUtQO0lBTWdCO1FBQWhCLE1BQU0sQ0FBQyxPQUFPLENBQUM7OzhEQUFnRDtJQWlEbEUsc0JBQUM7Q0FBQSxBQWxGRCxJQWtGQztTQWxGWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzSW50IH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcblxuZXhwb3J0IGNsYXNzIE5nbENvbW1vbk5vdGlmeSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIGFsZXJ0LlxuICAgKi9cbiAgQElucHV0KCkgc2V0IHZhcmlhbnQodmFyaWFudDogJ2Vycm9yJyB8ICdpbmZvJyB8ICdzdWNjZXNzJyB8ICd3YXJuaW5nJykge1xuICAgIHRoaXMudG9nZ2xlVGhlbWVDbGFzcyhmYWxzZSwgdGhpcy52YXJpYW50KTtcbiAgICB0aGlzLl92YXJpYW50ID0gdmFyaWFudDtcbiAgICB0aGlzLnRvZ2dsZVRoZW1lQ2xhc3ModHJ1ZSwgdGhpcy52YXJpYW50KTtcbiAgfVxuICBnZXQgdmFyaWFudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFyaWFudCB8fCAnaW5mbyc7XG4gIH1cblxuICBASW5wdXQoKSBpY29uTmFtZTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIGFzc2lzdGl2ZVRleHQ7XG4gIEBJbnB1dCgpIGNsb3NlQnV0dG9uQXNzaXN0aXZlVGV4dCA9ICdDbG9zZScgO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBhZnRlciB3aGljaCwgdGhlIGNsb3NlIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkIHdpdGggYW4gZW1pdHRlZCByZWFzb24gb2YgYCd0aW1lb3V0J2AuXG4gICAqL1xuICBASW5wdXQoKSBzZXQgZHVyYXRpb24oZHVyYXRpb246IG51bWJlcikge1xuICAgIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG4gICAgaWYgKGlzSW50KGR1cmF0aW9uKSAmJiBkdXJhdGlvbiA+PSAwKSB7XG4gICAgICB0aGlzLmN1cnJlbnRUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmNsb3NlKCd0aW1lb3V0JyksICtkdXJhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXJlZCBieSBjbG9zZSBidXR0b24gb3IgZHVyYXRpb24gdGltZW91dC5cbiAgICovXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1vdXRwdXQtcmVuYW1lXG4gIEBPdXRwdXQoJ2Nsb3NlJykgY2xvc2VFdmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBzZXQgZGlzbWlzc2libGUoZGlzbWlzc2libGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNtaXNzaWJsZSA9IGRpc21pc3NpYmxlO1xuICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG4gIH1cbiAgZ2V0IGRpc21pc3NpYmxlKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXNtaXNzaWJsZTtcbiAgfVxuXG4gIHByaXZhdGUgX2Rpc21pc3NpYmxlOiBib29sZWFuO1xuXG4gIHByaXZhdGUgY3VycmVudFRpbWVvdXQ6IGFueSA9IG51bGw7XG5cbiAgcHJpdmF0ZSBfdmFyaWFudDogJ2Vycm9yJyB8ICdpbmZvJyB8ICdzdWNjZXNzJyB8ICd3YXJuaW5nJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHR5cGU6ICdhbGVydCcgfCAndG9hc3QnKSB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3NsZHMtbm90aWZ5Jyk7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgYHNsZHMtbm90aWZ5XyR7dHlwZX1gKTtcbiAgICB0aGlzLnRvZ2dsZVRoZW1lQ2xhc3ModHJ1ZSwgdGhpcy52YXJpYW50KTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3JvbGUnLCB0eXBlID09PSAndG9hc3QnID8gJ3N0YXR1cycgOiAnYWxlcnQnKTtcbiAgfVxuXG4gIGNsb3NlKHJlYXNvbj86IHN0cmluZywgJGV2ZW50PzogRXZlbnQpIHtcbiAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgIGlmICgkZXZlbnQpIHtcbiAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICB0aGlzLmNsb3NlRXZlbnRFbWl0dGVyLmVtaXQocmVhc29uKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuY2xlYXJUaW1lb3V0KCk7XG4gIH1cblxuICBwcml2YXRlIGNsZWFyVGltZW91dCgpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50VGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY3VycmVudFRpbWVvdXQpO1xuICAgICAgdGhpcy5jdXJyZW50VGltZW91dCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVUaGVtZUNsYXNzKGlzQWRkOiBib29sZWFuLCBrbGFzczogc3RyaW5nKSB7XG4gICAgaWYgKCFrbGFzcykgeyByZXR1cm47IH1cblxuICAgIGNvbnN0IGVsID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgdGhpcy5yZW5kZXJlcltpc0FkZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbCwgYHNsZHMtdGhlbWVfJHtrbGFzc31gKTtcbiAgfVxufVxuIl19