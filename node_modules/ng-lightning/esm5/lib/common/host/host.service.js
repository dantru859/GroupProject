import { __assign, __decorate, __metadata } from "tslib";
import { Injectable, Renderer2, RendererFactory2, ElementRef } from '@angular/core';
var HostService = /** @class */ (function () {
    function HostService(rendererFactory2) {
        this.classMap = {};
        this.styleMap = {};
        this.renderer = rendererFactory2.createRenderer(null, null);
    }
    HostService.prototype.updateClass = function (_a, classMap) {
        var _this = this;
        var nativeElement = _a.nativeElement;
        var newClassMap = {};
        var remove = __assign({}, this.classMap);
        Object.keys(classMap).filter(function (i) { return classMap[i]; }).forEach(function (i) {
            newClassMap[i] = true;
            if (!_this.classMap[i]) {
                _this.renderer.addClass(nativeElement, i);
            }
            if (remove[i]) {
                remove[i] = false;
            }
        });
        Object.keys(remove).filter(function (i) { return remove[i]; }).forEach(function (i) { return _this.renderer.removeClass(nativeElement, i); });
        this.classMap = newClassMap;
    };
    HostService.prototype.updateStyle = function (_a, styleMap) {
        var _this = this;
        var nativeElement = _a.nativeElement;
        var remove = __assign({}, this.styleMap);
        Object.keys(styleMap).filter(function (i) { return styleMap[i]; }).forEach(function (i) {
            if (styleMap[i] !== false) {
                _this.renderer.setStyle(nativeElement, i, styleMap[i]);
            }
            if (remove[i]) {
                delete remove[i];
            }
        });
        Object.keys(remove).forEach(function (i) { return _this.renderer.removeStyle(nativeElement, i); });
        this.styleMap = styleMap;
    };
    HostService.ctorParameters = function () { return [
        { type: RendererFactory2 }
    ]; };
    HostService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [RendererFactory2])
    ], HostService);
    return HostService;
}());
export { HostService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9ob3N0L2hvc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BGO0lBNENFLHFCQUFZLGdCQUFrQztRQTNDdEMsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLGFBQVEsR0FBRyxFQUFFLENBQUM7UUEyQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBekNELGlDQUFXLEdBQVgsVUFBWSxFQUE2QixFQUFFLFFBQWdCO1FBQTNELGlCQW1CQztZQW5CYSxnQ0FBYTtRQUN6QixJQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBTSxNQUFNLGdCQUFRLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQztRQUVwQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ3RELFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7WUFFdEIsSUFBSSxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JCLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUMxQztZQUVELElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNiLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDbkI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFULENBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBM0MsQ0FBMkMsQ0FBQyxDQUFDO1FBRXJHLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDO0lBQzlCLENBQUM7SUFFRCxpQ0FBVyxHQUFYLFVBQVksRUFBNkIsRUFBRSxRQUFnQjtRQUEzRCxpQkFnQkM7WUFoQmEsZ0NBQWE7UUFDekIsSUFBTSxNQUFNLGdCQUFRLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQztRQUVwQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQ3RELElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRTtnQkFDekIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN2RDtZQUVELElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNiLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBM0MsQ0FBMkMsQ0FBQyxDQUFDO1FBRTlFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7O2dCQUU2QixnQkFBZ0I7O0lBNUNuQyxXQUFXO1FBRHZCLFVBQVUsRUFBRTt5Q0E2Q21CLGdCQUFnQjtPQTVDbkMsV0FBVyxDQStDdkI7SUFBRCxrQkFBQztDQUFBLEFBL0NELElBK0NDO1NBL0NZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBSZW5kZXJlcjIsIFJlbmRlcmVyRmFjdG9yeTIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEhvc3RTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjbGFzc01hcCA9IHt9O1xuICBwcml2YXRlIHN0eWxlTWFwID0ge307XG4gIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMjtcblxuICB1cGRhdGVDbGFzcyh7IG5hdGl2ZUVsZW1lbnQgfTogRWxlbWVudFJlZiwgY2xhc3NNYXA6IG9iamVjdCk6IHZvaWQge1xuICAgIGNvbnN0IG5ld0NsYXNzTWFwID0ge307XG4gICAgY29uc3QgcmVtb3ZlID0geyAuLi50aGlzLmNsYXNzTWFwIH07XG5cbiAgICBPYmplY3Qua2V5cyhjbGFzc01hcCkuZmlsdGVyKGkgPT4gY2xhc3NNYXBbaV0pLmZvckVhY2goaSA9PiB7XG4gICAgICBuZXdDbGFzc01hcFtpXSA9IHRydWU7XG5cbiAgICAgIGlmICghdGhpcy5jbGFzc01hcFtpXSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKG5hdGl2ZUVsZW1lbnQsIGkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlW2ldKSB7XG4gICAgICAgIHJlbW92ZVtpXSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMocmVtb3ZlKS5maWx0ZXIoaSA9PiByZW1vdmVbaV0pLmZvckVhY2goaSA9PiB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKG5hdGl2ZUVsZW1lbnQsIGkpKTtcblxuICAgIHRoaXMuY2xhc3NNYXAgPSBuZXdDbGFzc01hcDtcbiAgfVxuXG4gIHVwZGF0ZVN0eWxlKHsgbmF0aXZlRWxlbWVudCB9OiBFbGVtZW50UmVmLCBzdHlsZU1hcDogb2JqZWN0KTogdm9pZCB7XG4gICAgY29uc3QgcmVtb3ZlID0geyAuLi50aGlzLnN0eWxlTWFwIH07XG5cbiAgICBPYmplY3Qua2V5cyhzdHlsZU1hcCkuZmlsdGVyKGkgPT4gc3R5bGVNYXBbaV0pLmZvckVhY2goaSA9PiB7XG4gICAgICBpZiAoc3R5bGVNYXBbaV0gIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUobmF0aXZlRWxlbWVudCwgaSwgc3R5bGVNYXBbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlW2ldKSB7XG4gICAgICAgIGRlbGV0ZSByZW1vdmVbaV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhyZW1vdmUpLmZvckVhY2goaSA9PiB0aGlzLnJlbmRlcmVyLnJlbW92ZVN0eWxlKG5hdGl2ZUVsZW1lbnQsIGkpKTtcblxuICAgIHRoaXMuc3R5bGVNYXAgPSBzdHlsZU1hcDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyRmFjdG9yeTI6IFJlbmRlcmVyRmFjdG9yeTIpIHtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJGYWN0b3J5Mi5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcbiAgfVxufVxuIl19