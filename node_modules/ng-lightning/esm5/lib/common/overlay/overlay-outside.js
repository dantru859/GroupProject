import { __decorate, __metadata, __param } from "tslib";
import { Directive, Output, EventEmitter, OnInit, OnDestroy, NgZone, Self } from '@angular/core';
import { CdkConnectedOverlay, ScrollDispatcher } from '@angular/cdk/overlay';
var NglOverlaynglOverlayScrolledOutsideViewDirective = /** @class */ (function () {
    function NglOverlaynglOverlayScrolledOutsideViewDirective(cdkOverlay, ngZone, scrollDispatcher) {
        this.cdkOverlay = cdkOverlay;
        this.ngZone = ngZone;
        this.scrollDispatcher = scrollDispatcher;
        this.overlayOutside = new EventEmitter();
    }
    NglOverlaynglOverlayScrolledOutsideViewDirective.prototype.ngOnInit = function () {
        var _this = this;
        var elementRef = this.cdkOverlay.origin.elementRef;
        var scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(elementRef).map(function (container) { return container.getElementRef(); });
        if (!scrollableAncestors || !scrollableAncestors.length)
            return;
        this.subscription = this.cdkOverlay.positionChange.subscribe(function () {
            var bounds = elementRef.nativeElement.getBoundingClientRect();
            for (var i = 0, n = scrollableAncestors.length; i < n; i++) {
                var ancestorsBounds = scrollableAncestors[i].nativeElement.getBoundingClientRect();
                if (isElementOutside(bounds, ancestorsBounds)) {
                    _this.ngZone.run(function () { return _this.overlayOutside.emit(); });
                    return;
                }
            }
        });
    };
    NglOverlaynglOverlayScrolledOutsideViewDirective.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    NglOverlaynglOverlayScrolledOutsideViewDirective.ctorParameters = function () { return [
        { type: CdkConnectedOverlay, decorators: [{ type: Self }] },
        { type: NgZone },
        { type: ScrollDispatcher }
    ]; };
    __decorate([
        Output('nglOverlayScrolledOutsideView'),
        __metadata("design:type", EventEmitter)
    ], NglOverlaynglOverlayScrolledOutsideViewDirective.prototype, "overlayOutside", void 0);
    NglOverlaynglOverlayScrolledOutsideViewDirective = __decorate([
        Directive({
            selector: '[nglOverlayScrolledOutsideView]'
        }),
        __param(0, Self()),
        __metadata("design:paramtypes", [CdkConnectedOverlay,
            NgZone,
            ScrollDispatcher])
    ], NglOverlaynglOverlayScrolledOutsideViewDirective);
    return NglOverlaynglOverlayScrolledOutsideViewDirective;
}());
export { NglOverlaynglOverlayScrolledOutsideViewDirective };
/**
 * Gets whether an element is scrolled outside of view by its parent scrolling container.
 * @param element Dimensions of the element (from getBoundingClientRect)
 * @param container Dimensions of element's scrolling container (from getBoundingClientRect)
 * @returns Whether the element is scrolled out of view
 */
export function isElementOutside(element, container) {
    return (element.bottom < container.top || element.top > container.bottom ||
        element.right < container.left || element.left > container.right);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1vdXRzaWRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi9vdmVybGF5L292ZXJsYXktb3V0c2lkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUs3RTtJQU1FLDBEQUE0QixVQUErQixFQUN2QyxNQUFjLEVBQ2QsZ0JBQWtDO1FBRjFCLGVBQVUsR0FBVixVQUFVLENBQXFCO1FBQ3ZDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBTmIsbUJBQWMsR0FBdUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU14QyxDQUFDO0lBRTFELG1FQUFRLEdBQVI7UUFBQSxpQkFpQkM7UUFoQkMsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ3JELElBQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLFNBQVMsSUFBSSxPQUFBLFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFBekIsQ0FBeUIsQ0FBQyxDQUFDO1FBRXRJLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU07WUFBRSxPQUFPO1FBRWhFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO1lBQzNELElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUVoRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFELElBQU0sZUFBZSxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2dCQUNyRixJQUFJLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsRUFBRTtvQkFDN0MsS0FBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQTFCLENBQTBCLENBQUMsQ0FBQztvQkFDbEQsT0FBTztpQkFDUjthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsc0VBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7Z0JBNUJ1QyxtQkFBbUIsdUJBQTlDLElBQUk7Z0JBQ1csTUFBTTtnQkFDSSxnQkFBZ0I7O0lBTmI7UUFBeEMsTUFBTSxDQUFDLCtCQUErQixDQUFDO2tDQUFpQixZQUFZOzRGQUE0QjtJQUZ0RixnREFBZ0Q7UUFINUQsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGlDQUFpQztTQUM1QyxDQUFDO1FBT2EsV0FBQSxJQUFJLEVBQUUsQ0FBQTt5Q0FBcUIsbUJBQW1CO1lBQy9CLE1BQU07WUFDSSxnQkFBZ0I7T0FSM0MsZ0RBQWdELENBbUM1RDtJQUFELHVEQUFDO0NBQUEsQUFuQ0QsSUFtQ0M7U0FuQ1ksZ0RBQWdEO0FBcUM3RDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxPQUFtQixFQUFFLFNBQXFCO0lBQ3pFLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTTtRQUNoRSxPQUFPLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDNUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT25EZXN0cm95LCBOZ1pvbmUsIFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2RrQ29ubmVjdGVkT3ZlcmxheSwgU2Nyb2xsRGlzcGF0Y2hlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25nbE92ZXJsYXlTY3JvbGxlZE91dHNpZGVWaWV3XSdcbn0pXG5leHBvcnQgY2xhc3MgTmdsT3ZlcmxheW5nbE92ZXJsYXlTY3JvbGxlZE91dHNpZGVWaWV3RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBPdXRwdXQoJ25nbE92ZXJsYXlTY3JvbGxlZE91dHNpZGVWaWV3Jykgb3ZlcmxheU91dHNpZGU6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKEBTZWxmKCkgcHJpdmF0ZSBjZGtPdmVybGF5OiBDZGtDb25uZWN0ZWRPdmVybGF5LFxuICAgICAgICAgICAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgICAgICAgICAgICBwcml2YXRlIHNjcm9sbERpc3BhdGNoZXI6IFNjcm9sbERpc3BhdGNoZXIpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgZWxlbWVudFJlZiA9IHRoaXMuY2RrT3ZlcmxheS5vcmlnaW4uZWxlbWVudFJlZjtcbiAgICBjb25zdCBzY3JvbGxhYmxlQW5jZXN0b3JzID0gdGhpcy5zY3JvbGxEaXNwYXRjaGVyLmdldEFuY2VzdG9yU2Nyb2xsQ29udGFpbmVycyhlbGVtZW50UmVmKS5tYXAoY29udGFpbmVyID0+IGNvbnRhaW5lci5nZXRFbGVtZW50UmVmKCkpO1xuXG4gICAgaWYgKCFzY3JvbGxhYmxlQW5jZXN0b3JzIHx8ICFzY3JvbGxhYmxlQW5jZXN0b3JzLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmNka092ZXJsYXkucG9zaXRpb25DaGFuZ2Uuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbnN0IGJvdW5kcyA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIG4gPSBzY3JvbGxhYmxlQW5jZXN0b3JzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBjb25zdCBhbmNlc3RvcnNCb3VuZHMgPSBzY3JvbGxhYmxlQW5jZXN0b3JzW2ldLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChpc0VsZW1lbnRPdXRzaWRlKGJvdW5kcywgYW5jZXN0b3JzQm91bmRzKSkge1xuICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLm92ZXJsYXlPdXRzaWRlLmVtaXQoKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2V0cyB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgc2Nyb2xsZWQgb3V0c2lkZSBvZiB2aWV3IGJ5IGl0cyBwYXJlbnQgc2Nyb2xsaW5nIGNvbnRhaW5lci5cbiAqIEBwYXJhbSBlbGVtZW50IERpbWVuc2lvbnMgb2YgdGhlIGVsZW1lbnQgKGZyb20gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KVxuICogQHBhcmFtIGNvbnRhaW5lciBEaW1lbnNpb25zIG9mIGVsZW1lbnQncyBzY3JvbGxpbmcgY29udGFpbmVyIChmcm9tIGdldEJvdW5kaW5nQ2xpZW50UmVjdClcbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsZWQgb3V0IG9mIHZpZXdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudE91dHNpZGUoZWxlbWVudDogQ2xpZW50UmVjdCwgY29udGFpbmVyOiBDbGllbnRSZWN0KSB7XG4gIHJldHVybiAoZWxlbWVudC5ib3R0b20gPCBjb250YWluZXIudG9wIHx8IGVsZW1lbnQudG9wID4gY29udGFpbmVyLmJvdHRvbSB8fFxuICAgICAgICAgIGVsZW1lbnQucmlnaHQgPCBjb250YWluZXIubGVmdCB8fCBlbGVtZW50LmxlZnQgPiBjb250YWluZXIucmlnaHQpO1xufVxuIl19