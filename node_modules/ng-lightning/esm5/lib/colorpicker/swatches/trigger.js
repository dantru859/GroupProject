import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';
var NglColorpickerSwatchTrigger = /** @class */ (function () {
    function NglColorpickerSwatchTrigger(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.selectedChange = new EventEmitter();
        this.renderer.addClass(this.el.nativeElement, 'slds-color-picker__swatch-trigger');
        this.renderer.setAttribute(this.el.nativeElement, 'role', 'option');
    }
    NglColorpickerSwatchTrigger.prototype.onSelect = function () {
        return this.selectedChange.emit();
    };
    NglColorpickerSwatchTrigger.prototype.focus = function () {
        this.el.nativeElement.focus();
        this.onSelect();
    };
    NglColorpickerSwatchTrigger.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        HostBinding('class.ngl-color-picker__swatch-selected'),
        Input(),
        __metadata("design:type", Boolean)
    ], NglColorpickerSwatchTrigger.prototype, "selected", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglColorpickerSwatchTrigger.prototype, "selectedChange", void 0);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NglColorpickerSwatchTrigger.prototype, "onSelect", null);
    NglColorpickerSwatchTrigger = __decorate([
        Directive({
            selector: '[nglColorpickerSwatchTrigger]',
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglColorpickerSwatchTrigger);
    return NglColorpickerSwatchTrigger;
}());
export { NglColorpickerSwatchTrigger };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9jb2xvcnBpY2tlci9zd2F0Y2hlcy90cmlnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUt6SDtJQU9FLHFDQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBM0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGckQsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRzVDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLG1DQUFtQyxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFHRCw4Q0FBUSxHQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCwyQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7O2dCQWJ1QixVQUFVO2dCQUFvQixTQUFTOztJQUp0RDtRQURSLFdBQVcsQ0FBQyx5Q0FBeUMsQ0FBQztRQUN0RCxLQUFLLEVBQUU7O2lFQUE0QjtJQUUxQjtRQUFULE1BQU0sRUFBRTs7dUVBQXFDO0lBUTlDO1FBREMsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7OzsrREFHckI7SUFmVSwyQkFBMkI7UUFIdkMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLCtCQUErQjtTQUMxQyxDQUFDO3lDQVF3QixVQUFVLEVBQW9CLFNBQVM7T0FQcEQsMkJBQTJCLENBc0J2QztJQUFELGtDQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0F0QlksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmdsQ29sb3JwaWNrZXJTd2F0Y2hUcmlnZ2VyXScsXG59KVxuZXhwb3J0IGNsYXNzIE5nbENvbG9ycGlja2VyU3dhdGNoVHJpZ2dlciB7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5uZ2wtY29sb3ItcGlja2VyX19zd2F0Y2gtc2VsZWN0ZWQnKVxuICBASW5wdXQoKSByZWFkb25seSBzZWxlY3RlZDogYm9vbGVhbjtcblxuICBAT3V0cHV0KCkgc2VsZWN0ZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdzbGRzLWNvbG9yLXBpY2tlcl9fc3dhdGNoLXRyaWdnZXInKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdyb2xlJywgJ29wdGlvbicpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBvblNlbGVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3RlZENoYW5nZS5lbWl0KCk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICB0aGlzLm9uU2VsZWN0KCk7XG4gIH1cblxufVxuIl19