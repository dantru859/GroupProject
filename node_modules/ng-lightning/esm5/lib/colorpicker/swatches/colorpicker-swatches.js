import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, Input, Output, EventEmitter, HostListener, ViewChildren, QueryList, OnChanges } from '@angular/core';
import { LEFT_ARROW, DOWN_ARROW, UP_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { trapEvent } from '../../util/util';
import { NglColorpickerSwatchTrigger } from './trigger';
var NglColorpickerSwatches = /** @class */ (function () {
    function NglColorpickerSwatches(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.hexChange = new EventEmitter();
        this.swatchColors = [];
        this.renderer.addClass(this.el.nativeElement, 'slds-color-picker__swatches');
    }
    NglColorpickerSwatches.prototype.ngOnChanges = function () {
        this.activeIndex = Math.max(this.swatchColors.indexOf(this.hex), 0);
    };
    NglColorpickerSwatches.prototype.onSelectViaInteraction = function (evt) {
        var direction = 0;
        switch (evt.keyCode) {
            case LEFT_ARROW:
            case UP_ARROW:
                direction = -1;
                break;
            case RIGHT_ARROW:
            case DOWN_ARROW:
                direction = 1;
                break;
            default:
                return;
        }
        trapEvent(evt);
        var activeIndex = this.swatchColors.indexOf(this.hex);
        var index = (this.triggers.length + activeIndex + direction) % this.triggers.length;
        var trigger = this.triggers.toArray()[index];
        trigger.focus();
    };
    NglColorpickerSwatches.prototype.isSelected = function (hex) {
        return hex === this.hex;
    };
    NglColorpickerSwatches.prototype.onSelect = function (hex) {
        this.hexChange.emit(hex);
    };
    NglColorpickerSwatches.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglColorpickerSwatches.prototype, "hex", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglColorpickerSwatches.prototype, "hexChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglColorpickerSwatches.prototype, "swatchColors", void 0);
    __decorate([
        ViewChildren(NglColorpickerSwatchTrigger),
        __metadata("design:type", QueryList)
    ], NglColorpickerSwatches.prototype, "triggers", void 0);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], NglColorpickerSwatches.prototype, "onSelectViaInteraction", null);
    NglColorpickerSwatches = __decorate([
        Component({
            selector: 'ngl-colorpicker-swatches',
            template: "\n<li class=\"slds-color-picker__swatch\" *ngFor=\"let color of swatchColors; let i = index\" role=\"presentation\"><a nglColorpickerSwatchTrigger href=\"javascript:void(0);\" [selected]=\"isSelected(color)\" [attr.tabindex]=\"activeIndex === i ? 0 : -1\" (selectedChange)=\"onSelect(color)\"><span nglColorpickerSwatch [color]=\"color\"></span></a></li>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: ["\n    .ngl-color-picker__swatch-selected {\n      box-shadow: rgb(117, 112, 112) 1px 1px 1px;\n  "]
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglColorpickerSwatches);
    return NglColorpickerSwatches;
}());
export { NglColorpickerSwatches };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JwaWNrZXItc3dhdGNoZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvY29sb3JwaWNrZXIvc3dhdGNoZXMvY29sb3JwaWNrZXItc3dhdGNoZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFDN0YsWUFBWSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBV3hEO0lBWUUsZ0NBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVJyRCxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUV4QyxpQkFBWSxHQUFhLEVBQUUsQ0FBQztRQU9uQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCw0Q0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBR0QsdURBQXNCLEdBQXRCLFVBQXVCLEdBQWtCO1FBQ3ZDLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNsQixRQUFRLEdBQUcsQ0FBQyxPQUFPLEVBQUU7WUFDbkIsS0FBSyxVQUFVLENBQUM7WUFDaEIsS0FBSyxRQUFRO2dCQUNYLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDZixNQUFNO1lBQ1IsS0FBSyxXQUFXLENBQUM7WUFDakIsS0FBSyxVQUFVO2dCQUNiLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQ2QsTUFBTTtZQUNSO2dCQUNFLE9BQU87U0FDVjtRQUVELFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVmLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV4RCxJQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLFdBQVcsR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUN0RixJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRUQsMkNBQVUsR0FBVixVQUFXLEdBQVc7UUFDcEIsT0FBTyxHQUFHLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUMxQixDQUFDO0lBRUQseUNBQVEsR0FBUixVQUFTLEdBQVc7UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Z0JBdkN1QixVQUFVO2dCQUFvQixTQUFTOztJQVZ0RDtRQUFSLEtBQUssRUFBRTs7dURBQXNCO0lBRXBCO1FBQVQsTUFBTSxFQUFFOzs2REFBd0M7SUFFeEM7UUFBUixLQUFLLEVBQUU7O2dFQUE2QjtJQUVNO1FBQTFDLFlBQVksQ0FBQywyQkFBMkIsQ0FBQztrQ0FBb0IsU0FBUzs0REFBOEI7SUFhckc7UUFEQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O3lDQUNSLGFBQWE7O3dFQXNCeEM7SUEzQ1Usc0JBQXNCO1FBVGxDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSwwQkFBMEI7WUFDcEMsOFdBQTBDO1lBQzFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO3FCQUN0QyxtR0FHUjtTQUNGLENBQUM7eUNBYXdCLFVBQVUsRUFBb0IsU0FBUztPQVpwRCxzQkFBc0IsQ0FvRGxDO0lBQUQsNkJBQUM7Q0FBQSxBQXBERCxJQW9EQztTQXBEWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlcixcbiAgSG9zdExpc3RlbmVyLCBWaWV3Q2hpbGRyZW4sIFF1ZXJ5TGlzdCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMRUZUX0FSUk9XLCBET1dOX0FSUk9XLCBVUF9BUlJPVywgUklHSFRfQVJST1cgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgdHJhcEV2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE5nbENvbG9ycGlja2VyU3dhdGNoVHJpZ2dlciB9IGZyb20gJy4vdHJpZ2dlcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC1jb2xvcnBpY2tlci1zd2F0Y2hlcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb2xvcnBpY2tlci1zd2F0Y2hlcy5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlczogW2BcbiAgICAubmdsLWNvbG9yLXBpY2tlcl9fc3dhdGNoLXNlbGVjdGVkIHtcbiAgICAgIGJveC1zaGFkb3c6IHJnYigxMTcsIDExMiwgMTEyKSAxcHggMXB4IDFweDtcbiAgYF1cbn0pXG5leHBvcnQgY2xhc3MgTmdsQ29sb3JwaWNrZXJTd2F0Y2hlcyBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgQElucHV0KCkgcmVhZG9ubHkgaGV4OiBzdHJpbmc7XG5cbiAgQE91dHB1dCgpIGhleENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIEBJbnB1dCgpIHN3YXRjaENvbG9yczogc3RyaW5nW10gPSBbXTtcblxuICBAVmlld0NoaWxkcmVuKE5nbENvbG9ycGlja2VyU3dhdGNoVHJpZ2dlcikgcmVhZG9ubHkgdHJpZ2dlcnM6IFF1ZXJ5TGlzdDxOZ2xDb2xvcnBpY2tlclN3YXRjaFRyaWdnZXI+O1xuXG4gIGFjdGl2ZUluZGV4OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdzbGRzLWNvbG9yLXBpY2tlcl9fc3dhdGNoZXMnKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuYWN0aXZlSW5kZXggPSBNYXRoLm1heCh0aGlzLnN3YXRjaENvbG9ycy5pbmRleE9mKHRoaXMuaGV4KSwgMCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgb25TZWxlY3RWaWFJbnRlcmFjdGlvbihldnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBsZXQgZGlyZWN0aW9uID0gMDtcbiAgICBzd2l0Y2ggKGV2dC5rZXlDb2RlKSB7XG4gICAgICBjYXNlIExFRlRfQVJST1c6XG4gICAgICBjYXNlIFVQX0FSUk9XOlxuICAgICAgICBkaXJlY3Rpb24gPSAtMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJJR0hUX0FSUk9XOlxuICAgICAgY2FzZSBET1dOX0FSUk9XOlxuICAgICAgICBkaXJlY3Rpb24gPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cmFwRXZlbnQoZXZ0KTtcblxuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gdGhpcy5zd2F0Y2hDb2xvcnMuaW5kZXhPZih0aGlzLmhleCk7XG5cbiAgICBjb25zdCBpbmRleCA9ICh0aGlzLnRyaWdnZXJzLmxlbmd0aCArIGFjdGl2ZUluZGV4ICsgZGlyZWN0aW9uKSAlIHRoaXMudHJpZ2dlcnMubGVuZ3RoO1xuICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLnRyaWdnZXJzLnRvQXJyYXkoKVtpbmRleF07XG4gICAgdHJpZ2dlci5mb2N1cygpO1xuICB9XG5cbiAgaXNTZWxlY3RlZChoZXg6IHN0cmluZykge1xuICAgIHJldHVybiBoZXggPT09IHRoaXMuaGV4O1xuICB9XG5cbiAgb25TZWxlY3QoaGV4OiBzdHJpbmcpIHtcbiAgICB0aGlzLmhleENoYW5nZS5lbWl0KGhleCk7XG4gIH1cbn1cbiJdfQ==