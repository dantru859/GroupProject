export function getHexFromHsv(hsv) {
    return hsv ? getHexFromRgb(getRgbFromHsv(hsv)) : null;
}
function getRgbFromHsv(_a) {
    var hue = _a.hue, saturation = _a.saturation, value = _a.value;
    var hueRatio = hue / 360;
    var satRatio = saturation / 100;
    var valRatio = value / 100;
    var red;
    var green;
    var blue;
    var i = Math.floor(hueRatio * 6);
    var f = hueRatio * 6 - i;
    var p = valRatio * (1 - satRatio);
    var q = valRatio * (1 - f * satRatio);
    var t = valRatio * (1 - (1 - f) * satRatio);
    switch (i % 6) {
        case 0:
            red = valRatio;
            green = t;
            blue = p;
            break;
        case 1:
            red = q;
            green = valRatio;
            blue = p;
            break;
        case 2:
            red = p;
            green = valRatio;
            blue = t;
            break;
        case 3:
            red = p;
            green = q;
            blue = valRatio;
            break;
        case 4:
            red = t;
            green = p;
            blue = valRatio;
            break;
        default:
            red = valRatio;
            green = p;
            blue = q;
    }
    return {
        red: Math.round(red * 255),
        blue: Math.round(blue * 255),
        green: Math.round(green * 255),
    };
}
function getHex(color) {
    return ("0" + Math.round(color).toString(16)).substr(-2);
}
export function getHexFromRgb(_a) {
    var red = _a.red, green = _a.green, blue = _a.blue;
    return "#" + getHex(red) + getHex(green) + getHex(blue);
}
export function getHsvFromHex(hex) {
    return hex ? getHsvFromRgb(getRgbFromHex(hex)) : null;
}
function getHsvFromRgb(_a) {
    var red = _a.red, green = _a.green, blue = _a.blue;
    var redRatio = red / 255;
    var greenRatio = green / 255;
    var blueRatio = blue / 255;
    var max = Math.max(redRatio, greenRatio, blueRatio);
    var min = Math.min(redRatio, greenRatio, blueRatio);
    var delta = max - min;
    var saturation = max === 0 ? 0 : delta / max * 100;
    var value = max * 100;
    var hue;
    if (max === min) {
        hue = 0;
    }
    else {
        if (redRatio === max) {
            hue =
                (greenRatio - blueRatio) / delta + (greenRatio < blueRatio ? 6 : 0);
        }
        else if (greenRatio === max) {
            hue = (blueRatio - redRatio) / delta + 2;
        }
        else {
            hue = (redRatio - greenRatio) / delta + 4;
        }
        hue *= 60;
    }
    return { hue: hue, saturation: saturation, value: value };
}
var HEX_REGEX = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
export function getRgbFromHex(hex) {
    var result = HEX_REGEX.exec(toSixDigitHex(hex));
    return {
        red: parseInt(result[1], 16),
        green: parseInt(result[2], 16),
        blue: parseInt(result[3], 16),
    };
}
function toSixDigitHex(value) {
    var shortHandHex = /^#([a-f\d])([a-f\d])([a-f\d])$/i;
    var match = shortHandHex.exec(value);
    if (match) {
        return "#" + match[1] + match[1] + match[2] + match[2] + match[3] + match[3];
    }
    return value;
}
export function isValidHex(value) {
    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);
}
//# sourceMappingURL=data:application/json;base64,