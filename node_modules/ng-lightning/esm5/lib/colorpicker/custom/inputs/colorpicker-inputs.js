import { __decorate, __metadata } from "tslib";
import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { _isNumberValue } from '@angular/cdk/coercion';
import { getHexFromRgb, getRgbFromHex, isValidHex } from '../../util';
import { uniqueId } from '../../../util/util';
var NglColorpickerInputs = /** @class */ (function () {
    function NglColorpickerInputs() {
        this.hexChange = new EventEmitter();
        this.red = 0;
        this.green = 0;
        this.blue = 0;
        this.uid = uniqueId('colorpicker-inputs');
    }
    Object.defineProperty(NglColorpickerInputs.prototype, "hex", {
        get: function () {
            return this._hex;
        },
        set: function (hex) {
            if (hex) {
                this._hex = hex;
                var _a = getRgbFromHex(this.hex), red = _a.red, green = _a.green, blue = _a.blue;
                this.red = red;
                this.green = green;
                this.blue = blue;
            }
        },
        enumerable: true,
        configurable: true
    });
    NglColorpickerInputs.prototype.updateHex = function (value) {
        var isValid = isValidHex(value);
        if (!isValid) {
            this.red = this.green = this.blue = null;
        }
        this.hexChange.emit(isValid ? value : null);
    };
    NglColorpickerInputs.prototype.onRGB = function (key, value) {
        this[key] = value;
        var hex = this.isRGBValid() ? getHexFromRgb({ red: this.red, green: this.green, blue: this.blue }) : null;
        this.hexChange.emit(hex);
    };
    Object.defineProperty(NglColorpickerInputs.prototype, "isHexInvalid", {
        get: function () {
            return this.red === null && this.green === null && this.blue === null;
        },
        enumerable: true,
        configurable: true
    });
    NglColorpickerInputs.prototype.isColorNumberValid = function (key) {
        var value = this[key];
        return _isNumberValue(value) && value >= 0 && value <= 255;
    };
    NglColorpickerInputs.prototype.isRGBValid = function () {
        var _this = this;
        return ['red', 'green', 'blue'].every(function (prop) { return _this.isColorNumberValid(prop); });
    };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NglColorpickerInputs.prototype, "hex", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglColorpickerInputs.prototype, "hexChange", void 0);
    NglColorpickerInputs = __decorate([
        Component({
            selector: 'ngl-colorpicker-inputs',
            template: "\n<div class=\"slds-color-picker__custom-inputs\">\n  <div class=\"slds-form-element slds-color-picker__input-custom-hex\" [class.slds-has-error]=\"isHexInvalid\">\n    <label class=\"slds-form-element__label\" [attr.for]=\"uid + 'hex'\">Hex</label>\n    <div class=\"slds-form-element__control\">\n      <input class=\"slds-input\" [id]=\"uid + 'hex'\" type=\"text\" maxlength=\"7\" [value]=\"hex\" (input)=\"updateHex($event.target.value)\">\n    </div>\n  </div>\n  <div class=\"slds-form-element\" [class.slds-has-error]=\"!isColorNumberValid('red')\">\n    <label class=\"slds-form-element__label\" [attr.for]=\"uid + 'red'\"><abbr title=\"red\">R</abbr></label>\n    <div class=\"slds-form-element__control\">\n      <input class=\"slds-input\" [id]=\"uid + 'red'\" type=\"text\" maxlength=\"3\" [value]=\"red\" (input)=\"onRGB('red', $event.target.value)\">\n    </div>\n  </div>\n  <div class=\"slds-form-element\" [class.slds-has-error]=\"!isColorNumberValid('green')\">\n    <label class=\"slds-form-element__label\" [attr.for]=\"uid + 'green'\"><abbr title=\"green\">G</abbr></label>\n    <div class=\"slds-form-element__control\">\n      <input class=\"slds-input\" [id]=\"uid + 'green'\" type=\"text\" maxlength=\"3\" [value]=\"green\" (input)=\"onRGB('green', $event.target.value)\">\n    </div>\n  </div>\n  <div class=\"slds-form-element\" [class.slds-has-error]=\"!isColorNumberValid('blue')\">\n    <label class=\"slds-form-element__label\" [attr.for]=\"uid + 'blue'\"><abbr title=\"blue\">B</abbr></label>\n    <div class=\"slds-form-element__control\">\n      <input class=\"slds-input\" [id]=\"uid + 'blue'\" type=\"text\" maxlength=\"3\" [value]=\"blue\" (input)=\"onRGB('blue', $event.target.value)\">\n    </div>\n  </div>\n</div>\n<div class=\"slds-color-picker\">\n  <p class=\"slds-form-error slds-color-picker__input-custom-error\" *ngIf=\"isHexInvalid; else rgbError\">The color entered is invalid</p>\n  <ng-template #rgbError>\n    <p class=\"slds-form-error slds-color-picker__input-custom-error\" *ngIf=\"!isRGBValid()\">The value needs to be an integer from 0-255</p>\n  </ng-template>\n</div>",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], NglColorpickerInputs);
    return NglColorpickerInputs;
}());
export { NglColorpickerInputs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JwaWNrZXItaW5wdXRzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NvbG9ycGlja2VyL2N1c3RvbS9pbnB1dHMvY29sb3JwaWNrZXItaW5wdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBTzlDO0lBQUE7UUFlWSxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUVqRCxRQUFHLEdBQUcsQ0FBQyxDQUFDO1FBRVIsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUVWLFNBQUksR0FBRyxDQUFDLENBQUM7UUFFVCxRQUFHLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFnQ3ZDLENBQUM7SUFyRFUsc0JBQUkscUNBQUc7YUFTaEI7WUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkIsQ0FBQzthQVhRLFVBQVEsR0FBVztZQUMxQixJQUFJLEdBQUcsRUFBRTtnQkFDUCxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztnQkFDVixJQUFBLDRCQUE4QyxFQUE1QyxZQUFHLEVBQUUsZ0JBQUssRUFBRSxjQUFnQyxDQUFDO2dCQUNyRCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7YUFDbEI7UUFDSCxDQUFDOzs7T0FBQTtJQWlCRCx3Q0FBUyxHQUFULFVBQVUsS0FBSztRQUNiLElBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQzFDO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxvQ0FBSyxHQUFMLFVBQU0sR0FBVyxFQUFFLEtBQWE7UUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUVsQixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzVHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxzQkFBSSw4Q0FBWTthQUFoQjtZQUNFLE9BQU8sSUFBSSxDQUFDLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7UUFDeEUsQ0FBQzs7O09BQUE7SUFFRCxpREFBa0IsR0FBbEIsVUFBbUIsR0FBVztRQUM1QixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUUsR0FBRyxDQUFFLENBQUM7UUFDMUIsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksR0FBRyxDQUFDO0lBQzdELENBQUM7SUFFRCx5Q0FBVSxHQUFWO1FBQUEsaUJBRUM7UUFEQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxJQUFJLElBQUssT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQTdCLENBQTZCLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBbkRRO1FBQVIsS0FBSyxFQUFFOzs7bURBUVA7SUFLUztRQUFULE1BQU0sRUFBRTs7MkRBQXdDO0lBZnRDLG9CQUFvQjtRQUxoQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLDJsRUFBd0M7WUFDeEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07U0FDaEQsQ0FBQztPQUNXLG9CQUFvQixDQXVEaEM7SUFBRCwyQkFBQztDQUFBLEFBdkRELElBdURDO1NBdkRZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgX2lzTnVtYmVyVmFsdWUgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgZ2V0SGV4RnJvbVJnYiwgZ2V0UmdiRnJvbUhleCwgaXNWYWxpZEhleCB9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHsgdW5pcXVlSWQgfSBmcm9tICcuLi8uLi8uLi91dGlsL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtY29sb3JwaWNrZXItaW5wdXRzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbG9ycGlja2VyLWlucHV0cy5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE5nbENvbG9ycGlja2VySW5wdXRzIHtcblxuICBASW5wdXQoKSBzZXQgaGV4KGhleDogc3RyaW5nKSB7XG4gICAgaWYgKGhleCkge1xuICAgICAgdGhpcy5faGV4ID0gaGV4O1xuICAgICAgY29uc3QgeyByZWQsIGdyZWVuLCBibHVlIH0gPSBnZXRSZ2JGcm9tSGV4KHRoaXMuaGV4KTtcbiAgICAgIHRoaXMucmVkID0gcmVkO1xuICAgICAgdGhpcy5ncmVlbiA9IGdyZWVuO1xuICAgICAgdGhpcy5ibHVlID0gYmx1ZTtcbiAgICB9XG4gIH1cbiAgZ2V0IGhleCgpIHtcbiAgICByZXR1cm4gdGhpcy5faGV4O1xuICB9XG5cbiAgQE91dHB1dCgpIGhleENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIHJlZCA9IDA7XG5cbiAgZ3JlZW4gPSAwO1xuXG4gIGJsdWUgPSAwO1xuXG4gIHVpZCA9IHVuaXF1ZUlkKCdjb2xvcnBpY2tlci1pbnB1dHMnKTtcblxuICBwcml2YXRlIF9oZXg6IHN0cmluZztcblxuICB1cGRhdGVIZXgodmFsdWUpIHtcbiAgICBjb25zdCBpc1ZhbGlkID0gaXNWYWxpZEhleCh2YWx1ZSk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICB0aGlzLnJlZCA9IHRoaXMuZ3JlZW4gPSB0aGlzLmJsdWUgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmhleENoYW5nZS5lbWl0KGlzVmFsaWQgPyB2YWx1ZSA6IG51bGwpO1xuICB9XG5cbiAgb25SR0Ioa2V5OiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzW2tleV0gPSB2YWx1ZTtcblxuICAgIGNvbnN0IGhleCA9IHRoaXMuaXNSR0JWYWxpZCgpID8gZ2V0SGV4RnJvbVJnYih7IHJlZDogdGhpcy5yZWQsIGdyZWVuOiB0aGlzLmdyZWVuLCBibHVlOiB0aGlzLmJsdWUgfSkgOiBudWxsO1xuICAgIHRoaXMuaGV4Q2hhbmdlLmVtaXQoaGV4KTtcbiAgfVxuXG4gIGdldCBpc0hleEludmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVkID09PSBudWxsICYmIHRoaXMuZ3JlZW4gPT09IG51bGwgJiYgdGhpcy5ibHVlID09PSBudWxsO1xuICB9XG5cbiAgaXNDb2xvck51bWJlclZhbGlkKGtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzWyBrZXkgXTtcbiAgICByZXR1cm4gX2lzTnVtYmVyVmFsdWUodmFsdWUpICYmIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gMjU1O1xuICB9XG5cbiAgaXNSR0JWYWxpZCgpIHtcbiAgICByZXR1cm4gWydyZWQnLCAnZ3JlZW4nLCAnYmx1ZSddLmV2ZXJ5KChwcm9wKSA9PiB0aGlzLmlzQ29sb3JOdW1iZXJWYWxpZChwcm9wKSk7XG4gIH1cblxufVxuIl19