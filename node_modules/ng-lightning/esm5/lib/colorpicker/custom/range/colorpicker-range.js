import { __assign, __decorate, __metadata, __param } from "tslib";
import { Component, ElementRef, ChangeDetectionStrategy, Input, ViewChild, Output, EventEmitter, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { LEFT_ARROW, DOWN_ARROW, UP_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { flatMap, map, takeUntil, startWith } from 'rxjs/operators';
import { merge, fromEvent } from 'rxjs';
import { getHexFromHsv } from '../../util';
import { trapEvent, uniqueId } from '../../../util/util';
var NglColorpickerRange = /** @class */ (function () {
    function NglColorpickerRange(document) {
        this.document = document;
        this.hsvChange = new EventEmitter();
        this.uid = uniqueId('colorpicker-range');
        this._hsv = { hue: 0, saturation: 0, value: 0 };
    }
    Object.defineProperty(NglColorpickerRange.prototype, "hsv", {
        get: function () {
            return this._hsv;
        },
        set: function (hsv) {
            if (hsv) {
                this._hsv = hsv;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglColorpickerRange.prototype, "hex", {
        get: function () {
            return getHexFromHsv(this.hsv);
        },
        enumerable: true,
        configurable: true
    });
    NglColorpickerRange.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.dragSubscription = this.setupDrag().subscribe(function (mm) { return _this.emitChange(mm); });
    };
    NglColorpickerRange.prototype.hueSliderChange = function (value) {
        this.emitChange({ hue: value });
    };
    NglColorpickerRange.prototype.rangeIndicatorKeyboard = function (evt) {
        var saturation = this.hsv.saturation;
        var value = this.hsv.value;
        switch (evt.keyCode) {
            case LEFT_ARROW:
                saturation = this.limit(saturation - 1);
                break;
            case RIGHT_ARROW:
                saturation = this.limit(saturation + 1);
                break;
            case UP_ARROW:
                value = this.limit(value + 1);
                break;
            case DOWN_ARROW:
                value = this.limit(value - 1);
                break;
            default:
                return;
        }
        trapEvent(evt);
        this.emitChange({ saturation: saturation, value: value });
    };
    NglColorpickerRange.prototype.indicatorStyle = function () {
        return {
            'bottom.%': this.hsv.value,
            'left.%': this.hsv.saturation,
            'background': this.hex,
        };
    };
    NglColorpickerRange.prototype.ngOnDestroy = function () {
        if (this.dragSubscription) {
            this.dragSubscription.unsubscribe();
            this.dragSubscription = null;
        }
    };
    NglColorpickerRange.prototype.emitChange = function (hsv) {
        this.hsvChange.emit(__assign(__assign({}, this.hsv), hsv));
    };
    NglColorpickerRange.prototype.limit = function (value) {
        return Math.min(Math.max(value, 0), 100);
    };
    NglColorpickerRange.prototype.setupDrag = function () {
        var _this = this;
        var dragTarget = this.rangeIndicatorContainer.nativeElement;
        var pressEnd = merge(fromEvent(this.document, 'mouseup'), fromEvent(this.document, 'touchend'));
        var pressMove = merge(fromEvent(this.document, 'mousemove'), fromEvent(this.document, 'touchmove'));
        var pressStart = merge(fromEvent(dragTarget, 'mousedown'), fromEvent(dragTarget, 'touchstart'));
        return pressStart.pipe(flatMap(function (md) {
            _this.rangeIndicator.nativeElement.focus();
            var rect = dragTarget.getBoundingClientRect();
            return pressMove.pipe(startWith(md), map(function (mm) {
                mm.preventDefault();
                var saturation = Math.round((mm.clientX - rect.left) / rect.width * 100);
                var value = Math.round((rect.bottom - mm.clientY) / rect.height * 100);
                return { saturation: _this.limit(saturation), value: _this.limit(value) };
            }), takeUntil(pressEnd));
        }));
    };
    NglColorpickerRange.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NglColorpickerRange.prototype, "hsv", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglColorpickerRange.prototype, "hsvChange", void 0);
    __decorate([
        ViewChild('rangeIndicator'),
        __metadata("design:type", ElementRef)
    ], NglColorpickerRange.prototype, "rangeIndicator", void 0);
    __decorate([
        ViewChild('rangeIndicatorContainer'),
        __metadata("design:type", ElementRef)
    ], NglColorpickerRange.prototype, "rangeIndicatorContainer", void 0);
    NglColorpickerRange = __decorate([
        Component({
            selector: 'ngl-colorpicker-range',
            template: "\n<p class=\"slds-assistive-text\" [attr.id]=\"uid + '-instructions'\">Use arrow keys to select a saturation and brightness, on an x and y axis.</p>\n<div class=\"slds-color-picker__custom-range\" #rangeIndicatorContainer [style.background]=\"'hsl(' + hsv.hue + ', 100%, 50%)'\"><a class=\"slds-color-picker__range-indicator\" #rangeIndicator href=\"javascript:void(0);\" aria-live=\"assertive\" aria-atomic=\"true\" [attr.aria-describedby]=\"uid + '-instructions'\" [ngStyle]=\"indicatorStyle()\" (keydown)=\"rangeIndicatorKeyboard($event)\"><span class=\"slds-assistive-text\">Saturation: {{hsv.saturation}}%. Brightness: {{hsv.value}}%.</span></a></div>\n<div class=\"slds-color-picker__hue-and-preview\">\n  <label class=\"slds-assistive-text\" [attr.for]=\"uid + '-hue'\">Select Hue</label>\n  <input class=\"slds-color-picker__hue-slider\" #hueSlider type=\"range\" min=\"0\" max=\"360\" [id]=\"uid + '-hue'\" [value]=\"hsv.hue\" (input)=\"hueSliderChange($event.target.value)\"><span nglColorpickerSwatch [color]=\"hex\"></span>\n</div>",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __param(0, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Object])
    ], NglColorpickerRange);
    return NglColorpickerRange;
}());
export { NglColorpickerRange };
//# sourceMappingURL=data:application/json;base64,