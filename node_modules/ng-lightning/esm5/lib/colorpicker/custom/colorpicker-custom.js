import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { getHexFromHsv, getHsvFromHex } from '../util';
var NglColorpickerCustom = /** @class */ (function () {
    function NglColorpickerCustom(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.hsvChange = new EventEmitter();
        this.renderer.addClass(this.el.nativeElement, 'slds-color-picker__custom');
    }
    NglColorpickerCustom.prototype.ngOnChanges = function (changes) {
        if (changes.hsv) {
            this.hex = getHexFromHsv(this.hsv);
        }
    };
    NglColorpickerCustom.prototype.onHsvChange = function ($event) {
        this.hsvChange.emit($event);
    };
    NglColorpickerCustom.prototype.onHexChange = function (hex) {
        var hsv = getHsvFromHex(hex);
        this.hsvChange.emit(hsv);
    };
    NglColorpickerCustom.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpickerCustom.prototype, "hsv", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglColorpickerCustom.prototype, "hsvChange", void 0);
    NglColorpickerCustom = __decorate([
        Component({
            selector: 'ngl-colorpicker-custom',
            template: "\n<ngl-colorpicker-range [hsv]=\"hsv\" (hsvChange)=\"onHsvChange($event)\"></ngl-colorpicker-range>\n<ngl-colorpicker-inputs [hex]=\"hex\" (hexChange)=\"onHexChange($event)\"></ngl-colorpicker-inputs>",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglColorpickerCustom);
    return NglColorpickerCustom;
}());
export { NglColorpickerCustom };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JwaWNrZXItY3VzdG9tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2NvbG9ycGlja2VyL2N1c3RvbS9jb2xvcnBpY2tlci1jdXN0b20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pKLE9BQU8sRUFBUSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBTzdEO0lBUUUsOEJBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUpyRCxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUs3QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCwwQ0FBVyxHQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELDBDQUFXLEdBQVgsVUFBWSxNQUFZO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCwwQ0FBVyxHQUFYLFVBQVksR0FBVztRQUNyQixJQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Z0JBakJ1QixVQUFVO2dCQUFvQixTQUFTOztJQU50RDtRQUFSLEtBQUssRUFBRTs7cURBQW9CO0lBRWxCO1FBQVQsTUFBTSxFQUFFOzsyREFBc0M7SUFKcEMsb0JBQW9CO1FBTGhDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSx3QkFBd0I7WUFDbEMsb05BQXdDO1lBQ3hDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO1NBQ2hELENBQUM7eUNBU3dCLFVBQVUsRUFBb0IsU0FBUztPQVJwRCxvQkFBb0IsQ0EwQmhDO0lBQUQsMkJBQUM7Q0FBQSxBQTFCRCxJQTBCQztTQTFCWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJSFNWLCBnZXRIZXhGcm9tSHN2LCBnZXRIc3ZGcm9tSGV4IH0gZnJvbSAnLi4vdXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC1jb2xvcnBpY2tlci1jdXN0b20nLFxuICB0ZW1wbGF0ZVVybDogJy4vY29sb3JwaWNrZXItY3VzdG9tLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTmdsQ29sb3JwaWNrZXJDdXN0b20gaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIHJlYWRvbmx5IGhzdjogSUhTVjtcblxuICBAT3V0cHV0KCkgaHN2Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxJSFNWPigpO1xuXG4gIGhleDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnc2xkcy1jb2xvci1waWNrZXJfX2N1c3RvbScpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmhzdikge1xuICAgICAgdGhpcy5oZXggPSBnZXRIZXhGcm9tSHN2KHRoaXMuaHN2KTtcbiAgICB9XG4gIH1cblxuICBvbkhzdkNoYW5nZSgkZXZlbnQ6IElIU1YpIHtcbiAgICB0aGlzLmhzdkNoYW5nZS5lbWl0KCRldmVudCk7XG4gIH1cblxuICBvbkhleENoYW5nZShoZXg6IHN0cmluZykge1xuICAgIGNvbnN0IGhzdiA9IGdldEhzdkZyb21IZXgoaGV4KTtcbiAgICB0aGlzLmhzdkNoYW5nZS5lbWl0KGhzdik7XG4gIH1cbn1cbiJdfQ==