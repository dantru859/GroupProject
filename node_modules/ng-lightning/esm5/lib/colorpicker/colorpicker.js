import { __assign, __decorate, __metadata, __param } from "tslib";
import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, ChangeDetectorRef, forwardRef, Input, TemplateRef, Optional, Inject } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { getHsvFromHex, getHexFromHsv, isValidHex } from './util';
import { uniqueId } from '../util/util';
import { InputBoolean } from '../util/convert';
import { NGL_COLORPICKER_CONFIG, NglColorpickerConfig } from './config';
var NGL_COLORPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NglColorpicker; }),
    multi: true
};
var NglColorpicker = /** @class */ (function () {
    function NglColorpicker(defaultConfig, el, renderer, cd) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        /**
         * An input label as for a form.
         */
        this.label = 'Choose Color';
        /**
         * Placeholder of input box.
         */
        this.placeholder = '';
        /**
         * Text for cancel button on popover.
         */
        this.cancelButtonLabel = 'Cancel';
        /**
         * Text for submit button of popover.
         */
        this.submitButtonLabel = 'Done';
        /**
         * Highlights the input as a required field (does not perform any validation).
         */
        this.required = false;
        /**
         * Error message when hex color input is invalid.
         */
        this.invalidColorLabel = 'Please ensure value is correct';
        /**
         * Text for swatch tab of popover.
         */
        this.swatchTabLabel = 'Default';
        /**
         * Text for custom tab of popover.
         */
        this.customTabLabel = 'Custom';
        /**
         * Whether to make the hex color input readonly.
         */
        this.readonlyInput = false;
        /**
         * Determines which tab is visible when popover opens.
         */
        this.defaultSelectedTab = 'swatches';
        this.uid = uniqueId('colorpicker');
        this.hexCurrent = '#FFF';
        this.hsvCurrent = getHsvFromHex(this.hexCurrent);
        this.onChange = function (_) { };
        this.onTouched = function () { };
        this.renderer.addClass(this.el.nativeElement, 'slds-color-picker');
        var config = __assign(__assign({}, new NglColorpickerConfig()), defaultConfig);
        this.swatchColors = config.swatchColors;
        this.variant = config.variant;
    }
    NglColorpicker.prototype.writeValue = function (value) {
        this.color = value || '';
        if (isValidHex(value)) {
            this.hexCurrent = value;
            this.hsvCurrent = getHsvFromHex(value);
        }
        this.cd.detectChanges();
    };
    NglColorpicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    NglColorpicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    NglColorpicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
    NglColorpicker.prototype.onSwatchSelection = function (hex) {
        this.hsvCurrent = getHsvFromHex(hex);
        this.hexCurrent = hex;
    };
    NglColorpicker.prototype.onCustomSelection = function (hsv) {
        this.hsvCurrent = hsv;
        this.hexCurrent = getHexFromHsv(hsv);
    };
    NglColorpicker.prototype.openChange = function (open) {
        this.open = open;
    };
    NglColorpicker.prototype.cancel = function () {
        this.open = false;
    };
    NglColorpicker.prototype.done = function () {
        this.open = false;
        if (this.hexCurrent !== this.color) {
            this.color = this.hexCurrent;
            this.onChange(this.color);
        }
    };
    NglColorpicker.prototype.canApply = function () {
        return isValidHex(this.hexCurrent);
    };
    NglColorpicker.prototype.onInput = function (hex) {
        this.color = hex;
        if (isValidHex(hex)) {
            this.onSwatchSelection(hex);
            this.onChange(hex);
        }
        else {
            this.onChange(null);
        }
    };
    Object.defineProperty(NglColorpicker.prototype, "isValidInput", {
        get: function () {
            return !this.color || isValidHex(this.color);
        },
        enumerable: true,
        configurable: true
    });
    NglColorpicker.ctorParameters = function () { return [
        { type: NglColorpickerConfig, decorators: [{ type: Optional }, { type: Inject, args: [NGL_COLORPICKER_CONFIG,] }] },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "placeholder", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "cancelButtonLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "submitButtonLabel", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "required", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "fieldLevelHelpTooltip", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "invalidColorLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "swatchTabLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "customTabLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NglColorpicker.prototype, "swatchColors", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglColorpicker.prototype, "readonlyInput", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglColorpicker.prototype, "defaultSelectedTab", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglColorpicker.prototype, "variant", void 0);
    NglColorpicker = __decorate([
        Component({
            selector: 'ngl-colorpicker',
            template: "\n<div class=\"slds-color-picker__summary slds-form-element\" [class.slds-has-error]=\"!isValidInput\">\n  <label class=\"slds-form-element__label slds-color-picker__summary-label\" [nglFormLabel]=\"label\" [attr.for]=\"uid + '-summary-input'\" [required]=\"required\">\n    <ngl-form-help class=\"slds-m-horizontal_xx-small\" *ngIf=\"fieldLevelHelpTooltip\" [content]=\"fieldLevelHelpTooltip\"></ngl-form-help>\n  </label>\n  <div class=\"slds-form-element__control\">\n    <button class=\"slds-button slds-color-picker__summary-button slds-button_icon slds-button_icon-more\" [title]=\"label\" [nglPopover]=\"tip\" nglPopoverPlacement=\"bottom-left\" [nglPopoverOpen]=\"open\" (nglPopoverOpenChange)=\"openChange($event)\" nglPopoverClass=\"slds-color-picker__selector\" [nglPopoverFooter]=\"footer\" nglPopoverCloseVisible=\"false\" [disabled]=\"disabled\"><span class=\"slds-swatch\" nglColorpickerSwatch [color]=\"isValidInput ? color : hexCurrent\"></span>\n      <svg class=\"slds-button__icon slds-button__icon_small slds-m-left_xx-small\" *ngIf=\"!disabled\" nglIconName=\"utility:down\"></svg><span class=\"slds-assistive-text\">{{ label }}: {{ color }}</span>\n    </button>\n    <div class=\"slds-color-picker__summary-input\">\n      <input class=\"slds-input\" [id]=\"uid + '-summary-input'\" type=\"text\" [value]=\"color\" (input)=\"onInput($event.target.value)\" [disabled]=\"disabled\" [readOnly]=\"readonlyInput\" maxlength=\"7\" [placeholder]=\"placeholder || ''\">\n    </div>\n    <p class=\"slds-form-error\" *ngIf=\"!isValidInput\" [nglInternalOutlet]=\"invalidColorLabel\"></p>\n  </div>\n</div>\n<ng-template #tip>\n  <ng-container [ngSwitch]=\"variant\">\n    <ng-container *ngSwitchCase=\"'swatches'\">\n      <ng-template [ngTemplateOutlet]=\"swatches\"></ng-template>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'custom'\">\n      <ng-template [ngTemplateOutlet]=\"custom\"></ng-template>\n    </ng-container>\n    <ngl-tabset *ngSwitchDefault [selected]=\"defaultSelectedTab\" (selectedChange)=\"defaultSelectedTab = $event.id\">\n      <ng-template ngl-tab id=\"swatches\" [label]=\"swatchTabLabel\">\n        <ng-template [ngTemplateOutlet]=\"swatches\"></ng-template>\n      </ng-template>\n      <ng-template ngl-tab id=\"custom\" [label]=\"customTabLabel\">\n        <ng-template [ngTemplateOutlet]=\"custom\"></ng-template>\n      </ng-template>\n    </ngl-tabset>\n  </ng-container>\n</ng-template>\n<ng-template #swatches>\n  <ngl-colorpicker-swatches [hex]=\"hexCurrent\" (hexChange)=\"onSwatchSelection($event)\" [swatchColors]=\"swatchColors\"></ngl-colorpicker-swatches>\n</ng-template>\n<ng-template #custom>\n  <ngl-colorpicker-custom [hsv]=\"hsvCurrent\" (hsvChange)=\"onCustomSelection($event)\"></ngl-colorpicker-custom>\n</ng-template>\n<ng-template #footer>\n  <div class=\"slds-color-picker__selector-footer\">\n    <button class=\"slds-button slds-button_neutral\" type=\"button\" (click)=\"cancel()\">{{ cancelButtonLabel }}</button>\n    <button class=\"slds-button slds-button_brand\" type=\"button\" (click)=\"done()\" [disabled]=\"!canApply()\">{{ submitButtonLabel }}</button>\n  </div>\n</ng-template>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [NGL_COLORPICKER_VALUE_ACCESSOR]
        }),
        __param(0, Optional()), __param(0, Inject(NGL_COLORPICKER_CONFIG)),
        __metadata("design:paramtypes", [NglColorpickerConfig,
            ElementRef,
            Renderer2,
            ChangeDetectorRef])
    ], NglColorpicker);
    return NglColorpicker;
}());
export { NglColorpicker };
//# sourceMappingURL=data:application/json;base64,