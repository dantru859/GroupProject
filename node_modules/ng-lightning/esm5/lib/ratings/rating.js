import { __assign, __decorate, __metadata, __param } from "tslib";
import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter, HostListener, HostBinding, ContentChild, ViewChild, TemplateRef, Optional, Inject } from '@angular/core';
import { NglRatingIconTemplate } from './icons';
import { InputBoolean } from '../util/convert';
import { NGL_RATING_CONFIG, NglRatingConfig } from './config';
var NglRating = /** @class */ (function () {
    function NglRating(defaultConfig) {
        this.range = [];
        this.icon = 'favorite';
        this.readonly = false;
        this.rateChange = new EventEmitter();
        this.hover = new EventEmitter();
        this._max = 5;
        var config = __assign(__assign({}, new NglRatingConfig()), defaultConfig);
        this.colorOn = config.colorOn;
        this.colorOff = config.colorOff;
    }
    Object.defineProperty(NglRating.prototype, "rate", {
        set: function (rate) {
            this.inputRate = rate;
            this.currentRate = rate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglRating.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (max) {
            this._max = +max;
            this.setRange();
        },
        enumerable: true,
        configurable: true
    });
    NglRating.prototype.ngOnInit = function () {
        this.setRange();
    };
    NglRating.prototype.ngAfterContentInit = function () {
        this._template = this.iconTemplate ? this.iconTemplate.templateRef : this.defaultTemplate;
    };
    NglRating.prototype.update = function (value) {
        if (value < 1 || value > this.max || this.readonly || value === this.inputRate) {
            return;
        }
        this.rateChange.emit(value);
    };
    NglRating.prototype.enter = function (value) {
        if (this.readonly) {
            return;
        }
        this.currentRate = value;
        this.hover.emit(value);
    };
    NglRating.prototype.getFill = function (value) {
        if (value <= this.currentRate) {
            return 100;
        }
        if (Math.ceil(this.currentRate) < value) {
            return 0;
        }
        return Math.round(100 * (this.currentRate % 1));
    };
    NglRating.prototype.reset = function () {
        this.currentRate = this.inputRate;
    };
    // Keyboard interactions
    NglRating.prototype.keyboardIncrease = function (evt) {
        evt.preventDefault();
        this.update(this.inputRate + 1);
    };
    NglRating.prototype.keyboardDecrease = function (evt) {
        evt.preventDefault();
        this.update(this.inputRate - 1);
    };
    Object.defineProperty(NglRating.prototype, "ariaValuenow", {
        // ARIA
        get: function () {
            return this.inputRate;
        },
        enumerable: true,
        configurable: true
    });
    NglRating.prototype.setRange = function () {
        this.range = Array.apply(null, { length: this.max }).map(function (value, index) { return index + 1; });
    };
    NglRating.ctorParameters = function () { return [
        { type: NglRatingConfig, decorators: [{ type: Optional }, { type: Inject, args: [NGL_RATING_CONFIG,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglRating.prototype, "icon", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglRating.prototype, "size", void 0);
    __decorate([
        Input('isReadonly'), InputBoolean(),
        __metadata("design:type", Object)
    ], NglRating.prototype, "readonly", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], NglRating.prototype, "rate", null);
    __decorate([
        ViewChild('t', { static: true }),
        __metadata("design:type", TemplateRef)
    ], NglRating.prototype, "defaultTemplate", void 0);
    __decorate([
        ContentChild(NglRatingIconTemplate),
        __metadata("design:type", NglRatingIconTemplate)
    ], NglRating.prototype, "iconTemplate", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NglRating.prototype, "max", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglRating.prototype, "colorOn", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglRating.prototype, "colorOff", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglRating.prototype, "rateChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglRating.prototype, "hover", void 0);
    __decorate([
        HostListener('mouseleave'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NglRating.prototype, "reset", null);
    __decorate([
        HostListener('keydown.ArrowUp', ['$event']),
        HostListener('keydown.ArrowRight', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], NglRating.prototype, "keyboardIncrease", null);
    __decorate([
        HostListener('keydown.ArrowDown', ['$event']),
        HostListener('keydown.ArrowLeft', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], NglRating.prototype, "keyboardDecrease", null);
    __decorate([
        HostBinding('attr.aria-valuenow'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], NglRating.prototype, "ariaValuenow", null);
    NglRating = __decorate([
        Component({
            selector: 'ngl-rating',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "\n<ng-template #t let-fill=\"fill\">\n  <svg class=\"slds-icon\" [nglIconName]=\"icon\" [ngClass]=\"size ? 'slds-icon_' + size : ''\" [style.fill]=\"fill === 100 ? colorOn : colorOff\"></svg>\n  <svg class=\"slds-icon\" *ngIf=\"fill &gt; 0 &amp;&amp; fill &lt; 100\" [nglIconName]=\"icon\" [ngClass]=\"size ? 'slds-icon_' + size : ''\" [style.fill]=\"colorOn\" style=\"position:absolute; bottom:0;\" [style.left.%]=\"fill - 100\" [xPos]=\"(100 - fill) + '%'\"></svg>\n</ng-template>\n<div class=\"slds-show_inline-block\" *ngFor=\"let r of range; let i = index\" (click)=\"update(r)\" (mouseenter)=\"enter(r)\" style=\"position: relative;\">\n  <ng-template [ngTemplateOutlet]=\"_template\" [ngTemplateOutletContext]=\"{$implicit: r &lt;= currentRate, index: i, fill: getFill(r)}\"></ng-template>\n</div>",
            host: {
                'style': 'white-space: nowrap;',
                'tabindex': '0',
                'aria-valuemin': '0',
                '[attr.aria-valuemax]': 'max',
            }
        }),
        __param(0, Optional()), __param(0, Inject(NGL_RATING_CONFIG)),
        __metadata("design:paramtypes", [NglRatingConfig])
    ], NglRating);
    return NglRating;
}());
export { NglRating };
//# sourceMappingURL=data:application/json;base64,