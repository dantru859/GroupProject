import { __decorate, __metadata } from "tslib";
import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy, OnInit, OnChanges } from '@angular/core';
import { HostService } from '../common/host/host.service';
import { ngClassCombine } from '../util/util';
var NglButtonIcon = /** @class */ (function () {
    function NglButtonIcon(el, hostService, renderer) {
        this.el = el;
        this.hostService = hostService;
        /**
         * The variant changes the appearance of the button
         */
        this.variant = 'border';
        renderer.addClass(this.el.nativeElement, 'slds-button');
        renderer.addClass(this.el.nativeElement, 'slds-button_icon');
    }
    Object.defineProperty(NglButtonIcon.prototype, "altText", {
        get: function () {
            return this.alternativeText || this.title;
        },
        enumerable: true,
        configurable: true
    });
    NglButtonIcon.prototype.ngOnInit = function () {
        this.setHostClass();
    };
    NglButtonIcon.prototype.ngOnChanges = function () {
        this.setHostClass();
    };
    NglButtonIcon.prototype.iconClass = function () {
        var _a;
        var hasVariant = this.hasVariant();
        var classes = (_a = {},
            _a["slds-button__icon_" + this.size] = !hasVariant,
            _a);
        return ngClassCombine(this.svgClass, classes);
    };
    NglButtonIcon.prototype.setHostClass = function () {
        var _a;
        var hasVariant = this.hasVariant();
        this.hostService.updateClass(this.el, (_a = {},
            _a["slds-button_icon-" + this.variant] = hasVariant,
            _a["slds-button_icon-" + this.size] = this.size && hasVariant,
            _a));
    };
    NglButtonIcon.prototype.hasVariant = function () {
        return this.variant && this.variant !== 'bare';
    };
    NglButtonIcon.ctorParameters = function () { return [
        { type: ElementRef },
        { type: HostService },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglButtonIcon.prototype, "iconName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglButtonIcon.prototype, "title", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglButtonIcon.prototype, "alternativeText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglButtonIcon.prototype, "variant", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglButtonIcon.prototype, "size", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglButtonIcon.prototype, "svgClass", void 0);
    NglButtonIcon = __decorate([
        Component({
            // tslint:disable-next-line:component-selector
            selector: '[nglButtonIcon]',
            template: "\n<svg class=\"slds-button__icon\" *ngIf=\"iconName\" [nglIconName]=\"iconName\" [ngClass]=\"iconClass()\"></svg>\n<ng-content></ng-content><span class=\"slds-assistive-text\" *ngIf=\"altText as text\">{{ text }}</span>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [HostService]
        }),
        __metadata("design:paramtypes", [ElementRef, HostService, Renderer2])
    ], NglButtonIcon);
    return NglButtonIcon;
}());
export { NglButtonIcon };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWljb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvYnV0dG9uLWljb25zL2J1dHRvbi1pY29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEgsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFTOUM7SUF1Q0UsdUJBQW9CLEVBQWMsRUFBVSxXQUF3QixFQUFFLFFBQW1CO1FBQXJFLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQW5CcEU7O1dBRUc7UUFDTSxZQUFPLEdBQStGLFFBQVEsQ0FBQztRQWlCdEgsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RCxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDL0QsQ0FBQztJQVBELHNCQUFJLGtDQUFPO2FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTtJQU9ELGdDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELG1DQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELGlDQUFTLEdBQVQ7O1FBQ0UsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3JDLElBQU0sT0FBTztZQUNYLEdBQUMsdUJBQXFCLElBQUksQ0FBQyxJQUFNLElBQUcsQ0FBQyxVQUFVO2VBQ2hELENBQUM7UUFFRixPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTyxvQ0FBWSxHQUFwQjs7UUFDRSxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsR0FBQyxzQkFBb0IsSUFBSSxDQUFDLE9BQVMsSUFBRyxVQUFVO1lBQ2hELEdBQUMsc0JBQW9CLElBQUksQ0FBQyxJQUFNLElBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxVQUFVO2dCQUMxRCxDQUFDO0lBQ0wsQ0FBQztJQUVPLGtDQUFVLEdBQWxCO1FBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssTUFBTSxDQUFDO0lBQ2pELENBQUM7O2dCQWhDdUIsVUFBVTtnQkFBdUIsV0FBVztnQkFBWSxTQUFTOztJQWhDaEY7UUFBUixLQUFLLEVBQUU7O21EQUFrQjtJQUtqQjtRQUFSLEtBQUssRUFBRTs7Z0RBQWU7SUFNZDtRQUFSLEtBQUssRUFBRTs7MERBQWlCO0lBS2hCO1FBQVIsS0FBSyxFQUFFOztrREFBZ0g7SUFLL0c7UUFBUixLQUFLLEVBQUU7OytDQUFjO0lBS2I7UUFBUixLQUFLLEVBQUU7O21EQUFzRTtJQWpDbkUsYUFBYTtRQVB6QixTQUFTLENBQUM7WUFDVCw4Q0FBOEM7WUFDOUMsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQix1T0FBaUM7WUFDakMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDO1NBQ3pCLENBQUM7eUNBd0N3QixVQUFVLEVBQXVCLFdBQVcsRUFBWSxTQUFTO09BdkM5RSxhQUFhLENBd0V6QjtJQUFELG9CQUFDO0NBQUEsQUF4RUQsSUF3RUM7U0F4RVksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIE9uSW5pdCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0U2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9ob3N0L2hvc3Quc2VydmljZSc7XG5pbXBvcnQgeyBuZ0NsYXNzQ29tYmluZSB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW25nbEJ1dHRvbkljb25dJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2J1dHRvbi1pY29uLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbSG9zdFNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xCdXR0b25JY29uIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gIC8qKlxuICAgKiBMRFMgbmFtZSBvZiB0aGUgaWNvbi5cbiAgICogTmFtZXMgYXJlIHdyaXR0ZW4gaW4gdGhlIGZvcm1hdCAndXRpbGl0eTpkb3duJyB3aGVyZSAndXRpbGl0eScgaXMgdGhlIGNhdGVnb3J5LCBhbmQgJ2Rvd24nIGlzIHRoZSBzcGVjaWZpYyBpY29uIHRvIGJlIGRpc3BsYXllZC5cbiAgICogT25seSB1dGlsaXR5IGljb25zIGNhbiBiZSB1c2VkIGluIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgQElucHV0KCkgaWNvbk5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogRmFsbGJhY2sgdmFsdWUgZm9yIGBhbHRlcm5hdGl2ZVRleHRgLlxuICAgKi9cbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFsdGVybmF0aXZlIHRleHQgdXNlZCB0byBkZXNjcmliZSB0aGUgaWNvbi5cbiAgICogVGhpcyB0ZXh0IHNob3VsZCBkZXNjcmliZSB3aGF0IGhhcHBlbnMsIG5vdCB3aGF0IHRoZSBpY29uIGxvb2tzIGxpa2UuXG4gICAqL1xuICBASW5wdXQoKSBhbHRlcm5hdGl2ZVRleHQ7XG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IGNoYW5nZXMgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGJ1dHRvblxuICAgKi9cbiAgQElucHV0KCkgdmFyaWFudDogJ2JhcmUnIHwgJ2NvbnRhaW5lcicgfCAnYnJhbmQnIHwgJ2JvcmRlcicgfCAnYm9yZGVyLWZpbGxlZCcgfCAnaW52ZXJzZScgfCAnYm9yZGVyLWludmVyc2UnID0gJ2JvcmRlcic7XG5cbiAgLyoqXG4gICAqICBGb3Igbm9uLWJhcmUgdmFyaWFudHMsIHRoZSBzaXplIGFwcGxpZXMgdG8gdGhlIGJ1dHRvbiwgb3RoZXJ3aXNlIGl0IGFwcGxpZXMgdG8gdGhlIGljb24gaXRzZWxmXG4gICAqL1xuICBASW5wdXQoKSBzaXplOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENTUyBjbGFzc2VzIHRoYXQgYXJlIGFwcGxpZWQgdG8gdGhlIFNWRy5cbiAgICovXG4gIEBJbnB1dCgpIHN2Z0NsYXNzOiBzdHJpbmcgfCBzdHJpbmdbXSB8IFNldDxzdHJpbmc+IHwgeyBba2xhc3M6IHN0cmluZ106IGFueSB9O1xuXG4gIGdldCBhbHRUZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmFsdGVybmF0aXZlVGV4dCB8fCB0aGlzLnRpdGxlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBob3N0U2VydmljZTogSG9zdFNlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICByZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdzbGRzLWJ1dHRvbicpO1xuICAgIHJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NsZHMtYnV0dG9uX2ljb24nKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc2V0SG9zdENsYXNzKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpIHtcbiAgICB0aGlzLnNldEhvc3RDbGFzcygpO1xuICB9XG5cbiAgaWNvbkNsYXNzKCkge1xuICAgIGNvbnN0IGhhc1ZhcmlhbnQgPSB0aGlzLmhhc1ZhcmlhbnQoKTtcbiAgICBjb25zdCBjbGFzc2VzID0ge1xuICAgICAgW2BzbGRzLWJ1dHRvbl9faWNvbl8ke3RoaXMuc2l6ZX1gXTogIWhhc1ZhcmlhbnQsXG4gICAgfTtcblxuICAgIHJldHVybiBuZ0NsYXNzQ29tYmluZSh0aGlzLnN2Z0NsYXNzLCBjbGFzc2VzKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0SG9zdENsYXNzKCkge1xuICAgIGNvbnN0IGhhc1ZhcmlhbnQgPSB0aGlzLmhhc1ZhcmlhbnQoKTtcbiAgICB0aGlzLmhvc3RTZXJ2aWNlLnVwZGF0ZUNsYXNzKHRoaXMuZWwsIHtcbiAgICAgIFtgc2xkcy1idXR0b25faWNvbi0ke3RoaXMudmFyaWFudH1gXTogaGFzVmFyaWFudCxcbiAgICAgIFtgc2xkcy1idXR0b25faWNvbi0ke3RoaXMuc2l6ZX1gXTogdGhpcy5zaXplICYmIGhhc1ZhcmlhbnQsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGhhc1ZhcmlhbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFyaWFudCAmJiB0aGlzLnZhcmlhbnQgIT09ICdiYXJlJztcbiAgfVxufVxuIl19