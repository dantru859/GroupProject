import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ElementRef, Renderer2, OnInit, OnChanges } from '@angular/core';
import { HostService } from '../common/host/host.service';
var NglProgressBar = /** @class */ (function () {
    function NglProgressBar(element, renderer, hostService) {
        this.element = element;
        this.renderer = renderer;
        this.hostService = hostService;
        this.renderer.addClass(this.element.nativeElement, 'slds-progress-bar');
        this.renderer.setAttribute(this.element.nativeElement, 'role', 'progressbar');
        this.renderer.setAttribute(this.element.nativeElement, 'aria-valuemin', '0');
        this.renderer.setAttribute(this.element.nativeElement, 'aria-valuemax', '100');
    }
    Object.defineProperty(NglProgressBar.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * The percentage value of the progress bar.
         */
        set: function (value) {
            this._value = Math.max(0, Math.min(value, 100)); // Trap on [0, 100]
            this.renderer.setAttribute(this.element.nativeElement, 'aria-valuenow', "" + this.value);
        },
        enumerable: true,
        configurable: true
    });
    NglProgressBar.prototype.ngOnInit = function () {
        this.setHostClass();
    };
    NglProgressBar.prototype.ngOnChanges = function () {
        this.setHostClass();
    };
    NglProgressBar.prototype.setHostClass = function () {
        var _a;
        this.hostService.updateClass(this.element, (_a = {},
            _a["slds-progress-bar_" + this.size] = !!this.size,
            _a["slds-progress-bar_" + this.variant] = !!this.variant,
            _a));
    };
    NglProgressBar.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HostService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], NglProgressBar.prototype, "value", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglProgressBar.prototype, "size", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglProgressBar.prototype, "variant", void 0);
    NglProgressBar = __decorate([
        Component({
            selector: 'ngl-progress-bar',
            template: "<span class=\"slds-progress-bar__value\" [style.width.%]=\"value\"><span class=\"slds-assistive-text\">Progress: {{value}}%</span></span>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [HostService]
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2, HostService])
    ], NglProgressBar);
    return NglProgressBar;
}());
export { NglProgressBar };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwSCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFRMUQ7SUF5QkUsd0JBQW9CLE9BQW1CLEVBQVUsUUFBbUIsRUFBVSxXQUF3QjtRQUFsRixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3BHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDeEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQXpCUSxzQkFBSSxpQ0FBSzthQUlsQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO1FBVEQ7O1dBRUc7YUFDTSxVQUFVLEtBQWE7WUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CO1lBQ3BFLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLGVBQWUsRUFBRSxLQUFHLElBQUksQ0FBQyxLQUFPLENBQUMsQ0FBQztRQUMzRixDQUFDOzs7T0FBQTtJQXdCRCxpQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxvQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTyxxQ0FBWSxHQUFwQjs7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTztZQUN2QyxHQUFDLHVCQUFxQixJQUFJLENBQUMsSUFBTSxJQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSTtZQUMvQyxHQUFDLHVCQUFxQixJQUFJLENBQUMsT0FBUyxJQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTztnQkFDckQsQ0FBQztJQUNMLENBQUM7O2dCQXBCNEIsVUFBVTtnQkFBb0IsU0FBUztnQkFBdUIsV0FBVzs7SUFwQjdGO1FBQVIsS0FBSyxFQUFFOzs7K0NBR1A7SUFRUTtRQUFSLEtBQUssRUFBRTs7Z0RBQWdEO0lBSy9DO1FBQVIsS0FBSyxFQUFFOzttREFBcUI7SUFyQmxCLGNBQWM7UUFOMUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixxSkFBaUM7WUFDakMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDO1NBQ3pCLENBQUM7eUNBMEI2QixVQUFVLEVBQW9CLFNBQVMsRUFBdUIsV0FBVztPQXpCM0YsY0FBYyxDQThDMUI7SUFBRCxxQkFBQztDQUFBLEFBOUNELElBOENDO1NBOUNZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkluaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdFNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vaG9zdC9ob3N0LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtcHJvZ3Jlc3MtYmFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Byb2dyZXNzYmFyLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbSG9zdFNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xQcm9ncmVzc0JhciBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICAvKipcbiAgICogVGhlIHBlcmNlbnRhZ2UgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGJhci5cbiAgICovXG4gIEBJbnB1dCgpIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbih2YWx1ZSwgMTAwKSk7IC8vIFRyYXAgb24gWzAsIDEwMF1cbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2FyaWEtdmFsdWVub3cnLCBgJHt0aGlzLnZhbHVlfWApO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIHByb2dyZXNzIGJhci5cbiAgICovXG4gIEBJbnB1dCgpIHNpemU6ICd4LXNtYWxsJyB8ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZSc7XG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IG9mIHRoZSBwcm9ncmVzcyBiYXIuXG4gICAqL1xuICBASW5wdXQoKSB2YXJpYW50OiAnY2lyY3VsYXInO1xuXG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaG9zdFNlcnZpY2U6IEhvc3RTZXJ2aWNlKSB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3NsZHMtcHJvZ3Jlc3MtYmFyJyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdyb2xlJywgJ3Byb2dyZXNzYmFyJyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdhcmlhLXZhbHVlbWluJywgJzAnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2FyaWEtdmFsdWVtYXgnLCAnMTAwJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldEhvc3RDbGFzcygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5zZXRIb3N0Q2xhc3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0SG9zdENsYXNzKCkge1xuICAgIHRoaXMuaG9zdFNlcnZpY2UudXBkYXRlQ2xhc3ModGhpcy5lbGVtZW50LCB7XG4gICAgICBbYHNsZHMtcHJvZ3Jlc3MtYmFyXyR7dGhpcy5zaXplfWBdOiAhIXRoaXMuc2l6ZSxcbiAgICAgIFtgc2xkcy1wcm9ncmVzcy1iYXJfJHt0aGlzLnZhcmlhbnR9YF06ICEhdGhpcy52YXJpYW50LFxuICAgIH0pO1xuICB9XG59XG4iXX0=