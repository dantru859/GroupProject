import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Renderer2, HostListener, HostBinding } from '@angular/core';
import { uniqueId, trapEvent } from '../util/util';
import { DOWN_ARROW, ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { fromEvent } from 'rxjs';
import { buffer, debounceTime, map } from 'rxjs/operators';
import { NglComboboxService } from './combobox.service';
var MAX_INTERVAL_BETWEEN_KEYSTROKES = 300; // ms
var NglComboboxInput = /** @class */ (function () {
    function NglComboboxInput(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        var nativeElement = this.el.nativeElement;
        this.renderer.addClass(nativeElement, 'slds-input');
        this.renderer.addClass(nativeElement, 'slds-combobox__input');
        this.renderer.setAttribute(nativeElement, 'autoComplete', 'off');
        this.renderer.setAttribute(nativeElement, 'role', 'textbox');
        this.renderer.setAttribute(nativeElement, 'aria-controls', this.service.combobox.uid);
        if (!nativeElement.id) {
            this.renderer.setAttribute(nativeElement, 'id', uniqueId('combobox-input'));
        }
        var keyboardEvent$ = fromEvent(nativeElement, 'keypress').pipe(map(function (e) { return e.keyCode; }));
        this.keyboardBuffer$ = keyboardEvent$.pipe(buffer(keyboardEvent$.pipe(debounceTime(MAX_INTERVAL_BETWEEN_KEYSTROKES))), map(function (keyCodes) { return keyCodes.map(function (c) { return String.fromCharCode(c); }).join(''); }));
    }
    Object.defineProperty(NglComboboxInput.prototype, "isReadonly", {
        get: function () {
            return this.service.combobox.variant === 'base' || this.service.combobox.hasLookupSingleSelection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglComboboxInput.prototype, "ariaAutocomplete", {
        get: function () {
            return this.service.combobox.isLookup ? 'list' : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglComboboxInput.prototype, "hasReadonlyValue", {
        get: function () {
            return this.service.combobox.hasLookupSingleSelection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglComboboxInput.prototype, "id", {
        get: function () {
            return this.el.nativeElement.id;
        },
        enumerable: true,
        configurable: true
    });
    NglComboboxInput.prototype.setAriaActiveDescendant = function (uid) {
        if (uid) {
            this.renderer.setAttribute(this.el.nativeElement, 'aria-activedescendant', uid);
        }
        else {
            this.renderer.removeAttribute(this.el.nativeElement, 'aria-activedescendant');
        }
    };
    NglComboboxInput.prototype.setValue = function (value) {
        this.renderer.setProperty(this.el.nativeElement, 'value', value !== null ? value : '');
    };
    NglComboboxInput.prototype.focus = function () {
        this.el.nativeElement.focus();
    };
    NglComboboxInput.prototype.onMouseInteraction = function () {
        if (this.service.combobox.hasLookupSingleSelection || (this.service.combobox.open && this.service.combobox.isLookup)) {
            return;
        }
        this.service.combobox.openChange.emit(!this.service.combobox.open);
    };
    NglComboboxInput.prototype.onBlur = function () {
        this.service.combobox.openChange.emit(false);
    };
    NglComboboxInput.prototype.onKeyboard = function (evt) {
        var _this = this;
        var keyCode = evt.keyCode;
        if (keyCode === ESCAPE) {
            // This is handled by CDK, and detaches overlay
            return;
        }
        if (this.service.combobox.open) {
            switch (keyCode) {
                // User selects currently active option by pressing the `Enter` key
                case ENTER:
                    trapEvent(evt);
                    this.service.combobox.onOptionSelection();
                    return;
                // Propagate to keymanager
                default:
                    this.service.combobox.keyManager.onKeydown(evt);
                    return;
            }
        }
        else {
            // Do nothing if readonly Lookup
            if (this.service.combobox.hasLookupSingleSelection) {
                return;
            }
            // Pressing the `Down` or `Enter` key will expand the collapsed menu
            if (keyCode === DOWN_ARROW || keyCode === ENTER) {
                trapEvent(evt);
                this.service.combobox.openChange.emit(true);
                return;
            }
            // Any key on Lookup should expand the collapsed menu
            if (this.service.combobox.isLookup) {
                // Delay emission so actual value of the input has been updated
                setTimeout(function () { return _this.service.combobox.openChange.emit(true); }, 0);
            }
        }
    };
    NglComboboxInput.ctorParameters = function () { return [
        { type: NglComboboxService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        HostBinding('readOnly'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], NglComboboxInput.prototype, "isReadonly", null);
    __decorate([
        HostBinding('attr.aria-autocomplete'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], NglComboboxInput.prototype, "ariaAutocomplete", null);
    __decorate([
        HostBinding('class.slds-combobox__input-value'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], NglComboboxInput.prototype, "hasReadonlyValue", null);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NglComboboxInput.prototype, "onMouseInteraction", null);
    __decorate([
        HostListener('blur'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NglComboboxInput.prototype, "onBlur", null);
    __decorate([
        HostListener('keydown', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [KeyboardEvent]),
        __metadata("design:returntype", void 0)
    ], NglComboboxInput.prototype, "onKeyboard", null);
    NglComboboxInput = __decorate([
        Directive({
            selector: 'input[nglCombobox]',
        }),
        __metadata("design:paramtypes", [NglComboboxService,
            ElementRef,
            Renderer2])
    ], NglComboboxInput);
    return NglComboboxInput;
}());
export { NglComboboxInput };
//# sourceMappingURL=data:application/json;base64,