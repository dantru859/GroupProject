import { __assign, __decorate, __metadata, __read, __spread } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, OnChanges, TemplateRef, OnDestroy, ViewChildren, QueryList, SimpleChanges, ContentChild, ViewChild, NgZone, ElementRef, ChangeDetectorRef } from '@angular/core';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { CdkOverlayOrigin, CdkConnectedOverlay } from '@angular/cdk/overlay';
import { take } from 'rxjs/operators';
import { DEFAULT_DROPDOWN_POSITIONS } from '../util/overlay-position';
import { uniqueId, isOptionSelected, addOptionToSelection } from '../util/util';
import { InputBoolean, InputNumber } from '../util/convert';
import { NglComboboxOption } from './combobox-option';
import { NglComboboxInput } from './combobox-input';
import { NglComboboxService } from './combobox.service';
var NglCombobox = /** @class */ (function () {
    function NglCombobox(ngZone, cd, service) {
        var _this = this;
        this.ngZone = ngZone;
        this.cd = cd;
        this.service = service;
        this.variant = 'base';
        this.uid = uniqueId('combobox');
        this.open = false;
        this.openChange = new EventEmitter();
        this.selectionChange = new EventEmitter();
        this.multiple = false;
        this.visibleLength = 5;
        this.closeOnSelection = true;
        this.overlayWidth = 0;
        this.overlayPositions = __spread(DEFAULT_DROPDOWN_POSITIONS['left']);
        this.selectionValueFn = function (selection) {
            if (selection.length > 0) {
                if (_this.multiple && _this.isLookup) {
                    return '';
                }
                return selection.length === 1 ? selection[0] : selection.length + " options selected";
            }
            return '';
        };
        this.service.combobox = this;
        // this.service.openChange = this.openChange;
    }
    Object.defineProperty(NglCombobox.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (data) {
            this._data = (data || []).map(function (d) {
                if (typeof d === 'string') {
                    // Support array of strings as options, by mapping to NglComboboxOptionItem
                    return { value: d, label: d };
                }
                else if (!d.label) {
                    // Use `value` if missing `label`
                    return __assign(__assign({}, d), { label: d.value });
                }
                return d;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglCombobox.prototype, "activeOption", {
        get: function () {
            return this.keyManager ? this.keyManager.activeItem : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglCombobox.prototype, "selectedOptions", {
        get: function () {
            var _this = this;
            return this.data ? this.data.filter(function (d) { return _this.isSelected(d.value); }) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglCombobox.prototype, "isLookup", {
        get: function () {
            return this.variant === 'lookup';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglCombobox.prototype, "hasLookupSingleSelection", {
        get: function () {
            return this.isLookup && !this.multiple && this.selectedOptions.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    NglCombobox.prototype.ngOnChanges = function (changes) {
        if (changes.selection) {
            this.calculateDisplayValue();
        }
    };
    NglCombobox.prototype.onAttach = function () {
        var _this = this;
        // Same width as the trigger element
        this.overlayWidth = this.overlayOrigin.elementRef.nativeElement.offsetWidth;
        this.cd.detectChanges();
        this.keyManager = new ActiveDescendantKeyManager(this.options).withWrap();
        // Activate selected item or first option
        var selectedOption = this.options.find(function (o) { return o.selected; });
        if (selectedOption) {
            this.keyManager.setActiveItem(selectedOption);
        }
        else {
            this.keyManager.setFirstItemActive();
        }
        // Listen to button presses if picklist to activate matching option
        this.keyboardSubscribe(this.variant === 'base');
        // When it is open we listen for option changes in order to fix active option and handle scroll
        this.optionChangesSubscription = this.options.changes.subscribe(function () {
            if (!_this.activeOption || _this.options.toArray().indexOf(_this.activeOption) === -1) {
                // Activate first option if active one is destroyed
                _this.keyManager.setFirstItemActive();
            }
            else {
                _this.activeOption.scrollIntoView();
            }
            _this.updateMenuHeight();
        });
        this.updateMenuHeight();
    };
    NglCombobox.prototype.onDetach = function () {
        if (this.open) {
            this.close();
            return;
        }
        // Clear aria-activedescendant when menu is closed
        this.inputEl.setAriaActiveDescendant(null);
        this.detach();
    };
    NglCombobox.prototype.trackByOption = function (index, option) {
        return option.value;
    };
    NglCombobox.prototype.dropdownClass = function () {
        var _a;
        return _a = {},
            _a["slds-dropdown_length-" + this.visibleLength] = this.visibleLength > 0,
            _a;
    };
    NglCombobox.prototype.inputIconRight = function () {
        return this.isLookup ? 'utility:search' : 'utility:down';
    };
    NglCombobox.prototype.hasNoMatches = function () {
        return this.isLookup && this.data.length === 0 && !this.loadingMore;
    };
    NglCombobox.prototype.onOptionSelection = function (option) {
        if (option === void 0) { option = this.activeOption; }
        var selection = addOptionToSelection(option.value, this.selection, this.multiple);
        this.selectionChange.emit(selection);
        if (this.closeOnSelection) {
            this.close();
        }
    };
    // Trigger by clear button on Lookup
    NglCombobox.prototype.onClearSelection = function () {
        var _this = this;
        this.selectionChange.emit(null);
        setTimeout(function () { return _this.inputEl.focus(); }, 0);
    };
    /**
     * Check whether value is currently selected.
     *
     * @param value The value in test, whether is (part of) selection or not
     */
    NglCombobox.prototype.isSelected = function (value) {
        return isOptionSelected(value, this.selection, this.multiple);
    };
    NglCombobox.prototype.ngOnDestroy = function () {
        this.detach();
    };
    NglCombobox.prototype.close = function () {
        this.openChange.emit(false);
    };
    NglCombobox.prototype.detach = function () {
        this.keyboardSubscribe(false);
        this.keyManager = null;
        if (this.optionChangesSubscription) {
            this.optionChangesSubscription.unsubscribe();
            this.optionChangesSubscription = null;
        }
    };
    NglCombobox.prototype.calculateDisplayValue = function () {
        var value = this.selectionValueFn(this.selectedOptions.map(function (option) { return option.label; }));
        this.inputEl.setValue(value);
    };
    NglCombobox.prototype.keyboardSubscribe = function (listen) {
        var _this = this;
        if (this.keyboardSubscription) {
            this.keyboardSubscription.unsubscribe();
            this.keyboardSubscription = null;
        }
        if (listen) {
            this.keyboardSubscription = this.inputEl.keyboardBuffer$.subscribe(function (pattern) {
                pattern = pattern.toLocaleLowerCase();
                var options = _this.options.toArray();
                var activeIndex = _this.activeOption ? _this.keyManager.activeItemIndex + 1 : 0;
                for (var i = 0, n = options.length; i < n; i++) {
                    var index = (activeIndex + i) % n;
                    var option = options[index];
                    if (!option.disabled && option.label.toLocaleLowerCase().substr(0, pattern.length) === pattern) {
                        _this.keyManager.setActiveItem(option);
                        break;
                    }
                }
            });
        }
    };
    NglCombobox.prototype.updateMenuHeight = function () {
        var _this = this;
        this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {
            var overlayRef = _this.cdkOverlay.overlayRef;
            var height = _this.dropdownElementRef.nativeElement.offsetHeight;
            overlayRef.updateSize({
                minHeight: height + 4,
            });
            overlayRef.updatePosition();
        });
    };
    NglCombobox.ctorParameters = function () { return [
        { type: NgZone },
        { type: ChangeDetectorRef },
        { type: NglComboboxService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglCombobox.prototype, "variant", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCombobox.prototype, "label", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglCombobox.prototype, "open", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglCombobox.prototype, "openChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCombobox.prototype, "selection", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglCombobox.prototype, "selectionChange", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglCombobox.prototype, "multiple", void 0);
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Number)
    ], NglCombobox.prototype, "visibleLength", void 0);
    __decorate([
        ContentChild(NglComboboxInput, { static: true }),
        __metadata("design:type", NglComboboxInput)
    ], NglCombobox.prototype, "inputEl", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglCombobox.prototype, "loading", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglCombobox.prototype, "loadingMore", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglCombobox.prototype, "closeOnSelection", void 0);
    __decorate([
        ViewChildren(NglComboboxOption),
        __metadata("design:type", QueryList)
    ], NglCombobox.prototype, "options", void 0);
    __decorate([
        Input('options'),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], NglCombobox.prototype, "data", null);
    __decorate([
        ViewChild('overlayOrigin', { static: true }),
        __metadata("design:type", CdkOverlayOrigin)
    ], NglCombobox.prototype, "overlayOrigin", void 0);
    __decorate([
        ViewChild('cdkOverlay'),
        __metadata("design:type", CdkConnectedOverlay)
    ], NglCombobox.prototype, "cdkOverlay", void 0);
    __decorate([
        ViewChild('dropdown'),
        __metadata("design:type", ElementRef)
    ], NglCombobox.prototype, "dropdownElementRef", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCombobox.prototype, "selectionValueFn", void 0);
    NglCombobox = __decorate([
        Component({
            selector: 'ngl-combobox',
            changeDetection: ChangeDetectionStrategy.OnPush,
            template: "\n<label [nglFormLabel]=\"label\" [attr.for]=\"inputEl.id\"></label>\n<div class=\"slds-form-element__control\">\n  <div class=\"slds-combobox_container\" [class.slds-has-selection]=\"hasLookupSingleSelection\">\n    <div class=\"slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click\" [attr.aria-expanded]=\"open\" aria-haspopup=\"listbox\" role=\"combobox\" [class.slds-is-open]=\"open\" [attr.aria-owns]=\"uid\">\n      <div class=\"slds-combobox__form-element slds-input-has-icon\" role=\"none\" cdkOverlayOrigin #overlayOrigin=\"cdkOverlayOrigin\" [class.slds-input-has-icon_group-right]=\"loading\" [class.slds-input-has-icon_right]=\"!loading\">\n        <ng-content select=\"input\"></ng-content>\n        <div class=\"slds-input__icon-group slds-input__icon-group_right\" *ngIf=\"loading; else iconRight\">\n          <div class=\"slds-spinner slds-spinner_brand slds-spinner_x-small slds-input__spinner\" role=\"status\"><span class=\"slds-assistive-text\">Loading</span>\n            <div class=\"slds-spinner__dot-a\"></div>\n            <div class=\"slds-spinner__dot-b\"></div>\n          </div>\n          <ng-template [ngTemplateOutlet]=\"iconRight\"></ng-template>\n        </div>\n        <ng-template #iconRight>\n          <button class=\"slds-button slds-button_icon slds-input__icon slds-input__icon_right\" *ngIf=\"hasLookupSingleSelection; else iconTpl\" type=\"button\" (click)=\"onClearSelection()\" title=\"Remove selected option\">\n            <svg class=\"slds-button__icon\" nglIconName=\"utility:close\"></svg><span class=\"slds-assistive-text\">Remove selected option</span>\n          </button>\n        </ng-template>\n        <ng-template #iconTpl><span class=\"slds-icon_container slds-input__icon slds-input__icon_right\">\n            <svg class=\"slds-icon slds-icon_x-small slds-icon-text-default\" [nglIconName]=\"inputIconRight()\"></svg></span></ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n<ng-template cdkConnectedOverlay #cdkOverlay=\"cdkConnectedOverlay\" [cdkConnectedOverlayPositions]=\"overlayPositions\" [cdkConnectedOverlayOrigin]=\"overlayOrigin\" [cdkConnectedOverlayMinWidth]=\"overlayWidth\" [cdkConnectedOverlayOpen]=\"open\" (nglOverlayScrolledOutsideView)=\"close()\" (attach)=\"onAttach()\" (detach)=\"onDetach()\">\n  <div class=\"slds-dropdown slds-dropdown_fluid\" #dropdown [attr.id]=\"uid\" role=\"listbox\" [ngClass]=\"dropdownClass()\" (mousedown)=\"$event.preventDefault()\">\n    <ul class=\"slds-listbox slds-listbox_vertical\" role=\"presentation\">\n      <li *ngFor=\"let d of data; trackBy: trackByOption\" nglComboboxOption [value]=\"d.value\" [label]=\"d.label\" [disabled]=\"d.disabled\" [selected]=\"isSelected(d.value)\"></li>\n      <li class=\"slds-listbox__item\" *ngIf=\"loadingMore\" role=\"presentation\">\n        <div class=\"slds-align_absolute-center slds-p-top_medium\">\n          <div class=\"slds-spinner slds-spinner_x-small slds-spinner_inline\" role=\"status\">\n            <div class=\"slds-assistive-text\">Loading</div>\n            <div class=\"slds-spinner__dot-a\"></div>\n            <div class=\"slds-spinner__dot-b\"></div>\n          </div>\n        </div>\n      </li>\n      <li class=\"slds-listbox__item\" *ngIf=\"hasNoMatches()\" role=\"presentation\" aria-live=\"polite\">\n        <div class=\"slds-align_absolute-center\"><span role=\"status\">No matches found.</span></div>\n      </li>\n    </ul>\n  </div>\n</ng-template>",
            host: {
                'class.slds-form-element': 'true',
            },
            providers: [NglComboboxService]
        }),
        __metadata("design:paramtypes", [NgZone, ChangeDetectorRef, NglComboboxService])
    ], NglCombobox);
    return NglCombobox;
}());
export { NglCombobox };
//# sourceMappingURL=data:application/json;base64,