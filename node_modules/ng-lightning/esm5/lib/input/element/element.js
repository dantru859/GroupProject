import { __decorate, __metadata } from "tslib";
import { Directive, HostBinding, ElementRef, Input, Renderer2 } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { toBoolean } from '../../util/convert';
import { uniqueId } from '../../util/util';
var NglInputElement = /** @class */ (function () {
    function NglInputElement(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.ɵRequiredSubject = new BehaviorSubject(false);
        if (!this.el.nativeElement.id) {
            this.renderer.setAttribute(this.el.nativeElement, 'id', uniqueId('input'));
        }
    }
    Object.defineProperty(NglInputElement.prototype, "required", {
        set: function (required) {
            this.ɵRequiredSubject.next(toBoolean(required));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglInputElement.prototype, "id", {
        get: function () {
            return this.el.nativeElement.id;
        },
        enumerable: true,
        configurable: true
    });
    NglInputElement.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        HostBinding('attr.aria-describedby'),
        __metadata("design:type", String)
    ], NglInputElement.prototype, "describedBy", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NglInputElement.prototype, "required", null);
    NglInputElement = __decorate([
        Directive({
            selector: 'input[ngl]:not([type=checkbox]):not([type=radio])',
            host: {
                '[class.slds-input]': 'true',
            }
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglInputElement);
    return NglInputElement;
}());
export { NglInputElement };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9pbnB1dC9lbGVtZW50L2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQVEzQztJQVVFLHlCQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBM0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFSL0QscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFTckQsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRTtZQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDNUU7SUFDSCxDQUFDO0lBUlEsc0JBQUkscUNBQVE7YUFBWixVQUFhLFFBQWE7WUFDakMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTtJQVFELHNCQUFJLCtCQUFFO2FBQU47WUFDRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUNsQyxDQUFDOzs7T0FBQTs7Z0JBUnVCLFVBQVU7Z0JBQW9CLFNBQVM7O0lBTnpCO1FBQXJDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQzs7d0RBQXFCO0lBRWpEO1FBQVIsS0FBSyxFQUFFOzs7bURBRVA7SUFSVSxlQUFlO1FBTjNCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxtREFBbUQ7WUFDN0QsSUFBSSxFQUFFO2dCQUNKLG9CQUFvQixFQUFFLE1BQU07YUFDN0I7U0FDRixDQUFDO3lDQVd3QixVQUFVLEVBQW9CLFNBQVM7T0FWcEQsZUFBZSxDQW1CM0I7SUFBRCxzQkFBQztDQUFBLEFBbkJELElBbUJDO1NBbkJZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWwvY29udmVydCc7XG5pbXBvcnQgeyB1bmlxdWVJZCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2lucHV0W25nbF06bm90KFt0eXBlPWNoZWNrYm94XSk6bm90KFt0eXBlPXJhZGlvXSknLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5zbGRzLWlucHV0XSc6ICd0cnVlJyxcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBOZ2xJbnB1dEVsZW1lbnQge1xuXG4gIMm1UmVxdWlyZWRTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtZGVzY3JpYmVkYnknKSBkZXNjcmliZWRCeTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIHNldCByZXF1aXJlZChyZXF1aXJlZDogYW55KSB7XG4gICAgdGhpcy7JtVJlcXVpcmVkU3ViamVjdC5uZXh0KHRvQm9vbGVhbihyZXF1aXJlZCkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgaWYgKCF0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaWQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2lkJywgdW5pcXVlSWQoJ2lucHV0JykpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlkO1xuICB9XG59XG4iXX0=