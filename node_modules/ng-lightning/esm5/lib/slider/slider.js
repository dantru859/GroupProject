import { __decorate, __metadata } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ElementRef, Renderer2, TemplateRef, forwardRef, ChangeDetectorRef, HostBinding, Output, EventEmitter } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { uniqueId } from '../util/util';
import { InputNumber, InputBoolean } from '../util/convert';
var NGL_SLIDER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NglSlider; }),
    multi: true
};
var NglSlider = /** @class */ (function () {
    function NglSlider(element, renderer, cd) {
        this.element = element;
        this.renderer = renderer;
        this.cd = cd;
        /**
         * The minimum value that the slider can have.
         */
        this.min = 0;
        /**
         * The maximum value that the slider can have.
         */
        this.max = 100;
        /**
         * The granularity the slider can step through values.
         */
        this.step = 1;
        /**
         * Whether the slider will be displayed vertically.
         */
        this.vertical = false;
        this.valueChange = new EventEmitter();
        this.uid = uniqueId('slider');
        this._value = null;
        this.onChange = null;
        this.onTouched = function () { };
        this.renderer.addClass(this.element.nativeElement, 'slds-form-element');
    }
    Object.defineProperty(NglSlider.prototype, "hasError", {
        get: function () {
            return !!this.error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglSlider.prototype, "value", {
        get: function () {
            // If the value needs to be read and it is still uninitialized, initialize it to the min.
            if (this._value === null) {
                this._value = this.min;
            }
            return this._value;
        },
        set: function (value) {
            if (value !== this._value) {
                this._value = this.limit(coerceNumberProperty(value));
            }
        },
        enumerable: true,
        configurable: true
    });
    NglSlider.prototype.writeValue = function (value) {
        this.value = value;
        this.cd.markForCheck();
    };
    NglSlider.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    NglSlider.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    NglSlider.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
    NglSlider.prototype.onInput = function (value) {
        // Make sure we always emit number
        this.valueChange.emit(coerceNumberProperty(value));
        if (this.onChange) {
            this.value = value;
            this.onChange(this.value);
        }
    };
    NglSlider.prototype.sliderClass = function () {
        var _a;
        return _a = {},
            _a["slds-size_" + this.size] = !!this.size,
            _a["slds-slider_vertical"] = this.vertical,
            _a;
    };
    NglSlider.prototype.limit = function (value) {
        return Math.min(Math.max(value, this.min), this.max);
    };
    NglSlider.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglSlider.prototype, "label", void 0);
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Object)
    ], NglSlider.prototype, "min", void 0);
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Object)
    ], NglSlider.prototype, "max", void 0);
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Object)
    ], NglSlider.prototype, "step", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglSlider.prototype, "vertical", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglSlider.prototype, "size", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglSlider.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglSlider.prototype, "error", void 0);
    __decorate([
        HostBinding('class.slds-has-error'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], NglSlider.prototype, "hasError", null);
    __decorate([
        Input(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], NglSlider.prototype, "value", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglSlider.prototype, "valueChange", void 0);
    NglSlider = __decorate([
        Component({
            selector: 'ngl-slider',
            template: "\n<label class=\"slds-form-element__label\" [attr.for]=\"uid\"><span class=\"slds-slider-label\"><span class=\"slds-slider-label__label\" *ngIf=\"label\" [nglInternalOutlet]=\"label\"></span><span class=\"slds-slider-label__range\">{{min}} - {{max}}</span></span></label>\n<div class=\"slds-form-element__control\">\n  <div class=\"slds-slider\" [ngClass]=\"sliderClass()\">\n    <input class=\"slds-slider__range\" [id]=\"uid\" type=\"range\" [value]=\"value\" [min]=\"min\" [max]=\"max\" [step]=\"step\" [disabled]=\"disabled\" [attr.aria-describedby]=\"hasError ? uid + '-error' : null\" (input)=\"onInput($event.target.value)\"><span class=\"slds-slider__value\" aria-hidden=\"true\">{{value}}</span>\n  </div>\n  <div class=\"slds-form-element__help\" *ngIf=\"hasError\" [id]=\"uid + '-error'\" [nglInternalOutlet]=\"error\"></div>\n</div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [NGL_SLIDER_VALUE_ACCESSOR]
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2, ChangeDetectorRef])
    ], NglSlider);
    return NglSlider;
}());
export { NglSlider };
//# sourceMappingURL=data:application/json;base64,