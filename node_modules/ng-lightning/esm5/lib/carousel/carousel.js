import { __decorate, __metadata, __param } from "tslib";
import { Component, Input, ChangeDetectionStrategy, ContentChildren, QueryList, Output, EventEmitter, ViewChildren, ViewChild, ElementRef, Optional, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';
import { InputBoolean, InputNumber } from '../util/convert';
import { NglCarouselImage } from './carousel-image';
import { NglCarouselIndicator } from './carousel-indicator';
var NglCarousel = /** @class */ (function () {
    function NglCarousel(document) {
        this.document = document;
        this.activeChange = new EventEmitter();
        /**
         * The auto scroll duration in seconds. After that the next image is displayed.
         */
        this.scrollDuration = 5;
        /**
         * Whether auto scroll is enabled.
         */
        this.autoScroll = true;
        /**
         * Whether the carousel should continue looping from the beginning after the last item is displayed.
         */
        this.autoRefresh = true;
        this.labels = {
            startAutoPlay: 'Start auto-play',
            stopAutoPlay: 'Stop auto-play',
        };
        this.playing = true;
        this.nextTimer = null;
    }
    NglCarousel.prototype.isActive = function (index) {
        return index === this.active;
    };
    NglCarousel.prototype.getImage = function (index) {
        return this.images.toArray()[index];
    };
    NglCarousel.prototype.ngOnChanges = function (changes) {
        if (changes.active) {
            // Focus correct indicator if one is already focused
            if (this.document && this.indicatorsEl.nativeElement.contains(document.activeElement)) {
                this.indicators.toArray()[this.active].focus();
            }
        }
        if (changes.active || changes.autoScroll || changes.scrollDuration) {
            // Reset timer when active changes
            this.setTimer();
        }
    };
    NglCarousel.prototype.onIndicatorClick = function (index) {
        this.setActive(index, true);
    };
    NglCarousel.prototype.onKeyboard = function (evt) {
        if (evt.keyCode === LEFT_ARROW || evt.keyCode === RIGHT_ARROW) {
            this.activateNext(evt.keyCode === LEFT_ARROW);
        }
    };
    NglCarousel.prototype.setActive = function (index, stopPlaying) {
        if (stopPlaying === void 0) { stopPlaying = false; }
        if (stopPlaying) {
            this.playing = false;
        }
        if (this.active !== index) {
            this.activeChange.emit(index);
        }
    };
    NglCarousel.prototype.togglePlay = function () {
        this.playing = !this.playing;
        this.setTimer();
    };
    NglCarousel.prototype.playLabel = function () {
        return this.labels[this.playing ? 'stopAutoPlay' : 'startAutoPlay'];
    };
    NglCarousel.prototype.activateNext = function (reverse) {
        if (reverse === void 0) { reverse = false; }
        var active = this.active + (reverse ? -1 : 1);
        if ((active < 0 || active > this.images.length - 1) && !this.autoRefresh) {
            return;
        }
        this.setActive((this.images.length + active) % this.images.length);
    };
    NglCarousel.prototype.setTimer = function () {
        var _this = this;
        clearTimeout(this.nextTimer);
        if (this.autoScroll && this.playing) {
            this.nextTimer = setTimeout(function () {
                _this.activateNext();
            }, this.scrollDuration * 1000);
        }
    };
    NglCarousel.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Object)
    ], NglCarousel.prototype, "active", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglCarousel.prototype, "activeChange", void 0);
    __decorate([
        Input(), InputNumber(),
        __metadata("design:type", Object)
    ], NglCarousel.prototype, "scrollDuration", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglCarousel.prototype, "autoScroll", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglCarousel.prototype, "autoRefresh", void 0);
    __decorate([
        ContentChildren(NglCarouselImage),
        __metadata("design:type", QueryList)
    ], NglCarousel.prototype, "images", void 0);
    __decorate([
        ViewChildren(NglCarouselIndicator),
        __metadata("design:type", QueryList)
    ], NglCarousel.prototype, "indicators", void 0);
    __decorate([
        ViewChild('indicatorsEl', { static: true }),
        __metadata("design:type", ElementRef)
    ], NglCarousel.prototype, "indicatorsEl", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglCarousel.prototype, "labels", void 0);
    NglCarousel = __decorate([
        Component({
            selector: 'ngl-carousel',
            template: "\n<div class=\"slds-carousel__stage\"><span class=\"slds-carousel__autoplay\" *ngIf=\"autoScroll\">\n    <button class=\"slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small\" [attr.aria-pressed]=\"!playing\" [title]=\"playLabel()\" (click)=\"togglePlay()\">\n      <svg class=\"slds-button__icon\" [nglIconName]=\"playing ? 'utility:pause' : 'utility:right'\"></svg><span class=\"slds-assistive-text\">{{ playLabel() }}</span>\n    </button></span>\n  <div class=\"slds-carousel__panels\" [style.transform]=\"'translateX(' + (-active * 100) + '%)'\">\n    <ng-content></ng-content>\n  </div>\n  <ul class=\"slds-carousel__indicators\" #indicatorsEl role=\"tablist\" (keydown)=\"onKeyboard($event)\">\n    <li class=\"slds-carousel__indicator\" *ngFor=\"let image of images; let i = index\" role=\"presentation\"><a class=\"slds-carousel__indicator-action\" nglCarouselIndicator href=\"javascript:void(0);\" role=\"tab\" [isActive]=\"isActive(i)\" [image]=\"getImage(i)\" [attr.aria-controls]=\"image.uid\" [title]=\"image.header\" (click)=\"onIndicatorClick(i)\"><span class=\"slds-assistive-text\">{{ image.header }}</span></a></li>\n  </ul>\n</div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            host: {
                '[class.slds-carousel]': 'true',
            }
        }),
        __param(0, Optional()), __param(0, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [Object])
    ], NglCarousel);
    return NglCarousel;
}());
export { NglCarousel };
//# sourceMappingURL=data:application/json;base64,