import { __decorate, __metadata } from "tslib";
import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy, OnInit, OnChanges, SimpleChanges } from '@angular/core';
import { HostService } from '../common/host/host.service';
var NglButton = /** @class */ (function () {
    function NglButton(el, renderer, hostService) {
        this.el = el;
        this.renderer = renderer;
        this.hostService = hostService;
        /**
         * Changes the appearance of the button.
         */
        this.variant = 'neutral';
        /**
         * Describes the position of the icon with respect to ng-content.
         */
        this.iconPosition = 'left';
        this.renderer.addClass(this.el.nativeElement, 'slds-button');
    }
    NglButton.prototype.ngOnInit = function () {
        this.setHostClass();
    };
    NglButton.prototype.ngOnChanges = function (changes) {
        if (changes.variant) {
            this.setHostClass();
        }
    };
    NglButton.prototype.hasLeftIcon = function () {
        return this.iconName && (!this.iconPosition || this.iconPosition === 'left');
    };
    NglButton.prototype.hasRightIcon = function () {
        return this.iconName && this.iconPosition === 'right';
    };
    NglButton.prototype.setHostClass = function () {
        var _a;
        this.hostService.updateClass(this.el, (_a = {},
            _a["slds-button_" + this.variant] = this.variant && this.variant !== 'base',
            _a));
    };
    NglButton.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HostService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglButton.prototype, "variant", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglButton.prototype, "iconName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglButton.prototype, "iconPosition", void 0);
    NglButton = __decorate([
        Component({
            // tslint:disable-next-line:component-selector
            selector: '[nglButton]',
            template: "\n<svg class=\"slds-button__icon slds-button__icon_left\" *ngIf=\"hasLeftIcon()\" [nglIconName]=\"iconName\"></svg>\n<ng-content></ng-content>\n<svg class=\"slds-button__icon slds-button__icon_right\" *ngIf=\"hasRightIcon()\" [nglIconName]=\"iconName\"></svg>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [HostService]
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2, HostService])
    ], NglButton);
    return NglButton;
}());
export { NglButton };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2J1dHRvbnMvYnV0dG9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25JLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQVMxRDtJQWtCRSxtQkFBb0IsRUFBYyxFQUFVLFFBQW1CLEVBQVUsV0FBd0I7UUFBN0UsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQWhCakc7O1dBRUc7UUFDTSxZQUFPLEdBQWdILFNBQVMsQ0FBQztRQVExSTs7V0FFRztRQUNNLGlCQUFZLEdBQXFCLE1BQU0sQ0FBQztRQUcvQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsNEJBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsK0JBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNuQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRUQsK0JBQVcsR0FBWDtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFRCxnQ0FBWSxHQUFaO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDO0lBQ3hELENBQUM7SUFFTyxnQ0FBWSxHQUFwQjs7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNsQyxHQUFDLGlCQUFlLElBQUksQ0FBQyxPQUFTLElBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE1BQU07Z0JBQ3hFLENBQUM7SUFDTCxDQUFDOztnQkExQnVCLFVBQVU7Z0JBQW9CLFNBQVM7Z0JBQXVCLFdBQVc7O0lBYnhGO1FBQVIsS0FBSyxFQUFFOzs4Q0FBa0k7SUFNakk7UUFBUixLQUFLLEVBQUU7OytDQUFrQjtJQUtqQjtRQUFSLEtBQUssRUFBRTs7bURBQXlDO0lBaEJ0QyxTQUFTO1FBUHJCLFNBQVMsQ0FBQztZQUNULDhDQUE4QztZQUM5QyxRQUFRLEVBQUUsYUFBYTtZQUN2QiwrUUFBNEI7WUFDNUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07WUFDL0MsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDO1NBQ3pCLENBQUM7eUNBbUJ3QixVQUFVLEVBQW9CLFNBQVMsRUFBdUIsV0FBVztPQWxCdEYsU0FBUyxDQThDckI7SUFBRCxnQkFBQztDQUFBLEFBOUNELElBOENDO1NBOUNZLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBPbkluaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdFNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vaG9zdC9ob3N0LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ1tuZ2xCdXR0b25dJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2J1dHRvbi5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW0hvc3RTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgTmdsQnV0dG9uIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBASW5wdXQoKSB2YXJpYW50OiAnYmFzZScgfCAnbmV1dHJhbCcgfCAnYnJhbmQnIHwgJ291dGxpbmUtYnJhbmQnIHwgJ2Rlc3RydWN0aXZlJyB8ICd0ZXh0LWRlc3RydWN0aXZlJyB8ICdpbnZlcnNlJyB8ICdzdWNjZXNzJyA9ICduZXV0cmFsJztcblxuICAvKipcbiAgICogTERTIG5hbWUgb2YgdGhlIGljb24uXG4gICAqIE5hbWVzIGFyZSB3cml0dGVuIGluIHRoZSBmb3JtYXQgJ3V0aWxpdHk6ZG93bicgd2hlcmUgJ3V0aWxpdHknIGlzIHRoZSBjYXRlZ29yeSwgYW5kICdkb3duJyBpcyB0aGUgc3BlY2lmaWMgaWNvbiB0byBiZSBkaXNwbGF5ZWQuXG4gICAqL1xuICBASW5wdXQoKSBpY29uTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZXNjcmliZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBpY29uIHdpdGggcmVzcGVjdCB0byBuZy1jb250ZW50LlxuICAgKi9cbiAgQElucHV0KCkgaWNvblBvc2l0aW9uOiAnbGVmdCcgfCAncmlnaHQnID0gJ2xlZnQnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBob3N0U2VydmljZTogSG9zdFNlcnZpY2UpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NsZHMtYnV0dG9uJyk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldEhvc3RDbGFzcygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnZhcmlhbnQpIHtcbiAgICAgIHRoaXMuc2V0SG9zdENsYXNzKCk7XG4gICAgfVxuICB9XG5cbiAgaGFzTGVmdEljb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaWNvbk5hbWUgJiYgKCF0aGlzLmljb25Qb3NpdGlvbiB8fCB0aGlzLmljb25Qb3NpdGlvbiA9PT0gJ2xlZnQnKTtcbiAgfVxuXG4gIGhhc1JpZ2h0SWNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pY29uTmFtZSAmJiB0aGlzLmljb25Qb3NpdGlvbiA9PT0gJ3JpZ2h0JztcbiAgfVxuXG4gIHByaXZhdGUgc2V0SG9zdENsYXNzKCkge1xuICAgIHRoaXMuaG9zdFNlcnZpY2UudXBkYXRlQ2xhc3ModGhpcy5lbCwge1xuICAgICAgW2BzbGRzLWJ1dHRvbl8ke3RoaXMudmFyaWFudH1gXTogdGhpcy52YXJpYW50ICYmIHRoaXMudmFyaWFudCAhPT0gJ2Jhc2UnLFxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==