import { __decorate, __metadata } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener, ElementRef, Renderer2, OnInit, OnChanges } from '@angular/core';
import { InputBoolean } from '../util/convert';
import { HostService } from '../common/host/host.service';
var NglButtonStateful = /** @class */ (function () {
    function NglButtonStateful(el, renderer, hostService) {
        this.el = el;
        this.renderer = renderer;
        this.hostService = hostService;
        /**
         * Triggered when the button is clicked.
         */
        this.stateChange = new EventEmitter();
        /**
         * Appearance.
         */
        this.variant = 'neutral';
        this.renderer.addClass(this.el.nativeElement, 'slds-button');
        this.renderer.addClass(this.el.nativeElement, 'slds-button_stateful');
        this.renderer.setAttribute(this.el.nativeElement, 'aria-live', 'assertive');
    }
    NglButtonStateful.prototype.onSelectChange = function () {
        this.stateChange.emit(!this.state);
    };
    NglButtonStateful.prototype.onFocusToggle = function (focused) {
        this.focused = !!+focused;
        if (!this.focused) {
            this.setHostClass();
        }
    };
    NglButtonStateful.prototype.ngOnInit = function () {
        this.setHostClass();
    };
    NglButtonStateful.prototype.ngOnChanges = function () {
        this.setHostClass();
    };
    NglButtonStateful.prototype.setHostClass = function () {
        var _a;
        this.hostService.updateClass(this.el, (_a = {},
            _a["slds-button_" + (this.variant === 'text' ? 'reset' : this.variant)] = !!this.variant,
            _a["slds-is-selected-clicked"] = this.state && this.focused,
            _a["slds-is-selected"] = this.state && !this.focused,
            _a["slds-not-selected"] = !this.state,
            _a));
    };
    NglButtonStateful.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: HostService }
    ]; };
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Boolean)
    ], NglButtonStateful.prototype, "state", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglButtonStateful.prototype, "stateChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglButtonStateful.prototype, "variant", void 0);
    __decorate([
        HostListener('click'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NglButtonStateful.prototype, "onSelectChange", null);
    __decorate([
        HostListener('focus', ['1']),
        HostListener('blur', ['0']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], NglButtonStateful.prototype, "onFocusToggle", null);
    NglButtonStateful = __decorate([
        Directive({
            selector: '[nglButtonStateful]',
            providers: [HostService],
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2, HostService])
    ], NglButtonStateful);
    return NglButtonStateful;
}());
export { NglButtonStateful };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLXN0YXRlZnVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL2J1dHRvbnMvYnV0dG9uLXN0YXRlZnVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0gsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU0xRDtJQW1CRSwyQkFBb0IsRUFBYyxFQUFVLFFBQW1CLEVBQVUsV0FBd0I7UUFBN0UsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQVpqRzs7V0FFRztRQUNPLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUVwRDs7V0FFRztRQUNNLFlBQU8sR0FBeUUsU0FBUyxDQUFDO1FBS2pHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFHRCwwQ0FBYyxHQUFkO1FBQ0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUlELHlDQUFhLEdBQWIsVUFBYyxPQUFlO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBRTFCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFRCxvQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCx1Q0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTyx3Q0FBWSxHQUFwQjs7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNsQyxHQUFDLGtCQUFlLElBQUksQ0FBQyxPQUFPLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUUsSUFBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDbkYsR0FBQywwQkFBMEIsSUFBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPO1lBQ3hELEdBQUMsa0JBQWtCLElBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQ2pELEdBQUMsbUJBQW1CLElBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSztnQkFDbEMsQ0FBQztJQUNMLENBQUM7O2dCQXBDdUIsVUFBVTtnQkFBb0IsU0FBUztnQkFBdUIsV0FBVzs7SUFkeEU7UUFBeEIsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFOztvREFBZ0I7SUFLOUI7UUFBVCxNQUFNLEVBQUU7OzBEQUEyQztJQUszQztRQUFSLEtBQUssRUFBRTs7c0RBQTJGO0lBV25HO1FBREMsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7OzsyREFHckI7SUFJRDtRQUZDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7MERBTzNCO0lBdENVLGlCQUFpQjtRQUo3QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQztTQUN6QixDQUFDO3lDQW9Cd0IsVUFBVSxFQUFvQixTQUFTLEVBQXVCLFdBQVc7T0FuQnRGLGlCQUFpQixDQXdEN0I7SUFBRCx3QkFBQztDQUFBLEFBeERELElBd0RDO1NBeERZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25Jbml0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uL3V0aWwvY29udmVydCc7XG5pbXBvcnQgeyBIb3N0U2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9ob3N0L2hvc3Quc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ2xCdXR0b25TdGF0ZWZ1bF0nLFxuICBwcm92aWRlcnM6IFtIb3N0U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIE5nbEJ1dHRvblN0YXRlZnVsIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gIC8qKlxuICAgKiBTaG93cyB3aGV0aGVyIHRoZSBidXR0b24gaGFzIGJlZW4gc2VsZWN0ZWQgb3Igbm90LlxuICAgKi9cbiAgQElucHV0KCkgQElucHV0Qm9vbGVhbigpIHN0YXRlOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUcmlnZ2VyZWQgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqL1xuICBAT3V0cHV0KCkgc3RhdGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgLyoqXG4gICAqIEFwcGVhcmFuY2UuXG4gICAqL1xuICBASW5wdXQoKSB2YXJpYW50OiAnYnJhbmQnIHwgJ2Rlc3RydWN0aXZlJyB8ICdpbnZlcnNlJyB8ICduZXV0cmFsJyB8ICdzdWNjZXNzJyB8ICd0ZXh0JyA9ICduZXV0cmFsJztcblxuICBwcml2YXRlIGZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGhvc3RTZXJ2aWNlOiBIb3N0U2VydmljZSApIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3NsZHMtYnV0dG9uJyk7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdzbGRzLWJ1dHRvbl9zdGF0ZWZ1bCcpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2FyaWEtbGl2ZScsICdhc3NlcnRpdmUnKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25TZWxlY3RDaGFuZ2UoKSB7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZS5lbWl0KCF0aGlzLnN0YXRlKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzJywgWycxJ10pXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInLCBbJzAnXSlcbiAgb25Gb2N1c1RvZ2dsZShmb2N1c2VkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmZvY3VzZWQgPSAhIStmb2N1c2VkO1xuXG4gICAgaWYgKCF0aGlzLmZvY3VzZWQpIHtcbiAgICAgIHRoaXMuc2V0SG9zdENsYXNzKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zZXRIb3N0Q2xhc3MoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuc2V0SG9zdENsYXNzKCk7XG4gIH1cblxuICBwcml2YXRlIHNldEhvc3RDbGFzcygpIHtcbiAgICB0aGlzLmhvc3RTZXJ2aWNlLnVwZGF0ZUNsYXNzKHRoaXMuZWwsIHtcbiAgICAgIFtgc2xkcy1idXR0b25fJHt0aGlzLnZhcmlhbnQgPT09ICd0ZXh0JyA/ICdyZXNldCcgOiB0aGlzLnZhcmlhbnR9YF06ICEhdGhpcy52YXJpYW50LFxuICAgICAgW2BzbGRzLWlzLXNlbGVjdGVkLWNsaWNrZWRgXTogdGhpcy5zdGF0ZSAmJiB0aGlzLmZvY3VzZWQsXG4gICAgICBbYHNsZHMtaXMtc2VsZWN0ZWRgXTogdGhpcy5zdGF0ZSAmJiAhdGhpcy5mb2N1c2VkLFxuICAgICAgW2BzbGRzLW5vdC1zZWxlY3RlZGBdOiAhdGhpcy5zdGF0ZSxcbiAgICB9KTtcbiAgfVxufVxuIl19