import { __decorate, __metadata, __read } from "tslib";
import { Component, Input, ChangeDetectionStrategy, OnInit, OnChanges, ElementRef } from '@angular/core';
import { HostService } from '../common/host/host.service';
import { ngClassCombine } from '../util/util';
import { normalizeIconName } from './util';
var NglIcon = /** @class */ (function () {
    function NglIcon(el, hostService) {
        this.el = el;
        this.hostService = hostService;
        /**
         * The appearance of a `utility` icon.
         */
        this.variant = 'default';
    }
    Object.defineProperty(NglIcon.prototype, "iconName", {
        get: function () {
            return this._iconName;
        },
        set: function (iconName) {
            this._iconName = normalizeIconName(iconName);
        },
        enumerable: true,
        configurable: true
    });
    NglIcon.prototype.ngOnInit = function () {
        this.setHostClass();
    };
    NglIcon.prototype.ngOnChanges = function () {
        this.setHostClass();
    };
    NglIcon.prototype.svgClasses = function () {
        var _a;
        var _b = __read(this.iconName.split(':'), 1), category = _b[0];
        var isUtility = category === 'utility';
        var isDefaultOrInverse = this.variant === 'default' || this.variant === 'inverse';
        var classes = (_a = {},
            _a["slds-icon_" + this.size] = !!this.size && this.size !== 'medium',
            _a["slds-icon-text-" + (isDefaultOrInverse ? 'default' : this.variant)] = isDefaultOrInverse ?
                (this.variant === 'default' ? isUtility : !isUtility)
                : !!this.variant,
            _a);
        return ngClassCombine(this.svgClass, classes);
    };
    NglIcon.prototype.setHostClass = function () {
        var _a;
        var _b = __read(this.iconName.split(':'), 2), category = _b[0], icon = _b[1];
        var kebabCaseName = icon.replace(/_/g, '-');
        this.hostService.updateClass(this.el, (_a = {},
            _a["slds-icon_container"] = category !== 'utility',
            _a["slds-icon_container_circle"] = category === 'action',
            _a["slds-icon-" + category + "-" + kebabCaseName] = category !== 'utility' && category !== 'doctype',
            _a));
    };
    NglIcon.ctorParameters = function () { return [
        { type: ElementRef },
        { type: HostService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NglIcon.prototype, "iconName", null);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglIcon.prototype, "variant", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglIcon.prototype, "size", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglIcon.prototype, "alternativeText", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglIcon.prototype, "svgClass", void 0);
    NglIcon = __decorate([
        Component({
            selector: 'ngl-icon, [ngl-icon]',
            template: "\n<svg class=\"slds-icon\" [nglIconName]=\"iconName\" [ngClass]=\"svgClasses()\"></svg>\n<ng-content></ng-content><span class=\"slds-assistive-text\" *ngIf=\"alternativeText\">{{alternativeText}}</span>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [HostService]
        }),
        __metadata("design:paramtypes", [ElementRef, HostService])
    ], NglIcon);
    return NglIcon;
}());
export { NglIcon };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi9pY29ucy9pY29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFRM0M7SUErQkUsaUJBQW9CLEVBQWMsRUFBVSxXQUF3QjtRQUFoRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUF0QnBFOztXQUVHO1FBQ00sWUFBTyxHQUFpRSxTQUFTLENBQUM7SUFtQnBCLENBQUM7SUE3Qi9ELHNCQUFJLDZCQUFRO2FBR3JCO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7YUFMUSxVQUFhLFFBQWdCO1lBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsQ0FBQzs7O09BQUE7SUE2QkQsMEJBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsNkJBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsNEJBQVUsR0FBVjs7UUFDUSxJQUFBLHdDQUFxQyxFQUFwQyxnQkFBb0MsQ0FBQztRQUM1QyxJQUFNLFNBQVMsR0FBRyxRQUFRLEtBQUssU0FBUyxDQUFDO1FBQ3pDLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUM7UUFFcEYsSUFBTSxPQUFPO1lBQ1gsR0FBQyxlQUFhLElBQUksQ0FBQyxJQUFNLElBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRO1lBQ2pFLEdBQUMscUJBQWtCLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUUsSUFBRyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN2RixDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO2dCQUNyRCxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPO2VBQ25CLENBQUM7UUFFRixPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTyw4QkFBWSxHQUFwQjs7UUFDUSxJQUFBLHdDQUEyQyxFQUExQyxnQkFBUSxFQUFFLFlBQWdDLENBQUM7UUFDbEQsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsR0FBQyxxQkFBcUIsSUFBRyxRQUFRLEtBQUssU0FBUztZQUMvQyxHQUFDLDRCQUE0QixJQUFHLFFBQVEsS0FBSyxRQUFRO1lBQ3JELEdBQUMsZUFBYSxRQUFRLFNBQUksYUFBZSxJQUFHLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxLQUFLLFNBQVM7Z0JBQzVGLENBQUM7SUFDTCxDQUFDOztnQkFsQ3VCLFVBQVU7Z0JBQXVCLFdBQVc7O0lBN0IzRDtRQUFSLEtBQUssRUFBRTs7OzJDQUVQO0lBUVE7UUFBUixLQUFLLEVBQUU7OzRDQUFtRjtJQUtsRjtRQUFSLEtBQUssRUFBRTs7eUNBQTZEO0lBSzVEO1FBQVIsS0FBSyxFQUFFOztvREFBeUI7SUFLeEI7UUFBUixLQUFLLEVBQUU7OzZDQUFzRTtJQTNCbkUsT0FBTztRQU5uQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsc0JBQXNCO1lBQ2hDLHNOQUEwQjtZQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtZQUMvQyxTQUFTLEVBQUUsQ0FBQyxXQUFXLENBQUM7U0FDekIsQ0FBQzt5Q0FnQ3dCLFVBQVUsRUFBdUIsV0FBVztPQS9CekQsT0FBTyxDQW1FbkI7SUFBRCxjQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0FuRVksT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBPbkluaXQsIE9uQ2hhbmdlcywgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdFNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vaG9zdC9ob3N0LnNlcnZpY2UnO1xuaW1wb3J0IHsgbmdDbGFzc0NvbWJpbmUgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgbm9ybWFsaXplSWNvbk5hbWUgfSBmcm9tICcuL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtaWNvbiwgW25nbC1pY29uXScsXG4gIHRlbXBsYXRlVXJsOiAnLi9pY29uLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbSG9zdFNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xJY29uIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIHNldCBpY29uTmFtZShpY29uTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faWNvbk5hbWUgPSBub3JtYWxpemVJY29uTmFtZShpY29uTmFtZSk7XG4gIH1cbiAgZ2V0IGljb25OYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9pY29uTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYXBwZWFyYW5jZSBvZiBhIGB1dGlsaXR5YCBpY29uLlxuICAgKi9cbiAgQElucHV0KCkgdmFyaWFudDogJ2RlZmF1bHQnIHwgJ3dhcm5pbmcnIHwgJ2Vycm9yJyB8ICdsaWdodCcgfCAnaW52ZXJzZScgfCBudWxsID0gJ2RlZmF1bHQnO1xuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgaWNvbi5cbiAgICovXG4gIEBJbnB1dCgpIHNpemU6ICd4eC1zbWFsbCcgfCAneC1zbWFsbCcgfCAnc21hbGwnIHwgJ21lZGl1bScgfCAnbGFyZ2UnO1xuXG4gIC8qKlxuICAgKiBUZXh0IHVzZWQgdG8gZGVzY3JpYmUgdGhlIGljb24gZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqL1xuICBASW5wdXQoKSBhbHRlcm5hdGl2ZVRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogQ1NTIGNsYXNzZXMgdGhhdCBhcmUgYXBwbGllZCB0byB0aGUgU1ZHLlxuICAgKi9cbiAgQElucHV0KCkgc3ZnQ2xhc3M6IHN0cmluZyB8IHN0cmluZ1tdIHwgU2V0PHN0cmluZz4gfCB7IFtrbGFzczogc3RyaW5nXTogYW55IH07XG5cbiAgcHJpdmF0ZSBfaWNvbk5hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGhvc3RTZXJ2aWNlOiBIb3N0U2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldEhvc3RDbGFzcygpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5zZXRIb3N0Q2xhc3MoKTtcbiAgfVxuXG4gIHN2Z0NsYXNzZXMoKSB7XG4gICAgY29uc3QgW2NhdGVnb3J5XSA9IHRoaXMuaWNvbk5hbWUuc3BsaXQoJzonKTtcbiAgICBjb25zdCBpc1V0aWxpdHkgPSBjYXRlZ29yeSA9PT0gJ3V0aWxpdHknO1xuICAgIGNvbnN0IGlzRGVmYXVsdE9ySW52ZXJzZSA9IHRoaXMudmFyaWFudCA9PT0gJ2RlZmF1bHQnIHx8IHRoaXMudmFyaWFudCA9PT0gJ2ludmVyc2UnO1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IHtcbiAgICAgIFtgc2xkcy1pY29uXyR7dGhpcy5zaXplfWBdOiAhIXRoaXMuc2l6ZSAmJiB0aGlzLnNpemUgIT09ICdtZWRpdW0nLFxuICAgICAgW2BzbGRzLWljb24tdGV4dC0ke2lzRGVmYXVsdE9ySW52ZXJzZSA/ICdkZWZhdWx0JyA6IHRoaXMudmFyaWFudH1gXTogaXNEZWZhdWx0T3JJbnZlcnNlID9cbiAgICAgICAgKHRoaXMudmFyaWFudCA9PT0gJ2RlZmF1bHQnID8gaXNVdGlsaXR5IDogIWlzVXRpbGl0eSlcbiAgICAgICAgOiAhIXRoaXMudmFyaWFudCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5nQ2xhc3NDb21iaW5lKHRoaXMuc3ZnQ2xhc3MsIGNsYXNzZXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRIb3N0Q2xhc3MoKSB7XG4gICAgY29uc3QgW2NhdGVnb3J5LCBpY29uXSA9IHRoaXMuaWNvbk5hbWUuc3BsaXQoJzonKTtcbiAgICBjb25zdCBrZWJhYkNhc2VOYW1lID0gaWNvbi5yZXBsYWNlKC9fL2csICctJyk7XG5cbiAgICB0aGlzLmhvc3RTZXJ2aWNlLnVwZGF0ZUNsYXNzKHRoaXMuZWwsIHtcbiAgICAgIFtgc2xkcy1pY29uX2NvbnRhaW5lcmBdOiBjYXRlZ29yeSAhPT0gJ3V0aWxpdHknLFxuICAgICAgW2BzbGRzLWljb25fY29udGFpbmVyX2NpcmNsZWBdOiBjYXRlZ29yeSA9PT0gJ2FjdGlvbicsXG4gICAgICBbYHNsZHMtaWNvbi0ke2NhdGVnb3J5fS0ke2tlYmFiQ2FzZU5hbWV9YF06IGNhdGVnb3J5ICE9PSAndXRpbGl0eScgJiYgY2F0ZWdvcnkgIT09ICdkb2N0eXBlJyxcbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=