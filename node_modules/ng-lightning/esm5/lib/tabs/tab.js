import { __decorate, __metadata, __param } from "tslib";
import { Directive, Input, TemplateRef, Output, EventEmitter, Optional } from '@angular/core';
import { uniqueId } from '../util/util';
/*
 * <ng-template ngl-tab label="...">
 *    Content goes here...
 * </ng-template>
 */
var NglTab = /** @class */ (function () {
    function NglTab(templateRef) {
        this.templateRef = templateRef;
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
        this.uid = uniqueId('tab');
        this._active = false;
    }
    Object.defineProperty(NglTab.prototype, "active", {
        get: function () {
            return this._active;
        },
        set: function (active) {
            if (active === this._active) {
                return;
            }
            this._active = active;
            if (active) {
                this.activate.emit(this);
            }
            else {
                this.deactivate.emit(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    NglTab.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], NglTab.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], NglTab.prototype, "label", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglTab.prototype, "activate", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglTab.prototype, "deactivate", void 0);
    NglTab = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: '[ngl-tab]',
            exportAs: 'nglTab',
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [TemplateRef])
    ], NglTab);
    return NglTab;
}());
export { NglTab };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGlnaHRuaW5nLyIsInNvdXJjZXMiOlsibGliL3RhYnMvdGFiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV4Qzs7OztHQUlHO0FBTUg7SUFVRSxnQkFBK0IsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBUGxELGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3RDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRWxELFFBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFZCxZQUFPLEdBQUcsS0FBSyxDQUFDO0lBRXVDLENBQUM7SUFFaEUsc0JBQUksMEJBQU07YUFVVjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO2FBWkQsVUFBVyxNQUFlO1lBQ3hCLElBQUksTUFBTSxLQUFNLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQUUsT0FBTzthQUFFO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQ3RCLElBQUksTUFBTSxFQUFFO2dCQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQzs7O09BQUE7O2dCQVYyQyxXQUFXLHVCQUExQyxRQUFROztJQVRaO1FBQVIsS0FBSyxFQUFFOztzQ0FBWTtJQUNYO1FBQVIsS0FBSyxFQUFFOzt5Q0FBa0M7SUFDaEM7UUFBVCxNQUFNLEVBQUU7OzRDQUF1QztJQUN0QztRQUFULE1BQU0sRUFBRTs7OENBQXlDO0lBSnZDLE1BQU07UUFMbEIsU0FBUyxDQUFDO1lBQ1QsOENBQThDO1lBQzlDLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLFFBQVEsRUFBRSxRQUFRO1NBQ25CLENBQUM7UUFXYSxXQUFBLFFBQVEsRUFBRSxDQUFBO3lDQUFxQixXQUFXO09BVjVDLE1BQU0sQ0F5QmxCO0lBQUQsYUFBQztDQUFBLEFBekJELElBeUJDO1NBekJZLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB1bmlxdWVJZCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbi8qXG4gKiA8bmctdGVtcGxhdGUgbmdsLXRhYiBsYWJlbD1cIi4uLlwiPlxuICogICAgQ29udGVudCBnb2VzIGhlcmUuLi5cbiAqIDwvbmctdGVtcGxhdGU+XG4gKi9cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW25nbC10YWJdJyxcbiAgZXhwb3J0QXM6ICduZ2xUYWInLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xUYWIge1xuICBASW5wdXQoKSBpZDogc3RyaW5nO1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgQE91dHB1dCgpIGFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcjxOZ2xUYWI+KCk7XG4gIEBPdXRwdXQoKSBkZWFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcjxOZ2xUYWI+KCk7XG5cbiAgdWlkID0gdW5pcXVlSWQoJ3RhYicpO1xuXG4gIHByaXZhdGUgX2FjdGl2ZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge31cblxuICBzZXQgYWN0aXZlKGFjdGl2ZTogYm9vbGVhbikge1xuICAgIGlmIChhY3RpdmUgPT09ICB0aGlzLl9hY3RpdmUpIHsgcmV0dXJuOyB9XG4gICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIHRoaXMuYWN0aXZhdGUuZW1pdCh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWFjdGl2YXRlLmVtaXQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG59XG4iXX0=