import { __decorate, __extends, __metadata } from "tslib";
import { Directive, TemplateRef, ContentChild, AfterContentInit } from '@angular/core';
import { NglTab } from './tab';
/*
 * <ngl-tab [label="..."]>
 *    <ng-template ngl-tab-label>...</ng-template>
 *    <ng-template ngl-tab-content>
 *       Content goes here...
 *    </ng-template>
 * </ngl-tab>
 */
// tslint:disable-next-line:directive-selector
var NglTabLabel = /** @class */ (function () {
    function NglTabLabel(templateRef) {
        this.templateRef = templateRef;
    }
    NglTabLabel.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    NglTabLabel = __decorate([
        Directive({ selector: '[ngl-tab-label]' }),
        __metadata("design:paramtypes", [TemplateRef])
    ], NglTabLabel);
    return NglTabLabel;
}());
export { NglTabLabel };
// tslint:disable-next-line:directive-selector
var NglTabContent = /** @class */ (function () {
    function NglTabContent(templateRef) {
        this.templateRef = templateRef;
    }
    NglTabContent.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    NglTabContent = __decorate([
        Directive({ selector: '[ngl-tab-content]' }),
        __metadata("design:paramtypes", [TemplateRef])
    ], NglTabContent);
    return NglTabContent;
}());
export { NglTabContent };
var NglTabVerbose = /** @class */ (function (_super) {
    __extends(NglTabVerbose, _super);
    function NglTabVerbose() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NglTabVerbose_1 = NglTabVerbose;
    NglTabVerbose.prototype.ngAfterContentInit = function () {
        if (this.labelTemplate) {
            this.label = this.labelTemplate.templateRef;
        }
        this.templateRef = this.contentTemplate.templateRef;
    };
    var NglTabVerbose_1;
    __decorate([
        ContentChild(NglTabContent),
        __metadata("design:type", NglTabContent)
    ], NglTabVerbose.prototype, "contentTemplate", void 0);
    __decorate([
        ContentChild(NglTabLabel),
        __metadata("design:type", NglTabLabel)
    ], NglTabVerbose.prototype, "labelTemplate", void 0);
    NglTabVerbose = NglTabVerbose_1 = __decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: 'ngl-tab',
            providers: [{ provide: NglTab, useExisting: NglTabVerbose_1 }],
        })
    ], NglTabVerbose);
    return NglTabVerbose;
}(NglTab));
export { NglTabVerbose };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLXZlcmJvc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1saWdodG5pbmcvIiwic291cmNlcyI6WyJsaWIvdGFicy90YWItdmVyYm9zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFL0I7Ozs7Ozs7R0FPRztBQUNILDhDQUE4QztBQUU5QztJQUNFLHFCQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBRyxDQUFDOztnQkFBcEIsV0FBVzs7SUFEaEMsV0FBVztRQUR2QixTQUFTLENBQUMsRUFBQyxRQUFRLEVBQUUsaUJBQWlCLEVBQUMsQ0FBQzt5Q0FFUCxXQUFXO09BRGhDLFdBQVcsQ0FFdkI7SUFBRCxrQkFBQztDQUFBLEFBRkQsSUFFQztTQUZZLFdBQVc7QUFJeEIsOENBQThDO0FBRTlDO0lBQ0UsdUJBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7O2dCQUFwQixXQUFXOztJQURoQyxhQUFhO1FBRHpCLFNBQVMsQ0FBQyxFQUFDLFFBQVEsRUFBRSxtQkFBbUIsRUFBQyxDQUFDO3lDQUVULFdBQVc7T0FEaEMsYUFBYSxDQUV6QjtJQUFELG9CQUFDO0NBQUEsQUFGRCxJQUVDO1NBRlksYUFBYTtBQVMxQjtJQUFtQyxpQ0FBTTtJQUF6Qzs7SUFXQSxDQUFDO3NCQVhZLGFBQWE7SUFLeEIsMENBQWtCLEdBQWxCO1FBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7U0FDN0M7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDO0lBQ3RELENBQUM7O0lBUjRCO1FBQTVCLFlBQVksQ0FBQyxhQUFhLENBQUM7a0NBQWtCLGFBQWE7MERBQUM7SUFDakM7UUFBMUIsWUFBWSxDQUFDLFdBQVcsQ0FBQztrQ0FBZ0IsV0FBVzt3REFBQztJQUgzQyxhQUFhO1FBTHpCLFNBQVMsQ0FBQztZQUNULDhDQUE4QztZQUM5QyxRQUFRLEVBQUUsU0FBUztZQUNuQixTQUFTLEVBQUUsQ0FBRSxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLGVBQWEsRUFBQyxDQUFFO1NBQzdELENBQUM7T0FDVyxhQUFhLENBV3pCO0lBQUQsb0JBQUM7Q0FBQSxBQVhELENBQW1DLE1BQU0sR0FXeEM7U0FYWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgQ29udGVudENoaWxkLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2xUYWIgfSBmcm9tICcuL3RhYic7XG5cbi8qXG4gKiA8bmdsLXRhYiBbbGFiZWw9XCIuLi5cIl0+XG4gKiAgICA8bmctdGVtcGxhdGUgbmdsLXRhYi1sYWJlbD4uLi48L25nLXRlbXBsYXRlPlxuICogICAgPG5nLXRlbXBsYXRlIG5nbC10YWItY29udGVudD5cbiAqICAgICAgIENvbnRlbnQgZ29lcyBoZXJlLi4uXG4gKiAgICA8L25nLXRlbXBsYXRlPlxuICogPC9uZ2wtdGFiPlxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1tuZ2wtdGFiLWxhYmVsXSd9KVxuZXhwb3J0IGNsYXNzIE5nbFRhYkxhYmVsIHtcbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ1tuZ2wtdGFiLWNvbnRlbnRdJ30pXG5leHBvcnQgY2xhc3MgTmdsVGFiQ29udGVudCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge31cbn1cblxuQERpcmVjdGl2ZSh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICduZ2wtdGFiJyxcbiAgcHJvdmlkZXJzOiBbIHtwcm92aWRlOiBOZ2xUYWIsIHVzZUV4aXN0aW5nOiBOZ2xUYWJWZXJib3NlfSBdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ2xUYWJWZXJib3NlIGV4dGVuZHMgTmdsVGFiIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgQENvbnRlbnRDaGlsZChOZ2xUYWJDb250ZW50KSBjb250ZW50VGVtcGxhdGU6IE5nbFRhYkNvbnRlbnQ7XG4gIEBDb250ZW50Q2hpbGQoTmdsVGFiTGFiZWwpIGxhYmVsVGVtcGxhdGU6IE5nbFRhYkxhYmVsO1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAodGhpcy5sYWJlbFRlbXBsYXRlKSB7XG4gICAgICB0aGlzLmxhYmVsID0gdGhpcy5sYWJlbFRlbXBsYXRlLnRlbXBsYXRlUmVmO1xuICAgIH1cbiAgICB0aGlzLnRlbXBsYXRlUmVmID0gdGhpcy5jb250ZW50VGVtcGxhdGUudGVtcGxhdGVSZWY7XG4gIH1cbn1cbiJdfQ==