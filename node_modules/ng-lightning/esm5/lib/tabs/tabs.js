import { __decorate, __metadata } from "tslib";
import { Component, Input, QueryList, ContentChildren, Output, EventEmitter, ElementRef, Renderer2, AfterContentInit } from '@angular/core';
import { isInt } from '../util/util';
import { NglTab } from './tab';
import { InputBoolean } from '../util/convert';
var NglTabs = /** @class */ (function () {
    function NglTabs(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.selectedChange = new EventEmitter();
        /**
         * Whether every tab's content is instantiated when visible, and destroyed when hidden.
         */
        this.lazy = true;
        this.renderer.addClass(this.element.nativeElement, "slds-tabs_" + this.variant);
    }
    Object.defineProperty(NglTabs.prototype, "variant", {
        get: function () {
            return this._variant || 'default';
        },
        set: function (variant) {
            var el = this.element.nativeElement;
            this.renderer.removeClass(el, "slds-tabs_" + this.variant);
            this._variant = variant;
            this.renderer.addClass(el, "slds-tabs_" + this.variant);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NglTabs.prototype, "setSelected", {
        set: function (selected) {
            if (selected === this.selected) {
                return;
            }
            this.selected = selected;
            if (!this.tabs) {
                return;
            } // Wait for content to initialize
            this.activate();
        },
        enumerable: true,
        configurable: true
    });
    NglTabs.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Initial selection after all tabs are created
        this.activate();
        if (!this.activeTab) {
            setTimeout(function () { return _this.select(_this.tabs.first); });
        }
    };
    NglTabs.prototype.select = function (tab) {
        this.selectedChange.emit(tab);
    };
    NglTabs.prototype.move = function (evt, moves) {
        evt.preventDefault();
        var tabs = this.tabs.toArray();
        var selectedIndex = tabs.indexOf(this.activeTab);
        this.select(tabs[(tabs.length + selectedIndex + moves) % tabs.length]);
    };
    NglTabs.prototype.tabClass = function (tab) {
        var _a;
        return _a = {},
            _a["slds-tabs_" + this.variant + "__content"] = true,
            _a["slds-" + (tab.active ? 'show' : 'hide')] = true,
            _a;
    };
    NglTabs.prototype.trackByTab = function (index, tab) {
        return tab.uid;
    };
    NglTabs.prototype.activate = function () {
        if (this.activeTab) {
            this.activeTab.active = false;
        }
        this.activeTab = this.findTab();
        if (this.activeTab) {
            this.activeTab.active = true;
        }
    };
    NglTabs.prototype.findTab = function (value) {
        if (value === void 0) { value = this.selected; }
        if (value instanceof NglTab) {
            return value;
        }
        if (isInt(value)) {
            return this.tabs.toArray()[+value];
        }
        return this.tabs.toArray().find(function (t) {
            return t.id && t.id === value;
        });
    };
    NglTabs.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], NglTabs.prototype, "variant", null);
    __decorate([
        ContentChildren(NglTab),
        __metadata("design:type", QueryList)
    ], NglTabs.prototype, "tabs", void 0);
    __decorate([
        Input('selected'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], NglTabs.prototype, "setSelected", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], NglTabs.prototype, "selectedChange", void 0);
    __decorate([
        Input(), InputBoolean(),
        __metadata("design:type", Object)
    ], NglTabs.prototype, "lazy", void 0);
    NglTabs = __decorate([
        Component({
            selector: 'ngl-tabset',
            template: "\n<ul [ngClass]=\"'slds-tabs_' + variant + '__nav'\" role=\"tablist\" (keydown.ArrowLeft)=\"move($event, -1)\" (keydown.ArrowRight)=\"move($event, 1)\">\n  <li *ngFor=\"let tab of tabs; trackBy: trackByTab\" [ngClass]=\"'slds-tabs_' + variant + '__item'\" [class.slds-is-active]=\"tab.active\" [id]=\"tab.uid + '__item'\" [attr.aria-controls]=\"tab.uid\" (click)=\"select(tab)\" role=\"presentation\"><a [nglInternalOutlet]=\"tab.label\" [ngClass]=\"'slds-tabs_' + variant + '__link'\" role=\"tab\" [attr.aria-selected]=\"tab.active\" [attr.tabindex]=\"tab.active ? 0 : -1\"></a></li>\n</ul>\n<div *ngFor=\"let tab of tabs; trackBy: trackByTab\" [id]=\"tab.uid\" [attr.aria-labelledby]=\"tab.uid + '__item'\" [ngClass]=\"tabClass(tab)\" role=\"tabpanel\">\n  <ng-container *ngIf=\"!lazy || tab.active\">\n    <ng-template [ngTemplateOutlet]=\"tab?.templateRef\"></ng-template>\n  </ng-container>\n</div>"
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], NglTabs);
    return NglTabs;
}());
export { NglTabs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWxpZ2h0bmluZy8iLCJzb3VyY2VzIjpbImxpYi90YWJzL3RhYnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVJLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUMvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNL0M7SUFtQ0UsaUJBQW9CLE9BQW1CLEVBQVUsUUFBbUI7UUFBaEQsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFUMUQsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRXREOztXQUVHO1FBQ3NCLFNBQUksR0FBRyxJQUFJLENBQUM7UUFLbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsZUFBYSxJQUFJLENBQUMsT0FBUyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQW5DUSxzQkFBSSw0QkFBTzthQU1wQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUM7UUFDcEMsQ0FBQzthQVJRLFVBQVksT0FBNkI7WUFDaEQsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLGVBQWEsSUFBSSxDQUFDLE9BQVMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxlQUFhLElBQUksQ0FBQyxPQUFTLENBQUMsQ0FBQztRQUMxRCxDQUFDOzs7T0FBQTtJQVNrQixzQkFBSSxnQ0FBVzthQUFmLFVBQWdCLFFBQWtDO1lBQ25FLElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQUUsT0FBTzthQUFFO1lBRTNDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBRXpCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUFFLE9BQU87YUFBRSxDQUFDLGlDQUFpQztZQUU3RCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEIsQ0FBQzs7O09BQUE7SUFlRCxvQ0FBa0IsR0FBbEI7UUFBQSxpQkFNQztRQUxDLCtDQUErQztRQUMvQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsVUFBVSxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQTVCLENBQTRCLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7SUFFRCx3QkFBTSxHQUFOLFVBQU8sR0FBVztRQUNoQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsc0JBQUksR0FBSixVQUFLLEdBQVUsRUFBRSxLQUFhO1FBQzVCLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVyQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pDLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBRSxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQUFhLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFFLENBQUM7SUFDM0UsQ0FBQztJQUVELDBCQUFRLEdBQVIsVUFBUyxHQUFXOztRQUNsQjtZQUNFLEdBQUMsZUFBYSxJQUFJLENBQUMsT0FBTyxjQUFXLElBQUcsSUFBSTtZQUM1QyxHQUFDLFdBQVEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUUsSUFBRyxJQUFJO2VBQzlDO0lBQ0osQ0FBQztJQUVELDRCQUFVLEdBQVYsVUFBVyxLQUFLLEVBQUUsR0FBVztRQUMzQixPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVPLDBCQUFRLEdBQWhCO1FBQ0UsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUMvQjtRQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2hDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRU8seUJBQU8sR0FBZixVQUFnQixLQUEwQjtRQUExQixzQkFBQSxFQUFBLFFBQWEsSUFBSSxDQUFDLFFBQVE7UUFDeEMsSUFBSSxLQUFLLFlBQVksTUFBTSxFQUFFO1lBQzNCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFTO1lBQ3hDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQXZENEIsVUFBVTtnQkFBb0IsU0FBUzs7SUFqQzNEO1FBQVIsS0FBSyxFQUFFOzs7MENBS1A7SUFLd0I7UUFBeEIsZUFBZSxDQUFDLE1BQU0sQ0FBQztrQ0FBTyxTQUFTO3lDQUFTO0lBSTlCO1FBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7Ozs4Q0FRakI7SUFFUztRQUFULE1BQU0sRUFBRTs7bURBQTZDO0lBSzdCO1FBQXhCLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRTs7eUNBQWE7SUEvQjFCLE9BQU87UUFKbkIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFlBQVk7WUFDdEIsbTVCQUEwQjtTQUMzQixDQUFDO3lDQW9DNkIsVUFBVSxFQUFvQixTQUFTO09BbkN6RCxPQUFPLENBMkZuQjtJQUFELGNBQUM7Q0FBQSxBQTNGRCxJQTJGQztTQTNGWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgUXVlcnlMaXN0LCBDb250ZW50Q2hpbGRyZW4sIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzSW50IH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IE5nbFRhYiB9IGZyb20gJy4vdGFiJztcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uL3V0aWwvY29udmVydCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nbC10YWJzZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFicy5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTmdsVGFicyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXG4gIEBJbnB1dCgpIHNldCB2YXJpYW50KHZhcmlhbnQ6ICdkZWZhdWx0JyB8ICdzY29wZWQnKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKGVsLCBgc2xkcy10YWJzXyR7dGhpcy52YXJpYW50fWApO1xuICAgIHRoaXMuX3ZhcmlhbnQgPSB2YXJpYW50O1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoZWwsIGBzbGRzLXRhYnNfJHt0aGlzLnZhcmlhbnR9YCk7XG4gIH1cbiAgZ2V0IHZhcmlhbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhcmlhbnQgfHwgJ2RlZmF1bHQnO1xuICB9XG5cbiAgQENvbnRlbnRDaGlsZHJlbihOZ2xUYWIpIHRhYnM6IFF1ZXJ5TGlzdDxOZ2xUYWI+O1xuXG4gIGFjdGl2ZVRhYjogTmdsVGFiO1xuICBzZWxlY3RlZDogc3RyaW5nIHwgbnVtYmVyIHwgTmdsVGFiO1xuICBASW5wdXQoJ3NlbGVjdGVkJykgc2V0IHNldFNlbGVjdGVkKHNlbGVjdGVkOiBzdHJpbmcgfCBudW1iZXIgfCBOZ2xUYWIpIHtcbiAgICBpZiAoc2VsZWN0ZWQgPT09IHRoaXMuc2VsZWN0ZWQpIHsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG5cbiAgICBpZiAoIXRoaXMudGFicykgeyByZXR1cm47IH0gLy8gV2FpdCBmb3IgY29udGVudCB0byBpbml0aWFsaXplXG5cbiAgICB0aGlzLmFjdGl2YXRlKCk7XG4gIH1cblxuICBAT3V0cHV0KCkgc2VsZWN0ZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPE5nbFRhYj4oKTtcblxuICAvKipcbiAgICogV2hldGhlciBldmVyeSB0YWIncyBjb250ZW50IGlzIGluc3RhbnRpYXRlZCB3aGVuIHZpc2libGUsIGFuZCBkZXN0cm95ZWQgd2hlbiBoaWRkZW4uXG4gICAqL1xuICBASW5wdXQoKSBASW5wdXRCb29sZWFuKCkgbGF6eSA9IHRydWU7XG5cbiAgcHJpdmF0ZSBfdmFyaWFudDogJ2RlZmF1bHQnIHwgJ3Njb3BlZCc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCBgc2xkcy10YWJzXyR7dGhpcy52YXJpYW50fWApO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8vIEluaXRpYWwgc2VsZWN0aW9uIGFmdGVyIGFsbCB0YWJzIGFyZSBjcmVhdGVkXG4gICAgdGhpcy5hY3RpdmF0ZSgpO1xuICAgIGlmICghdGhpcy5hY3RpdmVUYWIpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZWxlY3QodGhpcy50YWJzLmZpcnN0KSk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0KHRhYjogTmdsVGFiKSB7XG4gICAgdGhpcy5zZWxlY3RlZENoYW5nZS5lbWl0KHRhYik7XG4gIH1cblxuICBtb3ZlKGV2dDogRXZlbnQsIG1vdmVzOiBudW1iZXIpIHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IHRhYnMgPSB0aGlzLnRhYnMudG9BcnJheSgpO1xuICAgIGNvbnN0IHNlbGVjdGVkSW5kZXggPSB0YWJzLmluZGV4T2YoIHRoaXMuYWN0aXZlVGFiICk7XG4gICAgdGhpcy5zZWxlY3QoIHRhYnNbKHRhYnMubGVuZ3RoICsgc2VsZWN0ZWRJbmRleCArIG1vdmVzKSAlIHRhYnMubGVuZ3RoXSApO1xuICB9XG5cbiAgdGFiQ2xhc3ModGFiOiBOZ2xUYWIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BzbGRzLXRhYnNfJHt0aGlzLnZhcmlhbnR9X19jb250ZW50YF06IHRydWUsXG4gICAgICBbYHNsZHMtJHt0YWIuYWN0aXZlID8gJ3Nob3cnIDogJ2hpZGUnfWBdOiB0cnVlLFxuICAgIH07XG4gIH1cblxuICB0cmFja0J5VGFiKGluZGV4LCB0YWI6IE5nbFRhYikge1xuICAgIHJldHVybiB0YWIudWlkO1xuICB9XG5cbiAgcHJpdmF0ZSBhY3RpdmF0ZSgpIHtcbiAgICBpZiAodGhpcy5hY3RpdmVUYWIpIHtcbiAgICAgIHRoaXMuYWN0aXZlVGFiLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZVRhYiA9IHRoaXMuZmluZFRhYigpO1xuICAgIGlmICh0aGlzLmFjdGl2ZVRhYikge1xuICAgICAgdGhpcy5hY3RpdmVUYWIuYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGZpbmRUYWIodmFsdWU6IGFueSA9IHRoaXMuc2VsZWN0ZWQpOiBOZ2xUYWIge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5nbFRhYikge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAoaXNJbnQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWJzLnRvQXJyYXkoKVsrdmFsdWVdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50YWJzLnRvQXJyYXkoKS5maW5kKCh0OiBOZ2xUYWIpID0+IHtcbiAgICAgIHJldHVybiB0LmlkICYmIHQuaWQgPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG4iXX0=