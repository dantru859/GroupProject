import { QueryList, EventEmitter, OnChanges, SimpleChanges, ElementRef } from '@angular/core';
import { NglCarouselImage } from './carousel-image';
import { NglCarouselIndicator } from './carousel-indicator';
import * as ɵngcc0 from '@angular/core';
export declare class NglCarousel implements OnChanges {
    private document;
    readonly active: any;
    activeChange: EventEmitter<number>;
    /**
     * The auto scroll duration in seconds. After that the next image is displayed.
     */
    scrollDuration: number;
    /**
     * Whether auto scroll is enabled.
     */
    autoScroll: boolean;
    /**
     * Whether the carousel should continue looping from the beginning after the last item is displayed.
     */
    autoRefresh: boolean;
    images: QueryList<NglCarouselImage>;
    indicators: QueryList<NglCarouselIndicator>;
    indicatorsEl: ElementRef<HTMLElement>;
    readonly labels: {
        startAutoPlay: string;
        stopAutoPlay: string;
    };
    playing: boolean;
    private nextTimer;
    constructor(document: any);
    isActive(index: number): boolean;
    getImage(index: number): NglCarouselImage;
    ngOnChanges(changes: SimpleChanges): void;
    onIndicatorClick(index: number): void;
    onKeyboard(evt: KeyboardEvent): void;
    setActive(index: number, stopPlaying?: boolean): void;
    togglePlay(): void;
    playLabel(): string;
    private activateNext;
    private setTimer;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglCarousel, [{ optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglCarousel, "ngl-carousel", never, { "scrollDuration": "scrollDuration"; "autoScroll": "autoScroll"; "autoRefresh": "autoRefresh"; "labels": "labels"; "active": "active"; }, { "activeChange": "activeChange"; }, ["images"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuZC50cyIsInNvdXJjZXMiOlsiY2Fyb3VzZWwuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFF1ZXJ5TGlzdCwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nbENhcm91c2VsSW1hZ2UgfSBmcm9tICcuL2Nhcm91c2VsLWltYWdlJztcbmltcG9ydCB7IE5nbENhcm91c2VsSW5kaWNhdG9yIH0gZnJvbSAnLi9jYXJvdXNlbC1pbmRpY2F0b3InO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsQ2Fyb3VzZWwgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgcmVhZG9ubHkgYWN0aXZlOiBhbnk7XG4gICAgYWN0aXZlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICAvKipcbiAgICAgKiBUaGUgYXV0byBzY3JvbGwgZHVyYXRpb24gaW4gc2Vjb25kcy4gQWZ0ZXIgdGhhdCB0aGUgbmV4dCBpbWFnZSBpcyBkaXNwbGF5ZWQuXG4gICAgICovXG4gICAgc2Nyb2xsRHVyYXRpb246IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGF1dG8gc2Nyb2xsIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgYXV0b1Njcm9sbDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjYXJvdXNlbCBzaG91bGQgY29udGludWUgbG9vcGluZyBmcm9tIHRoZSBiZWdpbm5pbmcgYWZ0ZXIgdGhlIGxhc3QgaXRlbSBpcyBkaXNwbGF5ZWQuXG4gICAgICovXG4gICAgYXV0b1JlZnJlc2g6IGJvb2xlYW47XG4gICAgaW1hZ2VzOiBRdWVyeUxpc3Q8TmdsQ2Fyb3VzZWxJbWFnZT47XG4gICAgaW5kaWNhdG9yczogUXVlcnlMaXN0PE5nbENhcm91c2VsSW5kaWNhdG9yPjtcbiAgICBpbmRpY2F0b3JzRWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICAgIHJlYWRvbmx5IGxhYmVsczoge1xuICAgICAgICBzdGFydEF1dG9QbGF5OiBzdHJpbmc7XG4gICAgICAgIHN0b3BBdXRvUGxheTogc3RyaW5nO1xuICAgIH07XG4gICAgcGxheWluZzogYm9vbGVhbjtcbiAgICBwcml2YXRlIG5leHRUaW1lcjtcbiAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudDogYW55KTtcbiAgICBpc0FjdGl2ZShpbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBnZXRJbWFnZShpbmRleDogbnVtYmVyKTogTmdsQ2Fyb3VzZWxJbWFnZTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBvbkluZGljYXRvckNsaWNrKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIG9uS2V5Ym9hcmQoZXZ0OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBzZXRBY3RpdmUoaW5kZXg6IG51bWJlciwgc3RvcFBsYXlpbmc/OiBib29sZWFuKTogdm9pZDtcbiAgICB0b2dnbGVQbGF5KCk6IHZvaWQ7XG4gICAgcGxheUxhYmVsKCk6IHN0cmluZztcbiAgICBwcml2YXRlIGFjdGl2YXRlTmV4dDtcbiAgICBwcml2YXRlIHNldFRpbWVyO1xufVxuIl19