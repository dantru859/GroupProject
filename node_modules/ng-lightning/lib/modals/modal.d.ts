import { ElementRef, EventEmitter, OnChanges, SimpleChanges, AfterContentInit, OnDestroy } from '@angular/core';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { Overlay } from '@angular/cdk/overlay';
import { NglModalHeaderTemplate, NglModalTaglineTemplate, NglModalFooterTemplate } from './templates';
import * as ɵngcc0 from '@angular/core';
export declare class NglModal implements OnChanges, AfterContentInit, OnDestroy {
    private focusTrapFactory;
    private document;
    private overlay;
    private element;
    header: string;
    size: string;
    directional: boolean;
    headingId: string;
    contentId: string;
    open: boolean;
    get hasHeader(): string | NglModalHeaderTemplate;
    closeButtonAssistiveText: string;
    openChange: EventEmitter<any>;
    headerTpl: NglModalHeaderTemplate;
    taglineTpl: NglModalTaglineTemplate;
    footer: NglModalFooterTemplate;
    dismissOnClickOutside: boolean;
    prompt: 'success' | 'warning' | 'error' | 'wrench' | 'offline' | 'info';
    showClose: boolean;
    /** The class that traps and manages focus within the dialog. */
    private focusTrap;
    private container;
    /** Element that was focused before the dialog was opened. Save this to restore upon close. */
    private elementFocusedBeforeDialogWasOpened;
    private scrollStrategy;
    constructor(focusTrapFactory: FocusTrapFactory, document: any, overlay: Overlay, element: ElementRef);
    close(evt?: Event): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    clickOutside(evt: any): void;
    ngOnDestroy(): void;
    modalClass(): {
        [x: string]: boolean;
        [`slds-fade-in-open`]: boolean;
        [`slds-modal_prompt`]: boolean;
    };
    modalHeaderClass(): {
        [x: string]: boolean;
        [`slds-modal__header_empty`]: boolean;
    };
    modalFooterClass(): {
        [`slds-modal__footer_directional`]: boolean;
        [`slds-theme_default`]: boolean;
    };
    private handleOpen;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglModal, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglModal, "ngl-modal", never, { "header": "header"; "directional": "directional"; "open": "open"; "closeButtonAssistiveText": "closeButtonAssistiveText"; "dismissOnClickOutside": "dismissOnClickOutside"; "size": "size"; "prompt": "prompt"; }, { "openChange": "openChange"; }, ["headerTpl", "taglineTpl", "footer"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuZC50cyIsInNvdXJjZXMiOlsibW9kYWwuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb2N1c1RyYXBGYWN0b3J5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IE5nbE1vZGFsSGVhZGVyVGVtcGxhdGUsIE5nbE1vZGFsVGFnbGluZVRlbXBsYXRlLCBOZ2xNb2RhbEZvb3RlclRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsTW9kYWwgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBmb2N1c1RyYXBGYWN0b3J5O1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgcHJpdmF0ZSBvdmVybGF5O1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBoZWFkZXI6IHN0cmluZztcbiAgICBzaXplOiBzdHJpbmc7XG4gICAgZGlyZWN0aW9uYWw6IGJvb2xlYW47XG4gICAgaGVhZGluZ0lkOiBzdHJpbmc7XG4gICAgY29udGVudElkOiBzdHJpbmc7XG4gICAgb3BlbjogYm9vbGVhbjtcbiAgICBnZXQgaGFzSGVhZGVyKCk6IHN0cmluZyB8IE5nbE1vZGFsSGVhZGVyVGVtcGxhdGU7XG4gICAgY2xvc2VCdXR0b25Bc3Npc3RpdmVUZXh0OiBzdHJpbmc7XG4gICAgb3BlbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaGVhZGVyVHBsOiBOZ2xNb2RhbEhlYWRlclRlbXBsYXRlO1xuICAgIHRhZ2xpbmVUcGw6IE5nbE1vZGFsVGFnbGluZVRlbXBsYXRlO1xuICAgIGZvb3RlcjogTmdsTW9kYWxGb290ZXJUZW1wbGF0ZTtcbiAgICBkaXNtaXNzT25DbGlja091dHNpZGU6IGJvb2xlYW47XG4gICAgcHJvbXB0OiAnc3VjY2VzcycgfCAnd2FybmluZycgfCAnZXJyb3InIHwgJ3dyZW5jaCcgfCAnb2ZmbGluZScgfCAnaW5mbyc7XG4gICAgc2hvd0Nsb3NlOiBib29sZWFuO1xuICAgIC8qKiBUaGUgY2xhc3MgdGhhdCB0cmFwcyBhbmQgbWFuYWdlcyBmb2N1cyB3aXRoaW4gdGhlIGRpYWxvZy4gKi9cbiAgICBwcml2YXRlIGZvY3VzVHJhcDtcbiAgICBwcml2YXRlIGNvbnRhaW5lcjtcbiAgICAvKiogRWxlbWVudCB0aGF0IHdhcyBmb2N1c2VkIGJlZm9yZSB0aGUgZGlhbG9nIHdhcyBvcGVuZWQuIFNhdmUgdGhpcyB0byByZXN0b3JlIHVwb24gY2xvc2UuICovXG4gICAgcHJpdmF0ZSBlbGVtZW50Rm9jdXNlZEJlZm9yZURpYWxvZ1dhc09wZW5lZDtcbiAgICBwcml2YXRlIHNjcm9sbFN0cmF0ZWd5O1xuICAgIGNvbnN0cnVjdG9yKGZvY3VzVHJhcEZhY3Rvcnk6IEZvY3VzVHJhcEZhY3RvcnksIGRvY3VtZW50OiBhbnksIG92ZXJsYXk6IE92ZXJsYXksIGVsZW1lbnQ6IEVsZW1lbnRSZWYpO1xuICAgIGNsb3NlKGV2dD86IEV2ZW50KTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBjbGlja091dHNpZGUoZXZ0OiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbW9kYWxDbGFzcygpOiB7XG4gICAgICAgIFt4OiBzdHJpbmddOiBib29sZWFuO1xuICAgICAgICBbYHNsZHMtZmFkZS1pbi1vcGVuYF06IGJvb2xlYW47XG4gICAgICAgIFtgc2xkcy1tb2RhbF9wcm9tcHRgXTogYm9vbGVhbjtcbiAgICB9O1xuICAgIG1vZGFsSGVhZGVyQ2xhc3MoKToge1xuICAgICAgICBbeDogc3RyaW5nXTogYm9vbGVhbjtcbiAgICAgICAgW2BzbGRzLW1vZGFsX19oZWFkZXJfZW1wdHlgXTogYm9vbGVhbjtcbiAgICB9O1xuICAgIG1vZGFsRm9vdGVyQ2xhc3MoKToge1xuICAgICAgICBbYHNsZHMtbW9kYWxfX2Zvb3Rlcl9kaXJlY3Rpb25hbGBdOiBib29sZWFuO1xuICAgICAgICBbYHNsZHMtdGhlbWVfZGVmYXVsdGBdOiBib29sZWFuO1xuICAgIH07XG4gICAgcHJpdmF0ZSBoYW5kbGVPcGVuO1xufVxuIl19