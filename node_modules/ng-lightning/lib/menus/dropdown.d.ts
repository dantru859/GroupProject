import { EventEmitter, ElementRef, OnInit, OnDestroy, QueryList, Renderer2 } from '@angular/core';
import { NglDropdownItem } from './dropdown-item';
import * as ɵngcc0 from '@angular/core';
export declare class NglDropdown implements OnInit, OnDestroy {
    element: ElementRef;
    renderer: Renderer2;
    set isOpen(isOpen: boolean);
    get isOpen(): boolean;
    handlePageEvents: boolean;
    items: QueryList<NglDropdownItem>;
    isOpenChange: EventEmitter<boolean>;
    triggerFocusEventEmitter: EventEmitter<any>;
    private _isOpen;
    private openEventSubscription;
    private globalClickEventUnsubscriber;
    private clickEventUnsubscriber;
    private globalClickTimeout;
    onKeydownClose(eventName: string): void;
    onKeydownFocusNext($event: Event, direction: 'next' | 'previous'): void;
    constructor(element: ElementRef, renderer: Renderer2);
    ngOnInit(): void;
    ngOnDestroy(): void;
    toggle(toggle?: boolean, focus?: boolean): void;
    private handleGlobalClickEvent;
    private _subscribeToClickEvents;
    private _unsubscribeFromClickEvents;
    private clearGlobalClickTimeout;
    private focusItem;
    private handleDropdownOpenEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglDropdown, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NglDropdown, "[nglDropdown]", never, { "handlePageEvents": "handlePageEvents"; "isOpen": "open"; }, { "isOpenChange": "openChange"; }, ["items"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uZC50cyIsInNvdXJjZXMiOlsiZHJvcGRvd24uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSwgUXVlcnlMaXN0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nbERyb3Bkb3duSXRlbSB9IGZyb20gJy4vZHJvcGRvd24taXRlbSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ2xEcm9wZG93biBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBlbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgc2V0IGlzT3Blbihpc09wZW46IGJvb2xlYW4pO1xuICAgIGdldCBpc09wZW4oKTogYm9vbGVhbjtcbiAgICBoYW5kbGVQYWdlRXZlbnRzOiBib29sZWFuO1xuICAgIGl0ZW1zOiBRdWVyeUxpc3Q8TmdsRHJvcGRvd25JdGVtPjtcbiAgICBpc09wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICB0cmlnZ2VyRm9jdXNFdmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByaXZhdGUgX2lzT3BlbjtcbiAgICBwcml2YXRlIG9wZW5FdmVudFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGdsb2JhbENsaWNrRXZlbnRVbnN1YnNjcmliZXI7XG4gICAgcHJpdmF0ZSBjbGlja0V2ZW50VW5zdWJzY3JpYmVyO1xuICAgIHByaXZhdGUgZ2xvYmFsQ2xpY2tUaW1lb3V0O1xuICAgIG9uS2V5ZG93bkNsb3NlKGV2ZW50TmFtZTogc3RyaW5nKTogdm9pZDtcbiAgICBvbktleWRvd25Gb2N1c05leHQoJGV2ZW50OiBFdmVudCwgZGlyZWN0aW9uOiAnbmV4dCcgfCAncHJldmlvdXMnKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgdG9nZ2xlKHRvZ2dsZT86IGJvb2xlYW4sIGZvY3VzPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJpdmF0ZSBoYW5kbGVHbG9iYWxDbGlja0V2ZW50O1xuICAgIHByaXZhdGUgX3N1YnNjcmliZVRvQ2xpY2tFdmVudHM7XG4gICAgcHJpdmF0ZSBfdW5zdWJzY3JpYmVGcm9tQ2xpY2tFdmVudHM7XG4gICAgcHJpdmF0ZSBjbGVhckdsb2JhbENsaWNrVGltZW91dDtcbiAgICBwcml2YXRlIGZvY3VzSXRlbTtcbiAgICBwcml2YXRlIGhhbmRsZURyb3Bkb3duT3BlbkV2ZW50O1xufVxuIl19