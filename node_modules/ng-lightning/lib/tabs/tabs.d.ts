import { QueryList, EventEmitter, ElementRef, Renderer2, AfterContentInit } from '@angular/core';
import { NglTab } from './tab';
import * as ɵngcc0 from '@angular/core';
export declare class NglTabs implements AfterContentInit {
    private element;
    private renderer;
    set variant(variant: 'default' | 'scoped');
    get variant(): 'default' | 'scoped';
    tabs: QueryList<NglTab>;
    activeTab: NglTab;
    selected: string | number | NglTab;
    set setSelected(selected: string | number | NglTab);
    selectedChange: EventEmitter<NglTab>;
    /**
     * Whether every tab's content is instantiated when visible, and destroyed when hidden.
     */
    lazy: boolean;
    private _variant;
    constructor(element: ElementRef, renderer: Renderer2);
    ngAfterContentInit(): void;
    select(tab: NglTab): void;
    move(evt: Event, moves: number): void;
    tabClass(tab: NglTab): {
        [x: string]: boolean;
    };
    trackByTab(index: any, tab: NglTab): string;
    private activate;
    private findTab;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglTabs, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglTabs, "ngl-tabset", never, { "lazy": "lazy"; "variant": "variant"; "setSelected": "selected"; }, { "selectedChange": "selectedChange"; }, ["tabs"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5kLnRzIiwic291cmNlcyI6WyJ0YWJzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWVyeUxpc3QsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlckNvbnRlbnRJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2xUYWIgfSBmcm9tICcuL3RhYic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ2xUYWJzIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgc2V0IHZhcmlhbnQodmFyaWFudDogJ2RlZmF1bHQnIHwgJ3Njb3BlZCcpO1xuICAgIGdldCB2YXJpYW50KCk6ICdkZWZhdWx0JyB8ICdzY29wZWQnO1xuICAgIHRhYnM6IFF1ZXJ5TGlzdDxOZ2xUYWI+O1xuICAgIGFjdGl2ZVRhYjogTmdsVGFiO1xuICAgIHNlbGVjdGVkOiBzdHJpbmcgfCBudW1iZXIgfCBOZ2xUYWI7XG4gICAgc2V0IHNldFNlbGVjdGVkKHNlbGVjdGVkOiBzdHJpbmcgfCBudW1iZXIgfCBOZ2xUYWIpO1xuICAgIHNlbGVjdGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TmdsVGFiPjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGV2ZXJ5IHRhYidzIGNvbnRlbnQgaXMgaW5zdGFudGlhdGVkIHdoZW4gdmlzaWJsZSwgYW5kIGRlc3Ryb3llZCB3aGVuIGhpZGRlbi5cbiAgICAgKi9cbiAgICBsYXp5OiBib29sZWFuO1xuICAgIHByaXZhdGUgX3ZhcmlhbnQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgc2VsZWN0KHRhYjogTmdsVGFiKTogdm9pZDtcbiAgICBtb3ZlKGV2dDogRXZlbnQsIG1vdmVzOiBudW1iZXIpOiB2b2lkO1xuICAgIHRhYkNsYXNzKHRhYjogTmdsVGFiKToge1xuICAgICAgICBbeDogc3RyaW5nXTogYm9vbGVhbjtcbiAgICB9O1xuICAgIHRyYWNrQnlUYWIoaW5kZXg6IGFueSwgdGFiOiBOZ2xUYWIpOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBhY3RpdmF0ZTtcbiAgICBwcml2YXRlIGZpbmRUYWI7XG59XG4iXX0=