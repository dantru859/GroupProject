import { EventEmitter, OnChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export interface NglPage {
    number: number | string;
    disabled?: boolean;
}
export declare class NglPagination implements OnChanges {
    pages: NglPage[];
    current: number;
    set page(page: number | string);
    pageChange: EventEmitter<number>;
    total: number | string;
    perPage: number | string;
    limit: number | string;
    boundaryNumbers: number;
    firstText: string;
    previousText: string;
    nextText: string;
    lastText: string;
    boundaryLinks: boolean;
    totalPages: number;
    hasPrevious(): boolean;
    hasNext(): boolean;
    goto(page: number): void;
    ngOnChanges(): void;
    pageTrackBy(index: number, page: NglPage): string | number;
    get start(): number;
    get end(): number;
    private getPageArray;
    private getPage;
    private getGapPage;
    /**
     * Calculate first and last visible page numbers
     */
    private limits;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglPagination, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglPagination, "ngl-pagination", ["nglPagination"], { "perPage": "perPage"; "limit": "limit"; "boundaryNumbers": "boundaryNumbers"; "firstText": "firstText"; "previousText": "previousText"; "nextText": "nextText"; "lastText": "lastText"; "boundaryLinks": "boundaryLinks"; "page": "page"; "total": "total"; }, { "pageChange": "pageChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5kLnRzIiwic291cmNlcyI6WyJwYWdpbmF0aW9uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgaW50ZXJmYWNlIE5nbFBhZ2Uge1xuICAgIG51bWJlcjogbnVtYmVyIHwgc3RyaW5nO1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nbFBhZ2luYXRpb24gaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHBhZ2VzOiBOZ2xQYWdlW107XG4gICAgY3VycmVudDogbnVtYmVyO1xuICAgIHNldCBwYWdlKHBhZ2U6IG51bWJlciB8IHN0cmluZyk7XG4gICAgcGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgdG90YWw6IG51bWJlciB8IHN0cmluZztcbiAgICBwZXJQYWdlOiBudW1iZXIgfCBzdHJpbmc7XG4gICAgbGltaXQ6IG51bWJlciB8IHN0cmluZztcbiAgICBib3VuZGFyeU51bWJlcnM6IG51bWJlcjtcbiAgICBmaXJzdFRleHQ6IHN0cmluZztcbiAgICBwcmV2aW91c1RleHQ6IHN0cmluZztcbiAgICBuZXh0VGV4dDogc3RyaW5nO1xuICAgIGxhc3RUZXh0OiBzdHJpbmc7XG4gICAgYm91bmRhcnlMaW5rczogYm9vbGVhbjtcbiAgICB0b3RhbFBhZ2VzOiBudW1iZXI7XG4gICAgaGFzUHJldmlvdXMoKTogYm9vbGVhbjtcbiAgICBoYXNOZXh0KCk6IGJvb2xlYW47XG4gICAgZ290byhwYWdlOiBudW1iZXIpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgcGFnZVRyYWNrQnkoaW5kZXg6IG51bWJlciwgcGFnZTogTmdsUGFnZSk6IHN0cmluZyB8IG51bWJlcjtcbiAgICBnZXQgc3RhcnQoKTogbnVtYmVyO1xuICAgIGdldCBlbmQoKTogbnVtYmVyO1xuICAgIHByaXZhdGUgZ2V0UGFnZUFycmF5O1xuICAgIHByaXZhdGUgZ2V0UGFnZTtcbiAgICBwcml2YXRlIGdldEdhcFBhZ2U7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIGZpcnN0IGFuZCBsYXN0IHZpc2libGUgcGFnZSBudW1iZXJzXG4gICAgICovXG4gICAgcHJpdmF0ZSBsaW1pdHM7XG59XG4iXX0=