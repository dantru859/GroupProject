import { EventEmitter, OnInit, OnDestroy, NgZone } from '@angular/core';
import { CdkConnectedOverlay, ScrollDispatcher } from '@angular/cdk/overlay';
import * as ɵngcc0 from '@angular/core';
export declare class NglOverlaynglOverlayScrolledOutsideViewDirective implements OnInit, OnDestroy {
    private cdkOverlay;
    private ngZone;
    private scrollDispatcher;
    overlayOutside: EventEmitter<void>;
    private subscription;
    constructor(cdkOverlay: CdkConnectedOverlay, ngZone: NgZone, scrollDispatcher: ScrollDispatcher);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglOverlaynglOverlayScrolledOutsideViewDirective, [{ self: true; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NglOverlaynglOverlayScrolledOutsideViewDirective, "[nglOverlayScrolledOutsideView]", never, {}, { "overlayOutside": "nglOverlayScrolledOutsideView"; }, never>;
}
/**
 * Gets whether an element is scrolled outside of view by its parent scrolling container.
 * @param element Dimensions of the element (from getBoundingClientRect)
 * @param container Dimensions of element's scrolling container (from getBoundingClientRect)
 * @returns Whether the element is scrolled out of view
 */
export declare function isElementOutside(element: ClientRect, container: ClientRect): boolean;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1vdXRzaWRlLmQudHMiLCJzb3VyY2VzIjpbIm92ZXJsYXktb3V0c2lkZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkluaXQsIE9uRGVzdHJveSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZGtDb25uZWN0ZWRPdmVybGF5LCBTY3JvbGxEaXNwYXRjaGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsT3ZlcmxheW5nbE92ZXJsYXlTY3JvbGxlZE91dHNpZGVWaWV3RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RrT3ZlcmxheTtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIHNjcm9sbERpc3BhdGNoZXI7XG4gICAgb3ZlcmxheU91dHNpZGU6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihjZGtPdmVybGF5OiBDZGtDb25uZWN0ZWRPdmVybGF5LCBuZ1pvbmU6IE5nWm9uZSwgc2Nyb2xsRGlzcGF0Y2hlcjogU2Nyb2xsRGlzcGF0Y2hlcik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuLyoqXG4gKiBHZXRzIHdoZXRoZXIgYW4gZWxlbWVudCBpcyBzY3JvbGxlZCBvdXRzaWRlIG9mIHZpZXcgYnkgaXRzIHBhcmVudCBzY3JvbGxpbmcgY29udGFpbmVyLlxuICogQHBhcmFtIGVsZW1lbnQgRGltZW5zaW9ucyBvZiB0aGUgZWxlbWVudCAoZnJvbSBnZXRCb3VuZGluZ0NsaWVudFJlY3QpXG4gKiBAcGFyYW0gY29udGFpbmVyIERpbWVuc2lvbnMgb2YgZWxlbWVudCdzIHNjcm9sbGluZyBjb250YWluZXIgKGZyb20gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KVxuICogQHJldHVybnMgV2hldGhlciB0aGUgZWxlbWVudCBpcyBzY3JvbGxlZCBvdXQgb2Ygdmlld1xuICovXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBpc0VsZW1lbnRPdXRzaWRlKGVsZW1lbnQ6IENsaWVudFJlY3QsIGNvbnRhaW5lcjogQ2xpZW50UmVjdCk6IGJvb2xlYW47XG4iXX0=