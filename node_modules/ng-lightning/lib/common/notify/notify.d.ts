import { EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, OnDestroy } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class NglCommonNotify implements OnDestroy {
    private element;
    private renderer;
    private cd;
    /**
     * The type of alert.
     */
    set variant(variant: 'error' | 'info' | 'success' | 'warning');
    get variant(): 'error' | 'info' | 'success' | 'warning';
    iconName: string;
    assistiveText: any;
    closeButtonAssistiveText: string;
    /**
     * The number of milliseconds after which, the close event will be triggered with an emitted reason of `'timeout'`.
     */
    set duration(duration: number);
    /**
     * Triggered by close button or duration timeout.
     */
    closeEventEmitter: EventEmitter<string>;
    set dismissible(dismissible: boolean);
    get dismissible(): boolean;
    private _dismissible;
    private currentTimeout;
    private _variant;
    constructor(element: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef, type: 'alert' | 'toast');
    close(reason?: string, $event?: Event): void;
    ngOnDestroy(): void;
    private clearTimeout;
    private toggleThemeClass;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglCommonNotify, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NglCommonNotify, never, never, { "closeButtonAssistiveText": "closeButtonAssistiveText"; "variant": "variant"; "duration": "duration"; "iconName": "iconName"; "assistiveText": "assistiveText"; }, { "closeEventEmitter": "close"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LmQudHMiLCJzb3VyY2VzIjpbIm5vdGlmeS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsQ29tbW9uTm90aWZ5IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGNkO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGFsZXJ0LlxuICAgICAqL1xuICAgIHNldCB2YXJpYW50KHZhcmlhbnQ6ICdlcnJvcicgfCAnaW5mbycgfCAnc3VjY2VzcycgfCAnd2FybmluZycpO1xuICAgIGdldCB2YXJpYW50KCk6ICdlcnJvcicgfCAnaW5mbycgfCAnc3VjY2VzcycgfCAnd2FybmluZyc7XG4gICAgaWNvbk5hbWU6IHN0cmluZztcbiAgICBhc3Npc3RpdmVUZXh0OiBhbnk7XG4gICAgY2xvc2VCdXR0b25Bc3Npc3RpdmVUZXh0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYWZ0ZXIgd2hpY2gsIHRoZSBjbG9zZSBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCB3aXRoIGFuIGVtaXR0ZWQgcmVhc29uIG9mIGAndGltZW91dCdgLlxuICAgICAqL1xuICAgIHNldCBkdXJhdGlvbihkdXJhdGlvbjogbnVtYmVyKTtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgYnkgY2xvc2UgYnV0dG9uIG9yIGR1cmF0aW9uIHRpbWVvdXQuXG4gICAgICovXG4gICAgY2xvc2VFdmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIHNldCBkaXNtaXNzaWJsZShkaXNtaXNzaWJsZTogYm9vbGVhbik7XG4gICAgZ2V0IGRpc21pc3NpYmxlKCk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfZGlzbWlzc2libGU7XG4gICAgcHJpdmF0ZSBjdXJyZW50VGltZW91dDtcbiAgICBwcml2YXRlIF92YXJpYW50O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgdHlwZTogJ2FsZXJ0JyB8ICd0b2FzdCcpO1xuICAgIGNsb3NlKHJlYXNvbj86IHN0cmluZywgJGV2ZW50PzogRXZlbnQpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjbGVhclRpbWVvdXQ7XG4gICAgcHJpdmF0ZSB0b2dnbGVUaGVtZUNsYXNzO1xufVxuIl19