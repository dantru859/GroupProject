import { EventEmitter, QueryList, NgZone, OnChanges, SimpleChanges } from '@angular/core';
import { NglInternalDate } from './util';
import { NglDay } from './day';
import * as ɵngcc0 from '@angular/core';
interface INglDayCell extends NglInternalDate {
    today: boolean;
    isCurrentMonth: boolean;
    selected?: boolean;
    active?: boolean;
}
export declare class NglDatepickerMonth implements OnChanges {
    private ngZone;
    readonly selected: NglInternalDate;
    readonly year: number;
    readonly month: number;
    readonly day: number;
    readonly firstDayOfWeek: number;
    readonly minDate: NglInternalDate;
    readonly maxDate: NglInternalDate;
    readonly dateDisabled: (date: Date) => boolean | null;
    selectDate: EventEmitter<NglInternalDate>;
    days: QueryList<NglDay>;
    weeks: INglDayCell[][];
    constructor(ngZone: NgZone);
    indexTrackBy(index: number): number;
    dateTrackBy(index: number, { year, month, day }: NglInternalDate): string;
    onSelect(date: NglInternalDate): void;
    ngOnChanges(changes: SimpleChanges): void;
    focusActiveDay(): void;
    private renderView;
    private daysInMonth;
    private daysInPreviousMonth;
    private daysInNextMonth;
    private getDayObjects;
    private updateActive;
    private isActive;
    private updateSelected;
    private isSelected;
    private updateDisabled;
    /** Date filter for the month */
    private isDisabled;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglDatepickerMonth, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglDatepickerMonth, "[nglDatepickerMonth]", never, { "dateDisabled": "dateDisabled"; "selected": "selected"; "year": "year"; "month": "month"; "day": "day"; "firstDayOfWeek": "firstDayOfWeek"; "minDate": "minDate"; "maxDate": "maxDate"; }, { "selectDate": "selectDate"; }, never, never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGguZC50cyIsInNvdXJjZXMiOlsibW9udGguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgTmdab25lLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nbEludGVybmFsRGF0ZSB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBOZ2xEYXkgfSBmcm9tICcuL2RheSc7XG5pbnRlcmZhY2UgSU5nbERheUNlbGwgZXh0ZW5kcyBOZ2xJbnRlcm5hbERhdGUge1xuICAgIHRvZGF5OiBib29sZWFuO1xuICAgIGlzQ3VycmVudE1vbnRoOiBib29sZWFuO1xuICAgIHNlbGVjdGVkPzogYm9vbGVhbjtcbiAgICBhY3RpdmU/OiBib29sZWFuO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsRGF0ZXBpY2tlck1vbnRoIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICByZWFkb25seSBzZWxlY3RlZDogTmdsSW50ZXJuYWxEYXRlO1xuICAgIHJlYWRvbmx5IHllYXI6IG51bWJlcjtcbiAgICByZWFkb25seSBtb250aDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGRheTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGZpcnN0RGF5T2ZXZWVrOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgbWluRGF0ZTogTmdsSW50ZXJuYWxEYXRlO1xuICAgIHJlYWRvbmx5IG1heERhdGU6IE5nbEludGVybmFsRGF0ZTtcbiAgICByZWFkb25seSBkYXRlRGlzYWJsZWQ6IChkYXRlOiBEYXRlKSA9PiBib29sZWFuIHwgbnVsbDtcbiAgICBzZWxlY3REYXRlOiBFdmVudEVtaXR0ZXI8TmdsSW50ZXJuYWxEYXRlPjtcbiAgICBkYXlzOiBRdWVyeUxpc3Q8TmdsRGF5PjtcbiAgICB3ZWVrczogSU5nbERheUNlbGxbXVtdO1xuICAgIGNvbnN0cnVjdG9yKG5nWm9uZTogTmdab25lKTtcbiAgICBpbmRleFRyYWNrQnkoaW5kZXg6IG51bWJlcik6IG51bWJlcjtcbiAgICBkYXRlVHJhY2tCeShpbmRleDogbnVtYmVyLCB7IHllYXIsIG1vbnRoLCBkYXkgfTogTmdsSW50ZXJuYWxEYXRlKTogc3RyaW5nO1xuICAgIG9uU2VsZWN0KGRhdGU6IE5nbEludGVybmFsRGF0ZSk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgZm9jdXNBY3RpdmVEYXkoKTogdm9pZDtcbiAgICBwcml2YXRlIHJlbmRlclZpZXc7XG4gICAgcHJpdmF0ZSBkYXlzSW5Nb250aDtcbiAgICBwcml2YXRlIGRheXNJblByZXZpb3VzTW9udGg7XG4gICAgcHJpdmF0ZSBkYXlzSW5OZXh0TW9udGg7XG4gICAgcHJpdmF0ZSBnZXREYXlPYmplY3RzO1xuICAgIHByaXZhdGUgdXBkYXRlQWN0aXZlO1xuICAgIHByaXZhdGUgaXNBY3RpdmU7XG4gICAgcHJpdmF0ZSB1cGRhdGVTZWxlY3RlZDtcbiAgICBwcml2YXRlIGlzU2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVEaXNhYmxlZDtcbiAgICAvKiogRGF0ZSBmaWx0ZXIgZm9yIHRoZSBtb250aCAqL1xuICAgIHByaXZhdGUgaXNEaXNhYmxlZDtcbn1cbmV4cG9ydCB7fTtcbiJdfQ==