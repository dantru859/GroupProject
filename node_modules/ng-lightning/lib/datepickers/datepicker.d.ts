import { EventEmitter, ElementRef, OnInit, OnChanges, AfterViewInit, SimpleChanges } from '@angular/core';
import { NglDatepickerInput } from './input/datepicker-input';
import { NglDatepickerConfig } from './config';
import { NglInternalDate } from './util';
import { NglDatepickerMonth } from './month';
import * as ɵngcc0 from '@angular/core';
export declare class NglDatepicker implements OnInit, OnChanges, AfterViewInit {
    private dtInput;
    private element;
    readonly monthNames: string[];
    readonly dayNamesShort: string[];
    readonly dayNamesLong: string[];
    dateDisabled: (date: Date) => boolean | null;
    _date: NglInternalDate;
    current: NglInternalDate;
    set date(date: Date);
    dateChange: EventEmitter<any>;
    readonly showToday: boolean;
    readonly firstDayOfWeek: number;
    /**
     * Offset of year from current year, that can be the minimum option in the year selection dropdown.
     */
    readonly relativeYearFrom: number;
    /**
     * Offset of year from current year, that can be the maximum option in the year selection dropdown.
     */
    readonly relativeYearTo: number;
    /**
     * The minimum date that can be selected.
     */
    readonly min: Date;
    /**
     * The maximum date that can be selected.
     */
    readonly max: Date;
    /**
     * Label of shortcut to select current date.
     */
    readonly todayLabel: string;
    /**
     * Label for button to go to the previous month.
     */
    readonly previousMonthLabel: string;
    /**
     * Label for button to go to the next month.
     */
    readonly nextMonthLabel: string;
    weeks: NglInternalDate[];
    uid: string;
    monthLabel: string;
    minDate: NglInternalDate;
    maxDate: NglInternalDate;
    monthView: NglDatepickerMonth;
    constructor(dtInput: NglDatepickerInput, defaultConfig: NglDatepickerConfig, locale: string, element: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    moveYear(year: string | number): void;
    moveMonth(diff: number): void;
    keyboardHandler(evt: KeyboardEvent): void;
    select(date: NglInternalDate): void;
    selectToday(): void;
    ngAfterViewInit(): void;
    /** Whether the previous period button is disabled. */
    previousDisabled(): boolean;
    /** Whether the next period button is disabled. */
    nextDisabled(): boolean;
    private focusActiveDay;
    private moveCalendar;
    private setCurrent;
    private render;
    /** Date filter for the month */
    private isDisabledDate;
    private setMinMaxDates;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglDatepicker, [{ optional: true; }, { optional: true; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglDatepicker, "ngl-datepicker", never, { "dateDisabled": "dateDisabled"; "monthNames": "monthNames"; "dayNamesShort": "dayNamesShort"; "dayNamesLong": "dayNamesLong"; "firstDayOfWeek": "firstDayOfWeek"; "showToday": "showToday"; "relativeYearFrom": "relativeYearFrom"; "relativeYearTo": "relativeYearTo"; "todayLabel": "todayLabel"; "previousMonthLabel": "previousMonthLabel"; "nextMonthLabel": "nextMonthLabel"; "date": "date"; "min": "min"; "max": "max"; }, { "dateChange": "dateChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5kLnRzIiwic291cmNlcyI6WyJkYXRlcGlja2VyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2xEYXRlcGlja2VySW5wdXQgfSBmcm9tICcuL2lucHV0L2RhdGVwaWNrZXItaW5wdXQnO1xuaW1wb3J0IHsgTmdsRGF0ZXBpY2tlckNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IE5nbEludGVybmFsRGF0ZSB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBOZ2xEYXRlcGlja2VyTW9udGggfSBmcm9tICcuL21vbnRoJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nbERhdGVwaWNrZXIgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBkdElucHV0O1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICByZWFkb25seSBtb250aE5hbWVzOiBzdHJpbmdbXTtcbiAgICByZWFkb25seSBkYXlOYW1lc1Nob3J0OiBzdHJpbmdbXTtcbiAgICByZWFkb25seSBkYXlOYW1lc0xvbmc6IHN0cmluZ1tdO1xuICAgIGRhdGVEaXNhYmxlZDogKGRhdGU6IERhdGUpID0+IGJvb2xlYW4gfCBudWxsO1xuICAgIF9kYXRlOiBOZ2xJbnRlcm5hbERhdGU7XG4gICAgY3VycmVudDogTmdsSW50ZXJuYWxEYXRlO1xuICAgIHNldCBkYXRlKGRhdGU6IERhdGUpO1xuICAgIGRhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlYWRvbmx5IHNob3dUb2RheTogYm9vbGVhbjtcbiAgICByZWFkb25seSBmaXJzdERheU9mV2VlazogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIE9mZnNldCBvZiB5ZWFyIGZyb20gY3VycmVudCB5ZWFyLCB0aGF0IGNhbiBiZSB0aGUgbWluaW11bSBvcHRpb24gaW4gdGhlIHllYXIgc2VsZWN0aW9uIGRyb3Bkb3duLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlbGF0aXZlWWVhckZyb206IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBPZmZzZXQgb2YgeWVhciBmcm9tIGN1cnJlbnQgeWVhciwgdGhhdCBjYW4gYmUgdGhlIG1heGltdW0gb3B0aW9uIGluIHRoZSB5ZWFyIHNlbGVjdGlvbiBkcm9wZG93bi5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWxhdGl2ZVllYXJUbzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIGRhdGUgdGhhdCBjYW4gYmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWluOiBEYXRlO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIGRhdGUgdGhhdCBjYW4gYmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWF4OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIExhYmVsIG9mIHNob3J0Y3V0IHRvIHNlbGVjdCBjdXJyZW50IGRhdGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdG9kYXlMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIExhYmVsIGZvciBidXR0b24gdG8gZ28gdG8gdGhlIHByZXZpb3VzIG1vbnRoLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByZXZpb3VzTW9udGhMYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIExhYmVsIGZvciBidXR0b24gdG8gZ28gdG8gdGhlIG5leHQgbW9udGguXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV4dE1vbnRoTGFiZWw6IHN0cmluZztcbiAgICB3ZWVrczogTmdsSW50ZXJuYWxEYXRlW107XG4gICAgdWlkOiBzdHJpbmc7XG4gICAgbW9udGhMYWJlbDogc3RyaW5nO1xuICAgIG1pbkRhdGU6IE5nbEludGVybmFsRGF0ZTtcbiAgICBtYXhEYXRlOiBOZ2xJbnRlcm5hbERhdGU7XG4gICAgbW9udGhWaWV3OiBOZ2xEYXRlcGlja2VyTW9udGg7XG4gICAgY29uc3RydWN0b3IoZHRJbnB1dDogTmdsRGF0ZXBpY2tlcklucHV0LCBkZWZhdWx0Q29uZmlnOiBOZ2xEYXRlcGlja2VyQ29uZmlnLCBsb2NhbGU6IHN0cmluZywgZWxlbWVudDogRWxlbWVudFJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBtb3ZlWWVhcih5ZWFyOiBzdHJpbmcgfCBudW1iZXIpOiB2b2lkO1xuICAgIG1vdmVNb250aChkaWZmOiBudW1iZXIpOiB2b2lkO1xuICAgIGtleWJvYXJkSGFuZGxlcihldnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHNlbGVjdChkYXRlOiBOZ2xJbnRlcm5hbERhdGUpOiB2b2lkO1xuICAgIHNlbGVjdFRvZGF5KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqIFdoZXRoZXIgdGhlIHByZXZpb3VzIHBlcmlvZCBidXR0b24gaXMgZGlzYWJsZWQuICovXG4gICAgcHJldmlvdXNEaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIC8qKiBXaGV0aGVyIHRoZSBuZXh0IHBlcmlvZCBidXR0b24gaXMgZGlzYWJsZWQuICovXG4gICAgbmV4dERpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBmb2N1c0FjdGl2ZURheTtcbiAgICBwcml2YXRlIG1vdmVDYWxlbmRhcjtcbiAgICBwcml2YXRlIHNldEN1cnJlbnQ7XG4gICAgcHJpdmF0ZSByZW5kZXI7XG4gICAgLyoqIERhdGUgZmlsdGVyIGZvciB0aGUgbW9udGggKi9cbiAgICBwcml2YXRlIGlzRGlzYWJsZWREYXRlO1xuICAgIHByaXZhdGUgc2V0TWluTWF4RGF0ZXM7XG59XG4iXX0=