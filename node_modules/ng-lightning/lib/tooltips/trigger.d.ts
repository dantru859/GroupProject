import { ElementRef, TemplateRef, ViewContainerRef, OnDestroy, OnChanges, SimpleChanges, EventEmitter, Renderer2 } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { Placement } from '../util/overlay-position';
import { NglTooltipConfig } from './config';
import * as ɵngcc0 from '@angular/core';
export declare class NglTooltipTrigger implements OnChanges, OnDestroy {
    private element;
    private renderer;
    private viewContainerRef;
    private overlay;
    /**
     * The content as string or the connected template reference to show.
     */
    template: string | TemplateRef<void>;
    /**
     * Position relative to host element.
     */
    set placement(placement: Placement);
    get placement(): Placement;
    /**
     * Delay in milliseconds until it opens/closes.
     */
    set delay(_delay: any | any[]);
    /**
     * Whether the floating tooltip is visible.
     */
    set nglOpen(open: boolean);
    get nglOpen(): boolean;
    /**
     * Open/close without two-way binding input.
     */
    openAuto: boolean;
    /**
     * Gives the possibility to interact with the content of the popover.
     */
    interactive: boolean;
    /**
     * Extra class(es) you want to apply to tooltip host element.
     */
    tooltipClass: any;
    /**
     * Emit an event when actual tooltip is shown or hidden.
     */
    nglTooltipOpenChange: EventEmitter<boolean>;
    uid: string;
    /** Names of properties that should be proxy to child component. */
    private needProxyProperties;
    private _placement;
    private _open;
    private portal;
    private overlayRef;
    private tooltip;
    private openDelay;
    private closeDelay;
    private toggleTimeout;
    private positionChangesSubscription;
    private overlayListeners;
    private overlayElement;
    private config;
    constructor(defaultConfig: NglTooltipConfig, element: ElementRef, renderer: Renderer2, viewContainerRef: ViewContainerRef, overlay: Overlay);
    ngOnChanges(changes: SimpleChanges): void;
    onMouseOver(): void;
    onMouseOut(): void;
    ngOnDestroy(): void;
    open(delay?: number): void;
    close(delay?: number): void;
    toggle(): void;
    private handle;
    private emitOpen;
    private create;
    /** Detaches the currently-attached tooltip. */
    private detach;
    /** Create the overlay config and position strategy */
    private createOverlay;
    /** Updates the position of the current tooltip. */
    private updatePosition;
    private updateTooltip;
    /**
     * Set inputs of child components when this component's inputs change.
     */
    private updateProxies;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglTooltipTrigger, [{ optional: true; }, null, null, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NglTooltipTrigger, "[nglTooltip]", ["nglTooltip"], { "openAuto": "nglTooltipOpenAuto"; "interactive": "nglTooltipInteractive"; "delay": "nglTooltipDelay"; "placement": "nglTooltipPlacement"; "nglOpen": "nglTooltipOpen"; "template": "nglTooltip"; "tooltipClass": "nglTooltipClass"; }, { "nglTooltipOpenChange": "nglTooltipOpenChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpZ2dlci5kLnRzIiwic291cmNlcyI6WyJ0cmlnZ2VyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFBsYWNlbWVudCB9IGZyb20gJy4uL3V0aWwvb3ZlcmxheS1wb3NpdGlvbic7XG5pbXBvcnQgeyBOZ2xUb29sdGlwQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsVG9vbHRpcFRyaWdnZXIgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIHByaXZhdGUgb3ZlcmxheTtcbiAgICAvKipcbiAgICAgKiBUaGUgY29udGVudCBhcyBzdHJpbmcgb3IgdGhlIGNvbm5lY3RlZCB0ZW1wbGF0ZSByZWZlcmVuY2UgdG8gc2hvdy5cbiAgICAgKi9cbiAgICB0ZW1wbGF0ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gcmVsYXRpdmUgdG8gaG9zdCBlbGVtZW50LlxuICAgICAqL1xuICAgIHNldCBwbGFjZW1lbnQocGxhY2VtZW50OiBQbGFjZW1lbnQpO1xuICAgIGdldCBwbGFjZW1lbnQoKTogUGxhY2VtZW50O1xuICAgIC8qKlxuICAgICAqIERlbGF5IGluIG1pbGxpc2Vjb25kcyB1bnRpbCBpdCBvcGVucy9jbG9zZXMuXG4gICAgICovXG4gICAgc2V0IGRlbGF5KF9kZWxheTogYW55IHwgYW55W10pO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGZsb2F0aW5nIHRvb2x0aXAgaXMgdmlzaWJsZS5cbiAgICAgKi9cbiAgICBzZXQgbmdsT3BlbihvcGVuOiBib29sZWFuKTtcbiAgICBnZXQgbmdsT3BlbigpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9wZW4vY2xvc2Ugd2l0aG91dCB0d28td2F5IGJpbmRpbmcgaW5wdXQuXG4gICAgICovXG4gICAgb3BlbkF1dG86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogR2l2ZXMgdGhlIHBvc3NpYmlsaXR5IHRvIGludGVyYWN0IHdpdGggdGhlIGNvbnRlbnQgb2YgdGhlIHBvcG92ZXIuXG4gICAgICovXG4gICAgaW50ZXJhY3RpdmU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRXh0cmEgY2xhc3MoZXMpIHlvdSB3YW50IHRvIGFwcGx5IHRvIHRvb2x0aXAgaG9zdCBlbGVtZW50LlxuICAgICAqL1xuICAgIHRvb2x0aXBDbGFzczogYW55O1xuICAgIC8qKlxuICAgICAqIEVtaXQgYW4gZXZlbnQgd2hlbiBhY3R1YWwgdG9vbHRpcCBpcyBzaG93biBvciBoaWRkZW4uXG4gICAgICovXG4gICAgbmdsVG9vbHRpcE9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICB1aWQ6IHN0cmluZztcbiAgICAvKiogTmFtZXMgb2YgcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSBwcm94eSB0byBjaGlsZCBjb21wb25lbnQuICovXG4gICAgcHJpdmF0ZSBuZWVkUHJveHlQcm9wZXJ0aWVzO1xuICAgIHByaXZhdGUgX3BsYWNlbWVudDtcbiAgICBwcml2YXRlIF9vcGVuO1xuICAgIHByaXZhdGUgcG9ydGFsO1xuICAgIHByaXZhdGUgb3ZlcmxheVJlZjtcbiAgICBwcml2YXRlIHRvb2x0aXA7XG4gICAgcHJpdmF0ZSBvcGVuRGVsYXk7XG4gICAgcHJpdmF0ZSBjbG9zZURlbGF5O1xuICAgIHByaXZhdGUgdG9nZ2xlVGltZW91dDtcbiAgICBwcml2YXRlIHBvc2l0aW9uQ2hhbmdlc1N1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIG92ZXJsYXlMaXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBvdmVybGF5RWxlbWVudDtcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICBjb25zdHJ1Y3RvcihkZWZhdWx0Q29uZmlnOiBOZ2xUb29sdGlwQ29uZmlnLCBlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBvdmVybGF5OiBPdmVybGF5KTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBvbk1vdXNlT3ZlcigpOiB2b2lkO1xuICAgIG9uTW91c2VPdXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG9wZW4oZGVsYXk/OiBudW1iZXIpOiB2b2lkO1xuICAgIGNsb3NlKGRlbGF5PzogbnVtYmVyKTogdm9pZDtcbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICBwcml2YXRlIGhhbmRsZTtcbiAgICBwcml2YXRlIGVtaXRPcGVuO1xuICAgIHByaXZhdGUgY3JlYXRlO1xuICAgIC8qKiBEZXRhY2hlcyB0aGUgY3VycmVudGx5LWF0dGFjaGVkIHRvb2x0aXAuICovXG4gICAgcHJpdmF0ZSBkZXRhY2g7XG4gICAgLyoqIENyZWF0ZSB0aGUgb3ZlcmxheSBjb25maWcgYW5kIHBvc2l0aW9uIHN0cmF0ZWd5ICovXG4gICAgcHJpdmF0ZSBjcmVhdGVPdmVybGF5O1xuICAgIC8qKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCB0b29sdGlwLiAqL1xuICAgIHByaXZhdGUgdXBkYXRlUG9zaXRpb247XG4gICAgcHJpdmF0ZSB1cGRhdGVUb29sdGlwO1xuICAgIC8qKlxuICAgICAqIFNldCBpbnB1dHMgb2YgY2hpbGQgY29tcG9uZW50cyB3aGVuIHRoaXMgY29tcG9uZW50J3MgaW5wdXRzIGNoYW5nZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZVByb3hpZXM7XG59XG4iXX0=