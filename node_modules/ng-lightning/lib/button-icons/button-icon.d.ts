import { ElementRef, Renderer2, OnInit, OnChanges } from '@angular/core';
import { HostService } from '../common/host/host.service';
import * as ɵngcc0 from '@angular/core';
export declare class NglButtonIcon implements OnInit, OnChanges {
    private el;
    private hostService;
    /**
     * LDS name of the icon.
     * Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.
     * Only utility icons can be used in this component.
     */
    iconName: string;
    /**
     * Fallback value for `alternativeText`.
     */
    title: string;
    /**
     * The alternative text used to describe the icon.
     * This text should describe what happens, not what the icon looks like.
     */
    alternativeText: any;
    /**
     * The variant changes the appearance of the button
     */
    variant: 'bare' | 'container' | 'brand' | 'border' | 'border-filled' | 'inverse' | 'border-inverse';
    /**
     *  For non-bare variants, the size applies to the button, otherwise it applies to the icon itself
     */
    size: string;
    /**
     * CSS classes that are applied to the SVG.
     */
    svgClass: string | string[] | Set<string> | {
        [klass: string]: any;
    };
    get altText(): any;
    constructor(el: ElementRef, hostService: HostService, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(): void;
    iconClass(): {
        [klass: string]: any;
    };
    private setHostClass;
    private hasVariant;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglButtonIcon, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglButtonIcon, "[nglButtonIcon]", never, { "variant": "variant"; "iconName": "iconName"; "title": "title"; "alternativeText": "alternativeText"; "size": "size"; "svgClass": "svgClass"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWljb24uZC50cyIsInNvdXJjZXMiOlsiYnV0dG9uLWljb24uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBPbkluaXQsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdFNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vaG9zdC9ob3N0LnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsQnV0dG9uSWNvbiBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgaG9zdFNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogTERTIG5hbWUgb2YgdGhlIGljb24uXG4gICAgICogTmFtZXMgYXJlIHdyaXR0ZW4gaW4gdGhlIGZvcm1hdCAndXRpbGl0eTpkb3duJyB3aGVyZSAndXRpbGl0eScgaXMgdGhlIGNhdGVnb3J5LCBhbmQgJ2Rvd24nIGlzIHRoZSBzcGVjaWZpYyBpY29uIHRvIGJlIGRpc3BsYXllZC5cbiAgICAgKiBPbmx5IHV0aWxpdHkgaWNvbnMgY2FuIGJlIHVzZWQgaW4gdGhpcyBjb21wb25lbnQuXG4gICAgICovXG4gICAgaWNvbk5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGYWxsYmFjayB2YWx1ZSBmb3IgYGFsdGVybmF0aXZlVGV4dGAuXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgYWx0ZXJuYXRpdmUgdGV4dCB1c2VkIHRvIGRlc2NyaWJlIHRoZSBpY29uLlxuICAgICAqIFRoaXMgdGV4dCBzaG91bGQgZGVzY3JpYmUgd2hhdCBoYXBwZW5zLCBub3Qgd2hhdCB0aGUgaWNvbiBsb29rcyBsaWtlLlxuICAgICAqL1xuICAgIGFsdGVybmF0aXZlVGV4dDogYW55O1xuICAgIC8qKlxuICAgICAqIFRoZSB2YXJpYW50IGNoYW5nZXMgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGJ1dHRvblxuICAgICAqL1xuICAgIHZhcmlhbnQ6ICdiYXJlJyB8ICdjb250YWluZXInIHwgJ2JyYW5kJyB8ICdib3JkZXInIHwgJ2JvcmRlci1maWxsZWQnIHwgJ2ludmVyc2UnIHwgJ2JvcmRlci1pbnZlcnNlJztcbiAgICAvKipcbiAgICAgKiAgRm9yIG5vbi1iYXJlIHZhcmlhbnRzLCB0aGUgc2l6ZSBhcHBsaWVzIHRvIHRoZSBidXR0b24sIG90aGVyd2lzZSBpdCBhcHBsaWVzIHRvIHRoZSBpY29uIGl0c2VsZlxuICAgICAqL1xuICAgIHNpemU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDU1MgY2xhc3NlcyB0aGF0IGFyZSBhcHBsaWVkIHRvIHRoZSBTVkcuXG4gICAgICovXG4gICAgc3ZnQ2xhc3M6IHN0cmluZyB8IHN0cmluZ1tdIHwgU2V0PHN0cmluZz4gfCB7XG4gICAgICAgIFtrbGFzczogc3RyaW5nXTogYW55O1xuICAgIH07XG4gICAgZ2V0IGFsdFRleHQoKTogYW55O1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBob3N0U2VydmljZTogSG9zdFNlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBpY29uQ2xhc3MoKToge1xuICAgICAgICBba2xhc3M6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIHByaXZhdGUgc2V0SG9zdENsYXNzO1xuICAgIHByaXZhdGUgaGFzVmFyaWFudDtcbn1cbiJdfQ==