import { ElementRef, Renderer2, OnInit, OnChanges, EventEmitter } from '@angular/core';
import { HostService } from '../common/host/host.service';
import * as ɵngcc0 from '@angular/core';
export declare class NglButtonIconStateful implements OnInit, OnChanges {
    private el;
    private hostService;
    /**
     * Specifies whether button is in selected state or not.
     */
    selected: boolean;
    selectedChange: EventEmitter<boolean>;
    /**
     * LDS name of the icon.
     * Names are written in the format 'utility:down' where 'utility' is the category, and 'down' is the specific icon to be displayed.
     * Only utility icons can be used in this component.
     */
    iconName: string;
    /**
     * Fallback value for `alternativeText`.
     */
    title: string;
    /**
     * The alternative text used to describe the icon.
     * This text should describe what happens, not what the icon looks like.
     */
    alternativeText: any;
    /**
     * The variant changes the appearance of the button.
     */
    variant: 'border' | 'border-filled' | 'border-inverse';
    /**
     *  The size of the button.
     */
    size: 'xx-small' | 'x-small' | 'small' | null;
    get altText(): any;
    constructor(el: ElementRef, hostService: HostService, renderer: Renderer2);
    onclick(): void;
    ngOnInit(): void;
    ngOnChanges(): void;
    private setHostClass;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglButtonIconStateful, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglButtonIconStateful, "[nglButtonIconStateful]", never, { "selected": "selected"; "variant": "variant"; "size": "size"; "iconName": "iconName"; "title": "title"; "alternativeText": "alternativeText"; }, { "selectedChange": "selectedChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWljb24tc3RhdGVmdWwuZC50cyIsInNvdXJjZXMiOlsiYnV0dG9uLWljb24tc3RhdGVmdWwuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgT25Jbml0LCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSG9zdFNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vaG9zdC9ob3N0LnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsQnV0dG9uSWNvblN0YXRlZnVsIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSBob3N0U2VydmljZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBidXR0b24gaXMgaW4gc2VsZWN0ZWQgc3RhdGUgb3Igbm90LlxuICAgICAqL1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgIHNlbGVjdGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogTERTIG5hbWUgb2YgdGhlIGljb24uXG4gICAgICogTmFtZXMgYXJlIHdyaXR0ZW4gaW4gdGhlIGZvcm1hdCAndXRpbGl0eTpkb3duJyB3aGVyZSAndXRpbGl0eScgaXMgdGhlIGNhdGVnb3J5LCBhbmQgJ2Rvd24nIGlzIHRoZSBzcGVjaWZpYyBpY29uIHRvIGJlIGRpc3BsYXllZC5cbiAgICAgKiBPbmx5IHV0aWxpdHkgaWNvbnMgY2FuIGJlIHVzZWQgaW4gdGhpcyBjb21wb25lbnQuXG4gICAgICovXG4gICAgaWNvbk5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGYWxsYmFjayB2YWx1ZSBmb3IgYGFsdGVybmF0aXZlVGV4dGAuXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgYWx0ZXJuYXRpdmUgdGV4dCB1c2VkIHRvIGRlc2NyaWJlIHRoZSBpY29uLlxuICAgICAqIFRoaXMgdGV4dCBzaG91bGQgZGVzY3JpYmUgd2hhdCBoYXBwZW5zLCBub3Qgd2hhdCB0aGUgaWNvbiBsb29rcyBsaWtlLlxuICAgICAqL1xuICAgIGFsdGVybmF0aXZlVGV4dDogYW55O1xuICAgIC8qKlxuICAgICAqIFRoZSB2YXJpYW50IGNoYW5nZXMgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIGJ1dHRvbi5cbiAgICAgKi9cbiAgICB2YXJpYW50OiAnYm9yZGVyJyB8ICdib3JkZXItZmlsbGVkJyB8ICdib3JkZXItaW52ZXJzZSc7XG4gICAgLyoqXG4gICAgICogIFRoZSBzaXplIG9mIHRoZSBidXR0b24uXG4gICAgICovXG4gICAgc2l6ZTogJ3h4LXNtYWxsJyB8ICd4LXNtYWxsJyB8ICdzbWFsbCcgfCBudWxsO1xuICAgIGdldCBhbHRUZXh0KCk6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgaG9zdFNlcnZpY2U6IEhvc3RTZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBvbmNsaWNrKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0SG9zdENsYXNzO1xufVxuIl19