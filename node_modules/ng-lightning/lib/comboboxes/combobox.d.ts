import { EventEmitter, OnChanges, TemplateRef, OnDestroy, QueryList, SimpleChanges, NgZone, ElementRef, ChangeDetectorRef } from '@angular/core';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { ConnectionPositionPair, CdkOverlayOrigin, CdkConnectedOverlay } from '@angular/cdk/overlay';
import { NglComboboxOption } from './combobox-option';
import { NglComboboxInput } from './combobox-input';
import { NglComboboxService } from './combobox.service';
import * as ɵngcc0 from '@angular/core';
export interface NglComboboxOptionItem {
    value: number | string;
    label?: string;
    disabled?: boolean;
}
export declare class NglCombobox implements OnChanges, OnDestroy {
    private ngZone;
    private cd;
    private service;
    readonly variant: 'base' | 'lookup';
    readonly label: string | TemplateRef<any>;
    readonly uid: string;
    readonly open = false;
    openChange: EventEmitter<boolean>;
    readonly selection: any;
    selectionChange: EventEmitter<any>;
    readonly multiple = false;
    readonly visibleLength: 5 | 7 | 10;
    inputEl: NglComboboxInput;
    readonly loading: boolean;
    readonly loadingMore: boolean;
    readonly closeOnSelection = true;
    readonly options: QueryList<NglComboboxOption>;
    set data(data: any[]);
    get data(): any[];
    overlayOrigin: CdkOverlayOrigin;
    cdkOverlay: CdkConnectedOverlay;
    dropdownElementRef: ElementRef;
    overlayWidth: number;
    overlayPositions: ConnectionPositionPair[];
    /** Manages active item in option list based on key events. */
    keyManager: ActiveDescendantKeyManager<NglComboboxOption>;
    private optionChangesSubscription;
    private _data;
    private keyboardSubscription;
    selectionValueFn: (selection: string[]) => string;
    get activeOption(): NglComboboxOption | null;
    get selectedOptions(): NglComboboxOptionItem[];
    get isLookup(): boolean;
    get hasLookupSingleSelection(): boolean;
    constructor(ngZone: NgZone, cd: ChangeDetectorRef, service: NglComboboxService);
    ngOnChanges(changes: SimpleChanges): void;
    onAttach(): void;
    onDetach(): void;
    trackByOption(index: any, option: NglComboboxOption): any;
    dropdownClass(): {
        [x: string]: boolean;
    };
    inputIconRight(): "utility:search" | "utility:down";
    hasNoMatches(): boolean;
    onOptionSelection(option?: NglComboboxOption): void;
    onClearSelection(): void;
    /**
     * Check whether value is currently selected.
     *
     * @param value The value in test, whether is (part of) selection or not
     */
    isSelected(value: any): boolean;
    ngOnDestroy(): void;
    close(): void;
    private detach;
    private calculateDisplayValue;
    private keyboardSubscribe;
    private updateMenuHeight;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglCombobox, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglCombobox, "ngl-combobox", never, { "variant": "variant"; "open": "open"; "multiple": "multiple"; "visibleLength": "visibleLength"; "closeOnSelection": "closeOnSelection"; "selectionValueFn": "selectionValueFn"; "data": "options"; "label": "label"; "selection": "selection"; "loading": "loading"; "loadingMore": "loadingMore"; }, { "openChange": "openChange"; "selectionChange": "selectionChange"; }, ["inputEl"], ["input"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm9ib3guZC50cyIsInNvdXJjZXMiOlsiY29tYm9ib3guZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFRlbXBsYXRlUmVmLCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcywgTmdab25lLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZlRGVzY2VuZGFudEtleU1hbmFnZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBDb25uZWN0aW9uUG9zaXRpb25QYWlyLCBDZGtPdmVybGF5T3JpZ2luLCBDZGtDb25uZWN0ZWRPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgTmdsQ29tYm9ib3hPcHRpb24gfSBmcm9tICcuL2NvbWJvYm94LW9wdGlvbic7XG5pbXBvcnQgeyBOZ2xDb21ib2JveElucHV0IH0gZnJvbSAnLi9jb21ib2JveC1pbnB1dCc7XG5pbXBvcnQgeyBOZ2xDb21ib2JveFNlcnZpY2UgfSBmcm9tICcuL2NvbWJvYm94LnNlcnZpY2UnO1xuZXhwb3J0IGludGVyZmFjZSBOZ2xDb21ib2JveE9wdGlvbkl0ZW0ge1xuICAgIHZhbHVlOiBudW1iZXIgfCBzdHJpbmc7XG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ/OiBib29sZWFuO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsQ29tYm9ib3ggaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBwcml2YXRlIHNlcnZpY2U7XG4gICAgcmVhZG9ubHkgdmFyaWFudDogJ2Jhc2UnIHwgJ2xvb2t1cCc7XG4gICAgcmVhZG9ubHkgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcmVhZG9ubHkgdWlkOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgb3BlbiA9IGZhbHNlO1xuICAgIG9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICByZWFkb25seSBzZWxlY3Rpb246IGFueTtcbiAgICBzZWxlY3Rpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlYWRvbmx5IG11bHRpcGxlID0gZmFsc2U7XG4gICAgcmVhZG9ubHkgdmlzaWJsZUxlbmd0aDogNSB8IDcgfCAxMDtcbiAgICBpbnB1dEVsOiBOZ2xDb21ib2JveElucHV0O1xuICAgIHJlYWRvbmx5IGxvYWRpbmc6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbG9hZGluZ01vcmU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgY2xvc2VPblNlbGVjdGlvbiA9IHRydWU7XG4gICAgcmVhZG9ubHkgb3B0aW9uczogUXVlcnlMaXN0PE5nbENvbWJvYm94T3B0aW9uPjtcbiAgICBzZXQgZGF0YShkYXRhOiBhbnlbXSk7XG4gICAgZ2V0IGRhdGEoKTogYW55W107XG4gICAgb3ZlcmxheU9yaWdpbjogQ2RrT3ZlcmxheU9yaWdpbjtcbiAgICBjZGtPdmVybGF5OiBDZGtDb25uZWN0ZWRPdmVybGF5O1xuICAgIGRyb3Bkb3duRWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBvdmVybGF5V2lkdGg6IG51bWJlcjtcbiAgICBvdmVybGF5UG9zaXRpb25zOiBDb25uZWN0aW9uUG9zaXRpb25QYWlyW107XG4gICAgLyoqIE1hbmFnZXMgYWN0aXZlIGl0ZW0gaW4gb3B0aW9uIGxpc3QgYmFzZWQgb24ga2V5IGV2ZW50cy4gKi9cbiAgICBrZXlNYW5hZ2VyOiBBY3RpdmVEZXNjZW5kYW50S2V5TWFuYWdlcjxOZ2xDb21ib2JveE9wdGlvbj47XG4gICAgcHJpdmF0ZSBvcHRpb25DaGFuZ2VzU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgX2RhdGE7XG4gICAgcHJpdmF0ZSBrZXlib2FyZFN1YnNjcmlwdGlvbjtcbiAgICBzZWxlY3Rpb25WYWx1ZUZuOiAoc2VsZWN0aW9uOiBzdHJpbmdbXSkgPT4gc3RyaW5nO1xuICAgIGdldCBhY3RpdmVPcHRpb24oKTogTmdsQ29tYm9ib3hPcHRpb24gfCBudWxsO1xuICAgIGdldCBzZWxlY3RlZE9wdGlvbnMoKTogTmdsQ29tYm9ib3hPcHRpb25JdGVtW107XG4gICAgZ2V0IGlzTG9va3VwKCk6IGJvb2xlYW47XG4gICAgZ2V0IGhhc0xvb2t1cFNpbmdsZVNlbGVjdGlvbigpOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKG5nWm9uZTogTmdab25lLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHNlcnZpY2U6IE5nbENvbWJvYm94U2VydmljZSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgb25BdHRhY2goKTogdm9pZDtcbiAgICBvbkRldGFjaCgpOiB2b2lkO1xuICAgIHRyYWNrQnlPcHRpb24oaW5kZXg6IGFueSwgb3B0aW9uOiBOZ2xDb21ib2JveE9wdGlvbik6IGFueTtcbiAgICBkcm9wZG93bkNsYXNzKCk6IHtcbiAgICAgICAgW3g6IHN0cmluZ106IGJvb2xlYW47XG4gICAgfTtcbiAgICBpbnB1dEljb25SaWdodCgpOiBcInV0aWxpdHk6c2VhcmNoXCIgfCBcInV0aWxpdHk6ZG93blwiO1xuICAgIGhhc05vTWF0Y2hlcygpOiBib29sZWFuO1xuICAgIG9uT3B0aW9uU2VsZWN0aW9uKG9wdGlvbj86IE5nbENvbWJvYm94T3B0aW9uKTogdm9pZDtcbiAgICBvbkNsZWFyU2VsZWN0aW9uKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB2YWx1ZSBpcyBjdXJyZW50bHkgc2VsZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIGluIHRlc3QsIHdoZXRoZXIgaXMgKHBhcnQgb2YpIHNlbGVjdGlvbiBvciBub3RcbiAgICAgKi9cbiAgICBpc1NlbGVjdGVkKHZhbHVlOiBhbnkpOiBib29sZWFuO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBwcml2YXRlIGRldGFjaDtcbiAgICBwcml2YXRlIGNhbGN1bGF0ZURpc3BsYXlWYWx1ZTtcbiAgICBwcml2YXRlIGtleWJvYXJkU3Vic2NyaWJlO1xuICAgIHByaXZhdGUgdXBkYXRlTWVudUhlaWdodDtcbn1cbiJdfQ==