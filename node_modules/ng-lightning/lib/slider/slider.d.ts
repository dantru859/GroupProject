import { ElementRef, Renderer2, TemplateRef, ChangeDetectorRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class NglSlider implements ControlValueAccessor {
    private element;
    private renderer;
    private cd;
    /**
     * Label that appears above the Slider.
     */
    label: string | TemplateRef<any>;
    /**
     * The minimum value that the slider can have.
     */
    min: number;
    /**
     * The maximum value that the slider can have.
     */
    max: number;
    /**
     * The granularity the slider can step through values.
     */
    step: number;
    /**
     * Whether the slider will be displayed vertically.
     */
    vertical: boolean;
    /**
     * The size of the slider.
     */
    size: 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
    /**
     * Whether the slider is disabled.
     */
    disabled: boolean;
    /**
     * Message to display when there is in an error state.
     */
    error: string | TemplateRef<any>;
    get hasError(): boolean;
    set value(value: number | null);
    get value(): number;
    valueChange: EventEmitter<number>;
    uid: string;
    private _value;
    constructor(element: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);
    onChange: Function | null;
    onTouched: () => void;
    writeValue(value: number): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    setDisabledState(isDisabled: boolean): void;
    onInput(value: any): void;
    sliderClass(): {
        [x: string]: boolean;
        [`slds-slider_vertical`]: boolean;
    };
    private limit;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglSlider, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglSlider, "ngl-slider", never, { "min": "min"; "max": "max"; "step": "step"; "vertical": "vertical"; "value": "value"; "disabled": "disabled"; "label": "label"; "size": "size"; "error": "error"; }, { "valueChange": "valueChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmQudHMiLCJzb3VyY2VzIjpbInNsaWRlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBUZW1wbGF0ZVJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ2xTbGlkZXIgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICAvKipcbiAgICAgKiBMYWJlbCB0aGF0IGFwcGVhcnMgYWJvdmUgdGhlIFNsaWRlci5cbiAgICAgKi9cbiAgICBsYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBUaGUgbWluaW11bSB2YWx1ZSB0aGF0IHRoZSBzbGlkZXIgY2FuIGhhdmUuXG4gICAgICovXG4gICAgbWluOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gdmFsdWUgdGhhdCB0aGUgc2xpZGVyIGNhbiBoYXZlLlxuICAgICAqL1xuICAgIG1heDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBncmFudWxhcml0eSB0aGUgc2xpZGVyIGNhbiBzdGVwIHRocm91Z2ggdmFsdWVzLlxuICAgICAqL1xuICAgIHN0ZXA6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBzbGlkZXIgd2lsbCBiZSBkaXNwbGF5ZWQgdmVydGljYWxseS5cbiAgICAgKi9cbiAgICB2ZXJ0aWNhbDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgc2l6ZSBvZiB0aGUgc2xpZGVyLlxuICAgICAqL1xuICAgIHNpemU6ICd4eC1zbWFsbCcgfCAneC1zbWFsbCcgfCAnc21hbGwnIHwgJ21lZGl1bScgfCAnbGFyZ2UnIHwgJ3gtbGFyZ2UnIHwgJ3h4LWxhcmdlJztcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBzbGlkZXIgaXMgZGlzYWJsZWQuXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogTWVzc2FnZSB0byBkaXNwbGF5IHdoZW4gdGhlcmUgaXMgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAgICovXG4gICAgZXJyb3I6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgZ2V0IGhhc0Vycm9yKCk6IGJvb2xlYW47XG4gICAgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIgfCBudWxsKTtcbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyO1xuICAgIHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICB1aWQ6IHN0cmluZztcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG9uQ2hhbmdlOiBGdW5jdGlvbiB8IG51bGw7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IGFueSk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBvbklucHV0KHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHNsaWRlckNsYXNzKCk6IHtcbiAgICAgICAgW3g6IHN0cmluZ106IGJvb2xlYW47XG4gICAgICAgIFtgc2xkcy1zbGlkZXJfdmVydGljYWxgXTogYm9vbGVhbjtcbiAgICB9O1xuICAgIHByaXZhdGUgbGltaXQ7XG59XG4iXX0=