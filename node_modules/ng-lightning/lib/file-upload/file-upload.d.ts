import { ElementRef, Renderer2, TemplateRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator, AbstractControl, ValidationErrors } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class NglFileUpload implements ControlValueAccessor, Validator, OnChanges {
    private element;
    private renderer;
    /**
     * Label that appears above the upload area.
     */
    label: string | TemplateRef<any>;
    /**
     * File types that can be accepted. See [input accept Attribute](https://www.w3schools.com/tags/att_input_accept.asp).
     */
    accept: string | string[];
    /**
     * Whether file selection is disabled.
     */
    disabled: boolean;
    /**
      * How many files can be selected simultaneously. `0` means unlimited.
      */
    maxFiles: number;
    /**
     * File size limit in bytes. `0` means unlimited.
     */
    maxFilesize: number;
    /**
     * Message to display when there is in an error state.
     */
    error: string | TemplateRef<any>;
    /**
     * Text for button to open file selector.
     */
    uploadButtonLabel: string;
    /**
     * Text to display inside drop zone.
     */
    dropZoneLabel: string;
    uid: string;
    isDragOver: boolean;
    files: File[];
    constructor(element: ElementRef, renderer: Renderer2);
    onChange: Function | null;
    onTouched: () => void;
    validatorChange: () => void;
    writeValue(value: File[]): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    registerOnValidatorChange(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    validate(c: AbstractControl): ValidationErrors | null;
    ngOnChanges(changes: SimpleChanges): void;
    onDropZone(evt: DragEvent): void;
    onInputChange(files: FileList): void;
    private select;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglFileUpload, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglFileUpload, "ngl-file-upload", never, { "accept": "accept"; "disabled": "disabled"; "maxFiles": "maxFiles"; "maxFilesize": "maxFilesize"; "error": "error"; "uploadButtonLabel": "uploadButtonLabel"; "dropZoneLabel": "dropZoneLabel"; "label": "label"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQuZC50cyIsInNvdXJjZXMiOlsiZmlsZS11cGxvYWQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciwgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdsRmlsZVVwbG9hZCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgLyoqXG4gICAgICogTGFiZWwgdGhhdCBhcHBlYXJzIGFib3ZlIHRoZSB1cGxvYWQgYXJlYS5cbiAgICAgKi9cbiAgICBsYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBGaWxlIHR5cGVzIHRoYXQgY2FuIGJlIGFjY2VwdGVkLiBTZWUgW2lucHV0IGFjY2VwdCBBdHRyaWJ1dGVdKGh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vdGFncy9hdHRfaW5wdXRfYWNjZXB0LmFzcCkuXG4gICAgICovXG4gICAgYWNjZXB0OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGZpbGUgc2VsZWN0aW9uIGlzIGRpc2FibGVkLlxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAgKiBIb3cgbWFueSBmaWxlcyBjYW4gYmUgc2VsZWN0ZWQgc2ltdWx0YW5lb3VzbHkuIGAwYCBtZWFucyB1bmxpbWl0ZWQuXG4gICAgICAqL1xuICAgIG1heEZpbGVzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRmlsZSBzaXplIGxpbWl0IGluIGJ5dGVzLiBgMGAgbWVhbnMgdW5saW1pdGVkLlxuICAgICAqL1xuICAgIG1heEZpbGVzaXplOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogTWVzc2FnZSB0byBkaXNwbGF5IHdoZW4gdGhlcmUgaXMgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAgICovXG4gICAgZXJyb3I6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogVGV4dCBmb3IgYnV0dG9uIHRvIG9wZW4gZmlsZSBzZWxlY3Rvci5cbiAgICAgKi9cbiAgICB1cGxvYWRCdXR0b25MYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRleHQgdG8gZGlzcGxheSBpbnNpZGUgZHJvcCB6b25lLlxuICAgICAqL1xuICAgIGRyb3Bab25lTGFiZWw6IHN0cmluZztcbiAgICB1aWQ6IHN0cmluZztcbiAgICBpc0RyYWdPdmVyOiBib29sZWFuO1xuICAgIGZpbGVzOiBGaWxlW107XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgb25DaGFuZ2U6IEZ1bmN0aW9uIHwgbnVsbDtcbiAgICBvblRvdWNoZWQ6ICgpID0+IHZvaWQ7XG4gICAgdmFsaWRhdG9yQ2hhbmdlOiAoKSA9PiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IEZpbGVbXSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBvbkRyb3Bab25lKGV2dDogRHJhZ0V2ZW50KTogdm9pZDtcbiAgICBvbklucHV0Q2hhbmdlKGZpbGVzOiBGaWxlTGlzdCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzZWxlY3Q7XG59XG4iXX0=