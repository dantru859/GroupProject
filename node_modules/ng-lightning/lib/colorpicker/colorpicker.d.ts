import { ElementRef, Renderer2, ChangeDetectorRef, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IHSV } from './util';
import { NglColorpickerConfig } from './config';
import * as ɵngcc0 from '@angular/core';
export declare class NglColorpicker implements ControlValueAccessor {
    private el;
    private renderer;
    private cd;
    /**
     * An input label as for a form.
     */
    label: string;
    /**
     * Placeholder of input box.
     */
    placeholder: string;
    /**
     * Text for cancel button on popover.
     */
    cancelButtonLabel: string;
    /**
     * Text for submit button of popover.
     */
    submitButtonLabel: string;
    /**
     * Highlights the input as a required field (does not perform any validation).
     */
    required: boolean;
    /**
     * A tooltip that is displayed next to the label.
     */
    fieldLevelHelpTooltip: string | TemplateRef<any>;
    /**
     * Error message when hex color input is invalid.
     */
    invalidColorLabel: string | TemplateRef<any>;
    /**
     * Text for swatch tab of popover.
     */
    swatchTabLabel: string;
    /**
     * Text for custom tab of popover.
     */
    customTabLabel: string;
    /**
     * Hex color values which are used to set the options of the swatch tab of the colorpicker popover.
     */
    swatchColors: string[];
    /**
     * Whether to make the hex color input readonly.
     */
    readonlyInput: boolean;
    /**
     * Determines which tab is visible when popover opens.
     */
    defaultSelectedTab: 'swatches' | 'custom';
    /**
     * Configures to show both or which one of the color selection interfaces.
     */
    variant: 'base' | 'swatches' | 'custom';
    color: string;
    uid: string;
    open: boolean;
    disabled: boolean;
    hexCurrent: string;
    hsvCurrent: {
        hue: any;
        saturation: number;
        value: number;
    };
    constructor(defaultConfig: NglColorpickerConfig, el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: string): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    setDisabledState(isDisabled: boolean): void;
    onSwatchSelection(hex: string): void;
    onCustomSelection(hsv: IHSV): void;
    openChange(open: boolean): void;
    cancel(): void;
    done(): void;
    canApply(): boolean;
    onInput(hex: string): void;
    get isValidInput(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NglColorpicker, [{ optional: true; }, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NglColorpicker, "ngl-colorpicker", never, { "label": "label"; "placeholder": "placeholder"; "cancelButtonLabel": "cancelButtonLabel"; "submitButtonLabel": "submitButtonLabel"; "required": "required"; "invalidColorLabel": "invalidColorLabel"; "swatchTabLabel": "swatchTabLabel"; "customTabLabel": "customTabLabel"; "readonlyInput": "readonlyInput"; "defaultSelectedTab": "defaultSelectedTab"; "swatchColors": "swatchColors"; "variant": "variant"; "fieldLevelHelpTooltip": "fieldLevelHelpTooltip"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JwaWNrZXIuZC50cyIsInNvdXJjZXMiOlsiY29sb3JwaWNrZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSUhTViB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBOZ2xDb2xvcnBpY2tlckNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nbENvbG9ycGlja2VyIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGNkO1xuICAgIC8qKlxuICAgICAqIEFuIGlucHV0IGxhYmVsIGFzIGZvciBhIGZvcm0uXG4gICAgICovXG4gICAgbGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBQbGFjZWhvbGRlciBvZiBpbnB1dCBib3guXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUZXh0IGZvciBjYW5jZWwgYnV0dG9uIG9uIHBvcG92ZXIuXG4gICAgICovXG4gICAgY2FuY2VsQnV0dG9uTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUZXh0IGZvciBzdWJtaXQgYnV0dG9uIG9mIHBvcG92ZXIuXG4gICAgICovXG4gICAgc3VibWl0QnV0dG9uTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBIaWdobGlnaHRzIHRoZSBpbnB1dCBhcyBhIHJlcXVpcmVkIGZpZWxkIChkb2VzIG5vdCBwZXJmb3JtIGFueSB2YWxpZGF0aW9uKS5cbiAgICAgKi9cbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBIHRvb2x0aXAgdGhhdCBpcyBkaXNwbGF5ZWQgbmV4dCB0byB0aGUgbGFiZWwuXG4gICAgICovXG4gICAgZmllbGRMZXZlbEhlbHBUb29sdGlwOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEVycm9yIG1lc3NhZ2Ugd2hlbiBoZXggY29sb3IgaW5wdXQgaXMgaW52YWxpZC5cbiAgICAgKi9cbiAgICBpbnZhbGlkQ29sb3JMYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBUZXh0IGZvciBzd2F0Y2ggdGFiIG9mIHBvcG92ZXIuXG4gICAgICovXG4gICAgc3dhdGNoVGFiTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUZXh0IGZvciBjdXN0b20gdGFiIG9mIHBvcG92ZXIuXG4gICAgICovXG4gICAgY3VzdG9tVGFiTGFiZWw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBIZXggY29sb3IgdmFsdWVzIHdoaWNoIGFyZSB1c2VkIHRvIHNldCB0aGUgb3B0aW9ucyBvZiB0aGUgc3dhdGNoIHRhYiBvZiB0aGUgY29sb3JwaWNrZXIgcG9wb3Zlci5cbiAgICAgKi9cbiAgICBzd2F0Y2hDb2xvcnM6IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gbWFrZSB0aGUgaGV4IGNvbG9yIGlucHV0IHJlYWRvbmx5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5SW5wdXQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGljaCB0YWIgaXMgdmlzaWJsZSB3aGVuIHBvcG92ZXIgb3BlbnMuXG4gICAgICovXG4gICAgZGVmYXVsdFNlbGVjdGVkVGFiOiAnc3dhdGNoZXMnIHwgJ2N1c3RvbSc7XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlcyB0byBzaG93IGJvdGggb3Igd2hpY2ggb25lIG9mIHRoZSBjb2xvciBzZWxlY3Rpb24gaW50ZXJmYWNlcy5cbiAgICAgKi9cbiAgICB2YXJpYW50OiAnYmFzZScgfCAnc3dhdGNoZXMnIHwgJ2N1c3RvbSc7XG4gICAgY29sb3I6IHN0cmluZztcbiAgICB1aWQ6IHN0cmluZztcbiAgICBvcGVuOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGhleEN1cnJlbnQ6IHN0cmluZztcbiAgICBoc3ZDdXJyZW50OiB7XG4gICAgICAgIGh1ZTogYW55O1xuICAgICAgICBzYXR1cmF0aW9uOiBudW1iZXI7XG4gICAgICAgIHZhbHVlOiBudW1iZXI7XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihkZWZhdWx0Q29uZmlnOiBOZ2xDb2xvcnBpY2tlckNvbmZpZywgZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgb25DaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQ7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBhbnkpID0+IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IGFueSk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBvblN3YXRjaFNlbGVjdGlvbihoZXg6IHN0cmluZyk6IHZvaWQ7XG4gICAgb25DdXN0b21TZWxlY3Rpb24oaHN2OiBJSFNWKTogdm9pZDtcbiAgICBvcGVuQ2hhbmdlKG9wZW46IGJvb2xlYW4pOiB2b2lkO1xuICAgIGNhbmNlbCgpOiB2b2lkO1xuICAgIGRvbmUoKTogdm9pZDtcbiAgICBjYW5BcHBseSgpOiBib29sZWFuO1xuICAgIG9uSW5wdXQoaGV4OiBzdHJpbmcpOiB2b2lkO1xuICAgIGdldCBpc1ZhbGlkSW5wdXQoKTogYm9vbGVhbjtcbn1cbiJdfQ==